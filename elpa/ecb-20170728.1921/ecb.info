This is ecb.info, produced by makeinfo version 6.7 from ecb.texi.

INFO-DIR-SECTION GNU Emacs Lisp
START-INFO-DIR-ENTRY
* ECB: (ecb).           Emacs Code Browser
END-INFO-DIR-ENTRY


File: ecb.info,  Node: Top,  Next: Install and first steps,  Prev: (dir),  Up: (dir)

This is the user manual for ECB version 2.40.

ECB stands for "Emacs Code Browser".  While (X)Emacs already has good
*editing* support for many modes, its *browsing* support is somewhat
lacking.  That's where ECB comes in: it displays a number of
informational windows that allow for easy source code navigation and
overview.

The informational windows can contain:

   * A directory tree,
   * a list of source files in the current directory (with full support
     and display of the VC-state),
   * a list of functions/classes/methods/...  in the current file, (ECB
     uses the CEDET-Semantic, or Imenu, or etags, for getting this list
     so all languages supported by any of these tools are automatically
     supported by ECB too)
   * a history of recently visited files (groupable by several
     criterias),
   * helpful informations and possible completions according to the
     current context which is computed by the semantic-analyzer for some
     sort of intellisense,
   * the Speedbar and
   * output from compilation (the "*compilation*" window) and other
     modes like help, grep etc.  or whatever a user defines to be
     displayed in this window.

As an added bonus, ECB makes sure to keep these informational windows
visible, even when you use 'C-x 1' and similar commands.

It goes without saying that you can configure the layout, ie which
informational windows should be displayed where.  ECB comes with a
number of ready-made window layouts to choose from.

*Please note*: Experienced ECB users find a complete alphabetical list
of all commands and user-options in *note Interactive ECB commands:: and
*note Customizable options::.

The latest version of ECB can always be found at the URL
<http://ecb.sourceforge.net>.

To send bug reports, or participate in discussions about ECB, use the
mailing list <ecb-list@lists.sourceforge.net> via the URL
<http://lists.sourceforge.net/lists/listinfo/ecb-list>.

*IMPORTANT*: Cause of extra appearance of SPAM in the mailing-lists,
SourceForge has changed its policy: Now it is only possible to post to
the mailing-list for users who have subscribed this mailing-list.  So
please be aware you will not be able to send comments, bug reports and
improvement suggestions before you have subscribed the ECB-mailing-list.
See the section "Mailing-list" at the ECB-website at
<http://ecb.sourceforge.net> how to do this.

* Menu:

* Install and first steps::     Installing ECB and first steps
* Overview::                    Compact introducing of basic concepts
* Manual usage::                How to use this manual
* ECB-windows::                 Description of all ECB-windows of ECB
* Activation and Deactivation:: How to start and end ECB
* Usage of ECB::                How to use ECB
* Customizing::                 How to customize ECB
* Submitting problem report::   What to do when problems occur
* Upgrading::                   Upgrading and downloading packages
* Common use-cases::             Useful hints and tips
* Elisp programming::           Entry points for Elisp programmers
* Conflicts and bugs::          Known Conflicts with other packages and bugs
* FAQ::                         Frequently asked questions
* Command Index::               Index for interactive commands
* Option Index::                Index for user options
* Concept Index::               Index for concepts and terms

 -- The Detailed Node Listing --

Installation and first steps of ECB

* Installation::                Installation of ECB
* Setting up Emacs::            How to set up Emacs for file parsing with ECB
* First steps::                 First steps after activating ECB first time

Installation of ECB

* Requirements::                Requirements for ECB
* ECB as XEmacs-package::       Installation of ECB as a XEmacs-package
* Standard ECB-Installation::   Standard installation of ECB for (X)Emacs
* Makefile customization::      Customizing build using Makefile.conf

How to set up Emacs for file parsing with ECB

* General hints::               General hints for a correct setup
* Setting up CEDET/semantic::   How to setup semantic correctly
* Non-semantic files::          Setup for file types not supported by semantic

All ECB-windows of ECB

* Basic ECB-windows::           Description of the basic ECB-windows
* Add-on ECB-windows::          Description of additional ECB-windows

The basic ECB-windows of ECB

* Tree-buffer basics::          General introduction into tree-buffers
* Tree-buffer styles::          Displaying the trees with different styles
* ECB Directories-window::      Contents of the ECB Directories-window
* ECB Sources-window::          Contents of the ECB Sources-window
* ECB Methods-window::          Contents of the ECB Methods-window
* ECB History-window::          Contents of the ECB History-window

Displaying the trees with different styles

* Style basics::                Basic knowledge about the styles
* Ascii-based styles::          How to customize the ascii-styles
* Tree-buffers with images::    Which images are used for the tree
* Images for Methods-buffer::   Images for the tags in the Methods-buffer

Add-on ECB-windows of ECB

* Semantic analyser::           Analyses and displays semantic context
* Symboldefinition::            Displays definition of current symbol

Activation and Deactivation

* Standard activation::         How to manually (de)activate ECB
* Automatic activation::        Automatically (de)activating ECB

Usage of ECB

* Using the mouse::             Working with the mouse
* Using the keyboard::          Working with the keyboard
* The edit-area::               How to use the edit-area
* Temp- and compile-buffers::   Displaying temp- and compilation-buffers
* The other window::            How the "other window" is determined
* The Methods window::          Using and customizing the Methods-window
* Filtering the tree-buffers::  Applying filters to the ECB-tree-buffers
* The ECB-layout::              Changing, customizing, redrawing, creating
* Hiding the ECB windows::      Hiding/Showing the ECB-windows
* Maximizing the ECB windows::  Maximizing the ECB-windows
* Back/forward navigation::     Back- and forward navigation like a browser
* ECB-window synchronizing::    Auto./manual synchronizing the ECB-windows
* Stealthy background tasks::   Stealthy background-tasks of ECB
* Interactive ECB commands::    All interactive user-commands of ECB

Working with the keyboard in the ECB-windows

* Navigation/Selection::        Keyboard navigation/selection in a tree-buffer
* Incremental search::          Find nodes as fast as possible
* Personal tree-keybindings::   Adding personal keybindings to a tree-buffer
* Using popup-menus::           Using the popup-menus from keyboard.

Using and customizing the ECB-Methods window

* Visiting tags::               Possible actions after visiting a tag
* Expanding::                   Explicit and automatic expanding
* Customizing the display::     How to customize the Methods-buffer display
* Updating Methods-window::     Updating Methods with contents of current buffer
* Updating for ind. buffers::   Updating Methods for indirect buffers
* Jumping to external tags::    Jumping to the definition of external types

Applying filters to the special ECB-tree-buffers

* Filtering Directories::       Applying filters to the Directories-buffer
* Filtering Sources::           Applying filters to the Sources-buffer
* Filtering History::           Applying filters to the History-buffer
* Filtering Methods::           Applying filters to the Methods-buffer

Changing, customizing, redrawing and creating layouts

* Changing the ECB-layout::     How to change and customize the layout
* Redrawing the ECB-layout::    How and when redrawing the layout
* Changing window sizes::       Changing sizes of the ECB-windows
* Fixing window sizes::         Fixing sizes of the ECB-windows
* Creating a new ECB-layout::   Interactively creating new layouts

Synchronization of the ECB-windows

* General synchronization aspects::       General synchronization aspects
* Synchronization of basic ECB-windows::  Synchronization of basic ECB-windows
* Add-on synchronization::                Synchronization of add-on ECB-windows

Customizing ECB

* General aspects::             General aspects for customizing ECB
* Most important options::      Which option you must know
* Customizable options::        All customizable options of ECB

General aspects for customizing ECB

* setq or customize::           Should i use setq or customize?
* Site-wide customizing::       Site-wide customizing of ECB

All customizable options of ECB

* ecb-general::                 General customizing ECB
* ecb-tree-buffer::             Customizing the general tree layout
* ecb-directories::             Customizing the ECB-directories-tree
* ecb-sources::                 Customizing the ECB-sources-window
* ecb-methods::                 Customizing the ECB-methods-window
* ecb-history::                 Customizing the ECB-history-window
* ecb-analyse::                 Customizing the ECB-analyse-window
* ecb-symboldef::               Customizing the ECB-symboldef-window
* ecb-layout::                  Customizing the ECB-layout
* ecb-compilation::             Customizing the compile-window
* ecb-create-layout::           Customizing options for creating layouts
* ecb-face-options::            Customizing options for faces
* ecb-faces::                   Customizing the faces
* ecb-help::                    Customizing the online help of ECB
* ecb-eshell::                  Customizing the eshell-integration
* ecb-speedbar::                Customizing the speedbar-integration
* ecb-non-semantic::            Customizing parsing non-semantic sources
* ecb-winman::                  Customizing window-manager support
* ecb-mode-line::               Customizing the tree-buffer-modelines
* ecb-version-control::         Customizing the version-control-support

Upgrading and downloading packages

* Downloading new versions::    How to download newer versions of packages
* Auto. option-upgrading::      ECB can auto. upgrade your options

Automatic upgrading of options

* User interface::              Options and commands you should know
* Background information::      Maybe some interesting informations

Handling of common use-cases

* Changing faces::              Changing faces in the ECB tree-buffers
* Small screens::               Working with small screens
* Big screens::                 Working with big screens
* Simulating speedbar::         Simulating speedbar without an extra frame
* Integrating speedbar::        Integrating speedbar in the ECB-frame
* Large directories::           Working with large directories
* Remote directories::          Working with remote directories
* Version-control support::     Supporting Version control systems
* Using eshell::                Optimal using of eshell in ECB
* Grepping directories::        Grepping directories with ECB
* Working with JDEE::           Working best with ECB and JDEE
* Compile-window on demand::    Displaying the compile-window on demand
* Non-semantic sources::        Parsing and displaying non-semantic sources
* Hide-show::                   Using hide-show from the methods-buffer-menu
* Window-managers and ECB::     Support of several Emacs-window-managers
* Virtual folders in History::  Simulating something like virtual folders

Supporting Version control systems

* Identifying backends::        How ECB identifies the VC-backend of a dir
* Checking the state::          How ECB checks the VC-state of a file
* Remote repositories::         What you should know about this
* Refreshing the VC-state::     How to refresh when state changed outside
* Adding new backends::         Necessary steps for adding new backends
* Known VC-problems::           Currently known problems of the VC-support

Entry points for Elisp programmers

* List of variables::           Which variables an Elisp-program can use
* List of hooks::               All available hooks
* tree-buffer::                 Full description of the tree-buffer-library
* Adviced functions::           How to deal with the adviced functions
* The layout-engine::           Programming new layouts and special windows

The library tree-buffer.el

* Introduction::                General description of tree-buffers
* A new tree-buffer::           How to create a new tree-buffer
* A new tree-node::             How to add new tree-nodes to a tree-buffer
* Updating a tree-buffer::      How to update a tree-buffer after changes
* Tree-buffer keybindings::     Default and customizable keybindings
* The tree-buffer-API::         All functions for tree-buffers and -nodes
* Do not with tree-buffer::     Things which are strictly forbidden
* Tree-buffer How to::          Dealing with special situations

How to program new layouts and new special windows

* Programming a new layout::    How to program a new layout
* Programming special windows:: Aspects of programming special windows
* Possible layout-outlines::    The wide range of possible layouts
* The layout-engine API::       The complete layout-engine API

Conflicts and bugs of ECB

* Conflicts::                   Conflicts with other packages
* Bugs::                        Known bugs



File: ecb.info,  Node: Install and first steps,  Next: Overview,  Prev: Top,  Up: Top

1 Installation and first steps of ECB
*************************************

This chapter describes how to install ECB and setup (X)Emacs correctly
and what are the first steps after activation of ECB.

* Menu:

* Installation::                Installation of ECB
* Setting up Emacs::            How to set up Emacs for file parsing with ECB
* First steps::                 First steps after activating ECB first time


File: ecb.info,  Node: Installation,  Next: Setting up Emacs,  Prev: Install and first steps,  Up: Install and first steps

1.1 Installation of ECB
=======================

This section describes how to install ECB.

* Menu:

* Requirements::                Requirements for ECB
* ECB as XEmacs-package::       Installation of ECB as a XEmacs-package
* Standard ECB-Installation::   Standard installation of ECB for (X)Emacs
* Makefile customization::      Customizing build using Makefile.conf


File: ecb.info,  Node: Requirements,  Next: ECB as XEmacs-package,  Prev: Installation,  Up: Installation

1.1.1 Requirements
------------------

This section describes the requirements of ECB. Just ensure that these
requirements of ECB are fulfilled.

The short story: With Emacs >= 23.2 there is nothing to do.  With XEmacs
or Emacs < 23.2 you have to install the CEDET-suite.

The long story:

  1. Emacs-version: ECB works only with (X)Emacs >= 21!  If you have an
     older one, please upgrade.

  2. CEDET-suite: If Emacs >= 23.2 is used then CEDET is already
     integrated into Emacs and there is nothing to do.

     For users of any XEmacs-version, any Emacs-version < 23.2 or the
     latest author CEDET version: Get it from
     <http://cedet.sourceforge.net>, read the setup-instructions in
     <http://cedet.sourceforge.net/setup.shtml> and read also the
     shipped file 'INSTALL'.

     *Please note*: If ECB detects an author version of CEDET (as
     available at <http://cedet.sourceforge.net>) then ECB will ALWAYS
     try to use that one even if you use Emacs >= 23.2!  This is for
     users who want to use latest Emacs >= 23.2 but still prefer using
     the latest author version of CEDET instead of the Emacs-integrated
     one.

     So if you want to use the Emacs-integrated CEDET-suite of Emacs >=
     23.2 you have to ensure that no author-version of CEDET is in the
     'load-path'!  This means that the library cedet.el of the
     author-version MUST NOT be loaded into Emacs (as described in the
     file INSTALL of CEDET)! This is a valid check: (locate-library
     "semantic-ctxt") must return nil!

  3. Only for XEmacs-users: If you use XEmacs you must have installed
     the package c-support (contains hideshow.el).  If you want to read
     the online-help of ECB in HTML-format you must have the library
     browse-url (part of the mail-lib XEmacs package) installed; this
     package is also needed for submitting problem-reports to the
     ECB-maintainers!

  4. Optional for Java-coding: ECB works very well with the JDEE package
     ( <http://jdee.sourceforge.net>) but JDEE is not required by ECB.

Do not install ECB before you have successfully installed the
requirements!


File: ecb.info,  Node: ECB as XEmacs-package,  Next: Standard ECB-Installation,  Prev: Requirements,  Up: Installation

1.1.2 Installation of ECB as a XEmacs-package
---------------------------------------------

This section is only relevant for XEmacs-users!

In previous versions of ECB XEmacs-users could use the
package-management-system of XEmacs for first-time
downloading/installing ECB or for upgrading to a newer version of ECB.

Beginning with version 2.33 ECB does no longer support the old versions
of semantic, eieio and speedbar not part of the CEDET-suite.  ECB >=
2.33 requires fully installed CEDET-suite with version >= 1.0pre6.  This
one is not available as XEmacs-package.  Therefore ECB can also not be
run as XEmacs-package.  If cedet will become a XEmacs-package then
probably ECB will come back as XEmacs-package.  But in the meanwhile you
have to install ECB "by hand" as described in the next section (*note
Standard ECB-Installation::).


File: ecb.info,  Node: Standard ECB-Installation,  Next: Makefile customization,  Prev: ECB as XEmacs-package,  Up: Installation

1.1.3 Standard installation of ECB for (X)Emacs
-----------------------------------------------

Follow exatly these steps to install ECB:

  1. Fulfill all requirements ECB needs (*note Requirements::)

     ECB performs two autom checks:

        - At load-time: It checks if cedet is at least installed so ECB
          can be loaded.  If not it reports an error.

        - At start-time: It checks if the correct versions of cedet and
          semantic are installed and gives you proper feedback.

     So if you are not sure if you have installed the required packages
     at all or if you have installed the correct versions of these
     packages then do not worry about this, just go on with the
     following installation steps: If ECB is missing something it will
     give you proper feedback and support not later than at load-time or
     start-time!

  2. Download and unpack the ECB archive (probably you have already done
     this :-)

  3. Add the new ECB-directory to your 'load-path' variable.

     You *MUST* add the ECB-install-directory to the 'load-path' either
     by changing the 'load-path' variable directly in your '.emacs' or
     'site-lisp/site-start.el' or by working with a file
     'subdirs.el'(1).

     So for example the needed entry for your '.emacs'-file could be:

          (add-to-list 'load-path
                       "/path/to/your/ecb/installation/directory")

     *ATTENTION*: ECB is NOT properly installed if it's directory is not
     added to 'load-path' and for example just loaded by

          (load-file "/path/to/ecb/ecb.el")

     Do not do this!  It will not work!

  4. Load ECB by adding code to your '.emacs':

     If you want to load the complete ECB at (X)Emacs-loadtime
     (Advantage: All ECB-options available after loading ECB.
     Disadvantage: Increasing loadtime(2)):

          (require 'ecb)

     If you want to load the ECB first after starting it by
     'ecb-activate' (Advantage: Fast loading(3).  Disadvantage: ECB- and
     semantic-options first available after starting ECB):

          (require 'ecb-autoloads)

     This loads all available autoloads of ECB, e.g.  'ecb-activate',
     'ecb-minor-mode', 'ecb-byte-compile' and 'ecb-show-help'.

     Regardless which method you prefer: In both cases the used
     statement must be placed *after* the statement of step 3!

     Only for users of a manually installed author version of the
     CEDET-suite (not that one integrated into Emacs >= 23.2):
     Instructions for loading CEDET into Emacs must be placed somewhere
     before the statements needed for loading ECB (s.a.)!

  5. Restart (X)Emacs.

ECB is now ready for use and can be activated by calling 'M-x
ecb-activate' or 'ecb-minor-mode'.  Now you can either starting using
ECB or you can do these optional installation steps:

  6. Reading the online help with 'ecb-show-help'

     Maybe you are interested to read the online-help of ECB before
     first start.

  7. Bytecompiling ECB with 'ecb-byte-compile'

     This byte compiles ECB. You can safely ignore all messages if there
     are any.  (You can also bytecompile ECB from the command-line
     either by using the 'Makefile' or by using the batch-file
     'make.bat'; just read the comments in that file you choose.)

     'Mekefile' can be customized using 'Makefile.conf' (*note Makefile
     customization::).

  8. Installing the Info-help of ECB

     The ECB distribution contains a subdirectory 'info-help' which
     contains the online-help of ECB in Info-format.  You can install
     this online help so it's available in the Top-directory of Info.
     There are two ways to do this:

        - Use "install-info" (recommended):

            1. Copy the files of the subdirectory 'info-help' into the
               info-directory of Emacs

            2. Install the file 'info-help/ecb.info' with the command
               "install-info" (if available on your system) in the
               'dir'-file.

          The supplied 'Makefile' offers a target 'install-help' which
          does both of these steps.  You have just to call 'make
          install-help' with the correct EMACSINFOPATH set (see the
          comment in 'Makefile').  Here is an example:

               make EMACSINFOPATH=/path/to/emacs/info install-help

        - Manual Installation:

          Copy the files of the subdirectory 'info-help' into the
          info-directory of Emacs and modify the file 'dir' manually.

     But it doesn't matter if you do not execute this step (8.)  because
     the online help of ECB is always available though, see
     'ecb-show-help' (*note Interactive ECB commands::).

   ---------- Footnotes ----------

   (1) This works at least for Emacs but XEmacs may have slightly
different mechanisms; see the XEmacs documentation

   (2) Cause of full loading of ECB itself and also the packages
semantic, eieio and speedbar regardless if ECB is started.

   (3) ECB, semantic, eieio and speedbar are first loaded after starting
ECB or with other words: ECB and semantic are not loaded if you do not
use/need them


File: ecb.info,  Node: Makefile customization,  Prev: Standard ECB-Installation,  Up: Installation

1.1.4 Customizing build using Makefile.conf
-------------------------------------------

Platform specific vars and programs can be customized from a
command-line or by means of 'Makefile.conf', for which
'Makefile.conf.template' is a template.  It contains descriptions of all
configuration options.  Copy it to 'Makefile.conf' and override as
needed.

If settings hasn't been changed, 'Makefile' uses platform specific
defaults.

There is a target, that prints configuration values: 'make printconf'.

When you use CEDET built into Emacs and don't install help, then you
don't even need the 'Makefile.conf'.

When you use CEDET from the repo and/or want to install info files, then
set appropriate variables in 'Makefile.conf', for example:

     CEDET = ~/projects/cedet-bzr
     EMACSINFOPATH = ~/.emacs.d/info


File: ecb.info,  Node: Setting up Emacs,  Next: First steps,  Prev: Installation,  Up: Install and first steps

1.2 How to set up Emacs for file parsing with ECB
=================================================

*Please note*: Normally it should not necessary for you to bother with
the following stuff unless you have problems getting ECB working
correctly for you.

* Menu:

* General hints::               General hints for a correct setup
* Setting up CEDET/semantic::   How to setup semantic correctly
* Non-semantic files::          Setup for file types not supported by semantic


File: ecb.info,  Node: General hints,  Next: Setting up CEDET/semantic,  Prev: Setting up Emacs,  Up: Setting up Emacs

1.2.1 General hints for a correct setup
---------------------------------------

ECB is for browsing files and therefore you have to setup your
Emacs-configuration properly so the file-parsing engines like semantic,
imenu or etags can be activated automatically for parsing your
Emacs-Lisp, C, C++ or Java buffers(1).  For this Emacs must activate the
correct 'major-mode' for the source-files and Emacs can only do this if
the option 'auto-mode-alist' is setup correctly.  The correct
major-modes and possible file-extensions(2) are:

LANGUAGE       MAJOR-MODE                           EXTENSION(S)
                                                    
Emacs Lisp     'emacs-lisp-mode'                    .el
                                                    
C              'c-mode'                             .h, .c
                                                    
C++            'c++-mode'                           .h, .hxx, .hh, .HH,
                                                    .cxx, .cpp, .cc, .CC
                                                    
Java           'java-mode' or 'jde-mode' (if you    .java
               use JDEE)

Example: If you want files with extension ".cpp" being c++-parsed by
semantic and ECB, your 'auto-mode-alist' must contain an entry like:

     ("\\.cpp\\'" . c++-mode)

After this ECB will correctly parse your ".cpp"-sources and display all
the parsing information in the ECB-methods buffer.

   ---------- Footnotes ----------

   (1) semantic supports some more "languages" like Phython, Makefiles
and some more.  But these are the most important ones.

   (2) Especially for C++ and C you can use any extension you want but
these are the most common ones!


File: ecb.info,  Node: Setting up CEDET/semantic,  Next: Non-semantic files,  Prev: General hints,  Up: Setting up Emacs

1.2.2 Setting up CEDET/semantic
-------------------------------

To ensure ECB and semantic are working correctly for all by semantic
supported languages you have to pay attention to the following aspects
concerning your Emacs-setup:

  1. Setting up CEDET/semantic itself

     This section implies that you either use Emacs >= 23.2 or that you
     have already successfully installed the CEDET-suite.

     For all semantic-supported file-types parsing files is done
     completely by semantic.  ECB just displays the parsing results.

        * Users of Emacs >= 23.2: You just have to enable semantic by
          activating the semantic-mode.  This can be done by adding code
          to your initialization-file (e.g.  .emacs) like this:

               (semantic-mode 1)

          This should be placed BEFORE the statements which activate
          ECB.

          As an alternative you can use the 'ecb-before-activate-hook'
          like follows:

               (add-hook 'ecb-before-activate-hook
                         (lambda () (semantic-mode 1)))

          This is a smarter way when you need semantic only if ECB is
          active.

        * Users of XEmacs or Emacs < 23.2: You should read carefully the
          file 'INSTALL' shipped with the cedet-suite.  In addition the
          CEDET-website offers a link to a "Gentle introduction to
          Cedet".  It's worth to read it!  You find it here:
          <http://xtalk.msk.su/~ott/en/writings/emacs-devenv/EmacsCedet.html>
          If CEDET is not correctly installed then ECB can not setup
          semantic for its needs.

     *Minimum setup recommendation*: It is very useful to enable the
     'global-semantic-idle-scheduler-mode' and
     'global-semanticdb-minor-mode'.  Read the manual of Emacs 23.2 or
     the manual of cedet/semantic how to do this.  With CEDET-versions
     >= 1.0pre6 this can be done by adding
     'semantic-load-enable-minimum-features' to your startup-file.
     Please read also the subsection "Jumping to the definition of
     external types" in *note ECB Methods-window::.

  2. Checking your hooks (Only for XEmacs and Emacs < 23.2!)

     If you use Emacs > 23.2 you can ignore the following paragraphs.

     If you have already checked point (1.)  and if you have still
     problems getting ECB/semantic working properly for your sources you
     should check the related major-mode hook.  Every major-mode X has a
     hook with name "X-hook" which is evaluated after activating the
     major-mode (see above, 2.), e.g.  the hook for the major-mode
     'c++-mode' is 'c++-mode-hook'.

     Semantic adds automatically during load-time a special
     "semantic-setup" to these major-mode hooks(1) in form of a
     "setup-function".  Example: For c and c++ modes semantic adds
     'semantic-default-c-setup' to 'c-mode-hook' and 'c++-mode-hook'.

     If your own Emacs-setup (e.g.  in '.emacs' or
     'site-lisp/site-start.el') overwrites such a major-mode-hook then
     semantic can not be activated for this major-mode and in
     consequence ECB can not work properly too!

     Check if your Emacs-setup uses somewhere 'setq' for adding code to
     a major-mode-hook.  *IMPORTANT*: Use 'add-hook' instead of
     'setq'(2)!

If your source-files are "running" with correct 'major-mode' and - in
case of XEmacs or Emacs < 23.2 - correct major-mode hooks ECB and
semantic will do what you expect them doing!

   ---------- Footnotes ----------

   (1) Of course only for major-modes supported by semantic!

   (2) 'setq' replaces/overwrites the current value of a hook with the
new value whereas 'add-hook' *adds* the new value to the old-value of
the hook!


File: ecb.info,  Node: Non-semantic files,  Prev: Setting up CEDET/semantic,  Up: Setting up Emacs

1.2.3 Setup for file types not supported by semantic
----------------------------------------------------

From version 1.94 on ECB supports also parsing and displaying
file-contents for file-types not supported by semantic (i.e.  there is
no semantic-grammar available for such file-types).

Such non-semantic file-types can often be parsed by imenu and/or etags.
Both of these parsing methods are now supported: ECB can display the
results of imenu and/or etags in its Method-buffer.  ECB uses for this
speedbar-logic.  Therefore the following speedbar options takes effect
for this feature:

   - 'speedbar-dynamic-tags-function-list'
   - 'speedbar-tag-split-minimum-length'
   - 'speedbar-tag-regroup-maximum-length'
   - 'speedbar-tag-hierarchy-method'

Normally there should be no need for you to bother with these options,
because the default values are suitable for most situations!  But if you
are not satisfied with the parsing/display results then you can change
some of these options.


File: ecb.info,  Node: First steps,  Prev: Setting up Emacs,  Up: Install and first steps

1.3 First steps after activating ECB first time
===============================================

This section of the ECB online-help is displayed automatically by ECB
after activating ECB first time and describes what are the first basic
steps:

  1. Configure where ECB can find your sources:

     Call 'M-x customize-option RET ecb-source-path RET'(1).  This lets
     you customize the option 'ecb-source-path' with the
     customize-feature of Emacs.  This opens a customize-buffer where
     you can insert all the directories where ECB can find your
     source-files.  Save your changes with the button "Save for future
     sessions" and then throw away this customize-buffer either by
     killing it with 'M-x kill-buffer' or clicking at the button
     "Finish".

  2. Take a look at the most important options of ECB Call 'M-x
     ecb-customize-most-important RET' and see a list of options which
     you should at least know that these options exist.

  3. Read the online-help of ECB:

     The online-help of ECB is available via

        - calling 'M-x ecb-show-help',
        - pressing 'C-c . h' or
        - using the menu "ECB".

     (The section you are currently reading is part of the online-help
     of ECB)

     The chapter "Common use-cases" is also very interesting!

  4. Start working with ECB.

   ---------- Footnotes ----------

   (1) This means first hitting the keys 'M' (Meta- or Alt-key) and 'x'
simultaneously, inserting "customize-option" in the minibuffer, hitting
RETURN, inserting "ecb-source-path" in the minibuffer and finally
hitting RETURN again


File: ecb.info,  Node: Overview,  Next: Manual usage,  Prev: Install and first steps,  Up: Top

2 Overview
**********

ECB is a global minor-mode which offers a couple of "ECB-windows" for
browsing your sources comfortable with the mouse and the keyboard.

ECB offers some basic ECB-windows to browse your sources:
   - ECB-Directories for browsing directories
   - ECB-Sources for browsing source-files
   - ECB-Methods for browsing the contents of a source
   - ECB-History for a history for open or recently opened files

See *note Basic ECB-windows:: for a detailled description what these
basic ECB-windows offer.  See *note ECB-windows:: for a general
introduction in the ECB-window-concept of ECB.

In addition ECB offers some add-on ECB-window for special purposes:
   - ECB-Analyse for some intellisense stuff like possible completions
     or local variables
   - ECB-Symboldef for displaying the documentation of current symbol
     under point

See *note Add-on ECB-windows:: for a detailled description what these
add-on ECB-windows offer.

In addition to these "special" ECB-windows you have always an
"edit-area" where you can edit your source-files.  The edit-area can be
divided into several "edit-windows" - as many as you need (*note The
edit-area::).  And at the bottom of the ECB-frame a persistent
"compilation-window" (also called "compile-window") can be displayed
(optional), where all the output of Emacs-compilation (compile, grep
etc.)  and Emacs temp-buffers (help etc.)  is shown (*note Temp- and
compile-buffers::).

The following "screenshot" illustrates the typical layout of the
ECB-frame(1):

     ------------------------------------------------------------------
     |              |                                                 |
     |  Directories |                                                 |
     |              |                                                 |
     |--------------|                                                 |
     |              |                                                 |
     |  Sources     |                                                 |
     |              |                                                 |
     |--------------|                   Edit-area                     |
     |              |   (can be splitted in several edit-windows)     |
     |  Methods     |                                                 |
     |              |                                                 |
     |--------------|                                                 |
     |              |                                                 |
     |  History     |                                                 |
     |              |                                                 |
     ------------------------------------------------------------------
     |                                                                |
     |            Persistent Compilation-window (optional)            |
     |                                                                |
     ------------------------------------------------------------------

   ---------- Footnotes ----------

   (1) This is only one example of the layouts ECB offers, see *note
Changing the ECB-layout::


File: ecb.info,  Node: Manual usage,  Next: ECB-windows,  Prev: Overview,  Up: Top

3 How to use this manual
************************

*IMPORTANT*: You should have read the chapter *note Overview:: before
going on reading the current chapter.

This chapter describes shortly the contents of the following chapters of
this manual so maybe you can find faster what you are searching for.

All ECB-windows of ECB (*note ECB-windows::)
     Gives an introduction into the concept of ECB-windows of ECB, what
     they are, which different types exist, how they look, how they can
     be used and last but not least what they do in detail, i.e.
     explains every ECB-window of ECB in detail.

Activation and Deactivation (*note Activation and Deactivation::)
     Describes how to activate and deactivate ECB and which different
     types of activation are possible.

Usage of ECB (*note Usage of ECB::)
     Describes in detail how to use ECB with mouse and keyboard,
     explains the concept of the edit-area and the persistent
     compile-window, describe how to change the window-layout and hide
     and show special windows, which stealthy background-tasks ECB
     performs and so on...

Customizing ECB (*note Customizing::)
     Gives an overview of the most important options of ECB and tell you
     something about do's and don'ts concerning customization of ECB.
     Lists all options of ECB and describe exactly the purpose of them.

Submitting a problem report (*note Submitting problem report::)
     Instructions what to do if you encounters problems with ECB.

Upgrading and downloading ECB (*note Upgrading::)
     Gives an introduction into the automatic option-upgrading-feature
     of ECB.

Common use-cases (*note Common use-cases::)
     How to deal with common (and also some special) situations and
     circumstances, so e.g.  working with big and small screens, working
     with large directories, using the builtin version-control-support
     of ECB, parsing non-semantic-supported sources like perl, using
     hide-show, working best with eshell and JDEE and some
     window-managers of Emacs (like escreen or winring) and many more...

Entry points for Elisp programmers (*note Elisp programming::)
     All informations needed by programmers when using some ECB-concepts
     from within other elisp-libraries.  This includes a full
     description how to use the ECB-independent library tree-buffer.el.
     Lists also all available hooks and describes with full working
     example how to program own layouts.

Conflicts and bugs of ECB (*note Conflicts and bugs::)
     Lists all currently known bugs and problems and gives well working
     work-arounds.

Frequently asked Questions (*note FAQ::)
     Take a look...

Command Index (*note Command Index::)
     List of all interactive commands of ECB

Option Index (*note Option Index::)
     List of all user-customizable options of ECB

Concept Index (*note Concept Index::)
     List of all concepts introduced by ECB


File: ecb.info,  Node: ECB-windows,  Next: Activation and Deactivation,  Prev: Manual usage,  Up: Top

4 All ECB-windows of ECB
************************

ECB displays a number of informational windows that allow for easy
source code navigation and overview.  These informational windows are
called "ECB-windows".  Each ECB-window is displayed in its own special
window/buffer which is dedicated and read-only.

There are some "basic" ECB-windows (e.g.  for browsing directories and
sources) and some "add-on" ECB-windows for special purposes like
displaying the definition of the current symbol under point.  This
chapter describes all ECB-windows of ECB in detail.

* Menu:

* Basic ECB-windows::           Description of the basic ECB-windows
* Add-on ECB-windows::          Description of additional ECB-windows


File: ecb.info,  Node: Basic ECB-windows,  Next: Add-on ECB-windows,  Prev: ECB-windows,  Up: ECB-windows

4.1 The basic ECB-windows of ECB
================================

ECB offers basic ECB-windows for browsing directory-structures, files of
a directory and contents of source-files (e.g.  methods and variables).
These basic ECB-windows are build from a special class of ECB-windows,
called "tree-buffer".  See *note Tree-buffer basics:: for more details
about the functionality of tree-buffers.  See *note Tree-buffer styles::
to get an impression about the look&feel of these tree-buffers.

In the following subsections these basic ECB-windows of ECB will be
explained in detail.

* Menu:

* Tree-buffer basics::          General introduction into tree-buffers
* Tree-buffer styles::          Displaying the trees with different styles
* ECB Directories-window::      Contents of the ECB Directories-window
* ECB Sources-window::          Contents of the ECB Sources-window
* ECB Methods-window::          Contents of the ECB Methods-window
* ECB History-window::          Contents of the ECB History-window


File: ecb.info,  Node: Tree-buffer basics,  Next: Tree-buffer styles,  Prev: Basic ECB-windows,  Up: Basic ECB-windows

4.1.1 General introduction into tree-buffers
--------------------------------------------

4.1.1.1 Content and structure of a tree-buffer
..............................................

ECB displays most of its informations (e.g.  about directory-structures
or file-contents) in so called "tree-buffers" which means the display of
such a tree-buffer is structured in a tree consisting of "tree-nodes".
Every line in a tree-buffer displays exactly one tree-node.  Each node
can have any arbitrary number of "children"-nodes.  If a tree-node has
no children then it is called a "leaf".

Each tree-buffer of ECB is displayed in an own special ECB-window/buffer
which is read-only ie.  not editable.

The difference between a natural tree like a fir and an ECB-tree is that
the root(-node) of a tree-buffer is not visible but only its children.
In the example below the nodes parent-node-1 and parent-node-2 are the
children of the invisible root-node.

If a tree-node contains at least one child it is displayed with a
special expand/collapse-symbol (see the example below).  This symbol
allows expanding (rsp.  collapsing) the tree-node wheras expanding means
to display the children-nodes and collapsing means to hide the childrens
of a tree-node.

Here is an example of a tree-buffer:

     [+] parent-node-1  -------.
     [-] parent-node-2  -------|
         [-] expanded  --------|
             leaf-node-1  -----|
             leaf-node-2  -----|-----[tree-nodes]
             leaf-node-3  -----|
             leaf-node-4  -----|
         [+] collapsed  -------ﾴ
          |
          `-----------------[expand/collapse-symbol]

4.1.1.2 Possible actions for a tree-node
........................................

In most cases an action is triggered when clicking with the mouse onto a
tree-node(1) (e.g.  clicking onto "leaf-node-1" or "parent-node-1" in
the example above).  Which actions depends on the type of the
tree-buffer.  For example clicking on a tree-node in the
ECB-sources-buffer (which is the name of a source-file) opens the
relelated file in the edit-area of ECB (*note ECB Sources-window::)
whereas clicking onto a node in the ECB-methods-buffer (which is the
name of a tag in the current source-file displayed in the edit-area)
"jumps" to the location of this tag in the source-buffer in the
edit-area (*note ECB Methods-window::).

Almost every ECB-window of ECB offers a special popup-menu when clicking
with the right mouse-button (of course also possible via keyboard, see
*note Using the keyboard::) onto a tree-node (e.g.  some senseful
actions possible for directory-nodes like grepping this directory or
performing version-control actions for this directory or something
else).

See *note ECB Directories-window::, *note ECB Sources-window::, *note
ECB Methods-window:: and *note Add-on ECB-windows:: for a detailed
description which actions are triggered and which popup-menus are
offered in all the ECB-windows of ECB.

4.1.1.3 Sticky parent-node for tree-buffers
...........................................

In the header-line (only for GNU Emacs) of a tree-buffer always the
current-parent node of the first visible node is displayed (if there is
a parent node).  So a user always has a good overview to which parent a
node belongs.  This sticky node is exactly in the same manner clickable
as all other nodes (see above).

There is a option 'ecb-tree-make-parent-node-sticky' which
enabales/disables this feature (default is enabled).

There is also an option 'ecb-tree-stickynode-indent-string'.  Normally
there is no need to bother with this option but if you encounter
alignment-problems with the sticky node in the headerline then take a
look at this option, because it allows to fix the problem.

This feature is only available for GNU Emacs >= 21.

   ---------- Footnotes ----------

   (1) Of course using the keyboard is also possible, see *note Using
the keyboard::.


File: ecb.info,  Node: Tree-buffer styles,  Next: ECB Directories-window,  Prev: Tree-buffer basics,  Up: Basic ECB-windows

4.1.2 Displaying the trees with different styles
------------------------------------------------

ECB offers three different styles for the tree-buffers in the
ECB-windows.  Two of the styles are ascii-based and one style uses
images for drawing the tree-structure.

* Menu:

* Style basics::                Basic knowledge about the styles
* Ascii-based styles::          How to customize the ascii-styles
* Tree-buffers with images::    Which images are used for the tree
* Images for Methods-buffer::   Images for the tags in the Methods-buffer


File: ecb.info,  Node: Style basics,  Next: Ascii-based styles,  Prev: Tree-buffer styles,  Up: Tree-buffer styles

4.1.2.1 Basic knowledge about the styles
........................................

There are nine image-names which define the control- and guide-symbols
to draw the tree.  Here is the list of the allowed image-names and the
related corresponding ascii-symbols:

   - open ("[-]"): The control-symbol displayed for an opened tree-node
     which has several subnodes.  Clicking onto this control closes the
     node.

   - close ("[+]"): The control-symbol displayed for a closed tree-node,
     i.e.  an expandable node with subnodes but all subnodes are hidden.
     Clicking onto this control opened the node and displays its
     subnodes - if there are any.  If it has no subnodes the
     empty-symbol will be displayed.

   - empty ("[x]"): The symbol displayed for an empty node.  An empty
     node is a node which could have subnodes but has currently none.

   - leaf ("*"): The symbol displayed for a node which can not have any
     subnodes so it is a "leaf" in the tree.

   - guide (" |"): The symbol used for drawing vertical "guide-lines"
     for opened nodes.  See the example below.

   - no-guide (" "): Sometimes invisible guide-lines are needed to draw
     the tree.

   - end-guide (" '"): The symbol used for the guide-line of the last
     subnode of an opened node.

   - handle ("-"): The symbol displayed before every subnode.  Each
     handle is connected to a guide-line - either a normal guide or an
     end-guide.

   - no-handle (" "): An invisible handle.

A tree will be build-up with these elements like follows:

     [-] node-with-subnodes      (open)
      |-[+] not-empty-subnode1   (guide+handle+close)
      |-[x] empty-subnode        (guide+handle+empty)
      `-[-] not-empty-subnode2   (end-guide+handle+open)
         |-* leaf-1              (no-guide+no-handle+guide+handle+leaf)
         `-* leaf-2              (no-guide+no-handle+end-guide+handle+leaf)


File: ecb.info,  Node: Ascii-based styles,  Next: Tree-buffers with images,  Prev: Style basics,  Up: Tree-buffer styles

4.1.2.2 How to customize the ascii-styles
.........................................

The ECB-option 'ecb-tree-buffer-style' offers two different styles
completely drawn with ascii-controls and -guides.

Ascii-style with guide-lines (value 'ascii-guides')(1):

     [-] ECB
      |  [+] code-save
      `- [-] ecb-images
          |  [-] directories
          |   |  [-] height-15
          |   |   |  * close.xpm
          |   |   |  * empty.xpm
          |   |   |  * leaf.xpm
          |   |   `- * open.xpm
          |   |  [+] height-17
          |   |  [+] height-19
          |   `- [+] height-21
          |  [x] history
          |  [x] methods
          `- [x] sources

Ascii-style without guide-lines (value 'ascii-no-guides') - this is the
style used by ECB <= 1.96:

     [-] ECB
         [+] code-save
         [-] ecb-images
             [-] directories
                 [-] height-15
                     * close.xpm
                     * empty.xpm
                     * leaf.xpm
                     * open.xpm
                 [+] height-17
                 [+] height-19
                 [+] height-21
             [x] history
             [x] methods
             [x] sources

The tree-layout of both ascii-styles can be affected with the options
'ecb-tree-indent' and 'ecb-tree-expand-symbol-before' (the examples
above have set 4 for the former and true for the latter one).  For the
guide-style the face and color of the guide- and handle-symbols can be
customized with the option 'ecb-tree-guide-line-face' (default is the
equal-named face).

   ---------- Footnotes ----------

   (1) For a better look&feel of such a tree-buffer ECB displays only
the last subnode of an opened node with a handle!


File: ecb.info,  Node: Tree-buffers with images,  Next: Images for Methods-buffer,  Prev: Ascii-based styles,  Up: Tree-buffer styles

4.1.2.3 Which images are used for the tree
..........................................

Depending on the value of 'ecb-tree-buffer-style' and the image-support
of (X)Emacs, the tree-buffer try to use images instead of strings to
draw a nice-looking tree.

If images can and should be used then the option
'ecb-tree-image-icons-directories' tells ECB where to search for
suitable image-icons for each of the nine image-names (see above).  An
image is used for displaying a control with name "XXX" if one of the
directories of 'ecb-tree-image-icons-directories' contains an image-file
with basename "ecb-XXX" and an extension which is supported by (X)Emacs.
Currently supported extensions are ".xpm", ".png", ".gif", ".jpeg",
."jpg" and ".xbm".

Example: To display the control with name "open" with a suitable image
then one of the directories of 'ecb-tree-image-icons-directories' must
contain a file with name "ecb-open.xpm" or "ecb-open.png" etc.  See the
description of this option to get all important details how and in which
sequence ECB searches the directories of
'ecb-tree-image-icons-directories'.

ECB comes with predefined default-images usable for every tree-buffer
and special images for the Directories- and the Methods-tree-buffer.
They are defined in several different heights - so for the most senseful
font-heights of a tree-buffer a fitting image-size should be available.
The shipped images reside either in the subdirectory "ecb-images" of the
ECB-installation or - if ECB is installed as regular XEmacs-package - in
the ECB-etc data-directory (the directory returned by evaluating
(locate-data-directory "ecb").  If you do not want to change the images
then you normally have nothing to do because the default value of
'ecb-tree-image-icons-directories' points already to the correct
image-directories.

A special remark for XEmacs:

At least XEmacs 21.14 (but probably previous versions too) has a bug in
its display-engine which prevents adjacent images to be displayed
correctly.  The effect is, that in a row of two or more adjacent images
(e.g.  end-guide+handle+open - see the tree-example above) always all
images are masked by the last one, means only the last one is visible.
If at least one normal character (e.g.  a space) is placed between two
images then the images are displayed correctly.  Therefore ECB has
implemented the following work-around to get best possible results with
XEmacs: open-, close-, empty-, leaf-, guide-, end-guide- and
no-guide-images are displayed with images and the handle- and the
no-handle-images are displayed with the corresponding ascii-symbols
(which is "-" rsp.  " ").  The face (the color) of the handle-symbol is
customizable via the option 'ecb-tree-guide-line-face'.

This bug is already reported to the XEmacs-team.  If your XEmacs has
fixed this bug then add the following to your '.emacs'-file (or
whereever your emacs-setup is located):

     (setq tree-buffer-enable-xemacs-image-bug-hack nil)

Then ECB uses images without any special work-around with XEmacs too.
Just try it - if the tree-buffers look ugly then the XEmacs-bug is
probably not fixed correctly.


File: ecb.info,  Node: Images for Methods-buffer,  Prev: Tree-buffers with images,  Up: Tree-buffer styles

4.1.2.4 Special images for the Methods-buffer
.............................................

ECB can display all the semantic-tags in the Method-buffer with special
icons for methods, variables and classes - each of them with a different
icon dependend of the protection of the tag.  This feature can be
disabled/enabled via the option
'ecb-display-image-icons-for-semantic-tags'.  All the special images are
located in that directory where the option
'ecb-tree-image-icons-directories' point to for methods.


File: ecb.info,  Node: ECB Directories-window,  Next: ECB Sources-window,  Prev: Tree-buffer styles,  Up: Basic ECB-windows

4.1.3 ECB Directories-window
----------------------------

The ECB directories interactor is for browsing directories.  The direct
children of the invisible root-node are called "source-path" and can be
defined with the option 'ecb-source-path'.  Each source-path is the
starting-node of the complete directory-structure below this path and
can be browsed with the directories-interactor.

When a sources ECB-window is contained in the current layout then per
default only directories and subdirectories are displayed in the
directories tree-buffer (the source-files are displayed in the sources
tree-buffer - see *note ECB Sources-window::) but this can be changed
with the option 'ecb-show-sources-in-directories-buffer'.

4.1.3.1 Usage of the directories ECB-window
...........................................

   * Select directories (and - if enabled - source files) in the
     "ECB-Directories" buffer by clicking a mouse button on the
     directory name or by hitting RETURN when the cursor is placed on
     the item line, see *note Usage of ECB::.

     IMPORTANT: If you use the POWER-click (i.e.  hold down the
     SHIFT-key while clicking with the primary mouse button (*note Using
     the mouse::) or RETURN (*note Using the keyboard::)) on a directory
     node in the this buffer then the directory-contents-cache for this
     directory will be refreshed and actualized.

   * Directory names with a "[+]" symbol after (or before) them can be
     expanded/collapsed by clicking on the symbol, pressing the TAB key
     (*note Using the keyboard::) when the cursor is placed on the
     package line or clicking a mouse button on the item, see *note
     Using the mouse::.

   * Right clicking on an item will open a popup menu where different
     operations on the item under the mouse cursor can be performed.
     This popup-menu offers operations for version-control, dired, grep,
     some file-operations like creating a directory and commands to make
     a directory a source-path in the sense of 'ecb-source-path'.

   * Pressing F2 will open the ECB customization group (*note
     Customizing::) in the edit window.  F3 shows the online help in the
     edit-window.  Pressing F4 in the ECB-directories buffer will offer
     adding a new source-path.

When source-files-nodes are displayed in the directories-buffer (see
'ecb-show-sources-in-directories-buffer') then for these nodes all
descriptions of section *note ECB Sources-window:: are valid.

4.1.3.2 Activating/Displaying the directories ECB-window
........................................................

Either use one of the predefined layouts which contain the directories
ECB-window (*note Changing the ECB-layout::) (e.g.  via 'C-c . l c') or
create a new ecb-layout via the command 'ecb-create-new-layout' and add
a buffer of type "directories" into this new layout (*note Creating a
new ECB-layout::).

4.1.3.3 Customizing the directories ECB-window
..............................................

See *note ecb-directories:: for a list of all options currently
available for customizing this ECB-windows to your needs.


File: ecb.info,  Node: ECB Sources-window,  Next: ECB Methods-window,  Prev: ECB Directories-window,  Up: Basic ECB-windows

4.1.4 ECB Sources-window
------------------------

ECB offers a ECB-windows for displaying source-file-names of a certain
directory: The sources-window.  It displays all source-file names of the
currently selected directory of the directories-ECB-window (*note ECB
Directories-window::).

The history-tree-buffer is a "flat" tree-buffers means all nodes are
direct children of the invisible root-node and can not be expanded.

4.1.4.1 Usage of the ECB-Sources-window
.......................................

   * Source files can be selected by clicking with the primary mouse
     button (*note Using the mouse::) or hitting RETURN (*note Using the
     keyboard::) on the source row in the "ECB-Sources"-window.  The
     buffer of the selected source-file will be displayed in an
     edit-window - which one depends on the setting in
     'ecb-mouse-click-destination'.

     IMPORTANT: If you use the POWER-click (i.e.  hold down the
     SHIFT-key while clicking with the primary mouse button (*note Using
     the mouse::) or RETURN (*note Using the keyboard::)) on a source
     row in the ECB-Sources-windows then the source will not be
     displayed in an edit-window but it will be scanned in the
     background and all its contents (e.g.  methods and variables) are
     listed in the "ECB Methods"-window (*note ECB Methods-window::.  So
     you can get an overlook over the source without changing the buffer
     in the edit-window.

   * Clicking on the source file with the secondary mouse button or
     C-RETURN (*note Usage of ECB::) will open the source file in
     another edit window - which one depends on the setting in
     'ecb-mouse-click-destination'.

   * Right clicking on a source file (mouse-button 3) will open a popup
     menu where different operation on the item under the mouse cursor
     can be performed.  This popup-menu offers operations for
     version-control, dired, grep, filtering the file-names and some
     file-operations like deleting the related file from disk.  In
     addition the ECB-Sources-window can be maximized via the popup-menu

4.1.4.2 Activating/Displaying the ECB-Sources-window
....................................................

Either use one of the predefined layouts which contain the sources
ECB-window (*note Changing the ECB-layout::) (e.g.  via 'C-c . l c') or
create a new ecb-layout via the command 'ecb-create-new-layout' and add
a buffer of type "sources" into this new layout (*note Creating a new
ECB-layout::).

4.1.4.3 Customizing the ECB-Sources-window
..........................................

See *note ecb-sources:: for a list of all options currently available
for customizing this ECB-window to your needs.


File: ecb.info,  Node: ECB Methods-window,  Next: ECB History-window,  Prev: ECB Sources-window,  Up: Basic ECB-windows

4.1.5 The ECB Methods-window
----------------------------

The "ECB-Methods" ECB-window contains all parsed and recognized tags of
the current source-buffer.  It is called "Method-buffer" because ECB is
mostly designed for browsing sourcecode files and for
programming-languages these tags are often methods (and variables etc.)
To simplify explanations we talk in the following only about methods and
variables - but in general the method-buffer can contain any kind of
tags (e.g.  sections and subsections for texinfo buffers).

Per default the content of the methods-ECB-window is automatically
synchronized and updated with current point of the current source-buffer
in the edit-area (*note ECB-window synchronizing::).  This and other
important informations about usage of the powerful Methods-window of ECB
can be found in *note The Methods window::.

4.1.5.1 Usage of the methods ECB-window
.......................................

   * When a node (e.g.  method or variable) is selected with the primary
     mouse button (*note Using the mouse::) or RETURN (*note Using the
     keyboard::) the buffer in the edit-window (which one depends on the
     setting in 'ecb-mouse-click-destination') will jump to the
     method/variable.

     IMPORTANT: If you use the POWER-click (i.e.  hold down the
     SHIFT-key while clicking with the primary mouse button (*note Using
     the mouse::) or RETURN (*note Using the keyboard::)) on a node in
     this buffer then the edit-buffer will be narrowed to the selected
     tag (see also option 'ecb-tag-visit-post-actions').  But this works
     only for sources parsed by semantic, not by imenu or etags!

   * Clicking on a node with the secondary mouse button or C-RETURN
     (*note Usage of ECB::) will jump to the method in another edit
     window - which one depends on the setting in
     'ecb-mouse-click-destination'.

   * Right clicking on a node will open a popup menu where different
     operation on the item under the mouse cursor can be performed.  The
     popup-menu offers commands for filtering the displayed tree-nodes,
     hiding/narrowing the related tags in the source-buffer and
     expanding/collapsing one/all tree-nodes according to a certain
     expansion-level.

4.1.5.2 Activating/Displaying the methods ECB-window
....................................................

Either use one of the predefined layouts which contain the methods
ECB-window (*note Changing the ECB-layout::) (e.g.  via 'C-c . l c') or
create a new ecb-layout via the command 'ecb-create-new-layout' and add
a buffer of type "methods" into this new layout (*note Creating a new
ECB-layout::).

4.1.5.3 Customizing the methods ECB-window
..........................................

See *note ecb-methods:: for a list of all options currently available
for customizing this ECB-window to your needs.


File: ecb.info,  Node: ECB History-window,  Prev: ECB Methods-window,  Up: Basic ECB-windows

4.1.6 The ECB History-window
----------------------------

ECB offers a ECB-windows for displaying a history of currently open or
recently closed source-buffers, regardless of the directory the related
file belongs to.

Contrary to the ECB-sources-window the ECB-History-window can be flat
but needn't.  Another difference to the ECB-sources window is that the
History displays not filenames but buffer-names for buffers which are
either directly related to a file or which are indirect-buffers with a
base-buffer which is related to a file.  For a description of the
indirect-buffer concept see the Emacs manual (see command
'clone-indirect-buffer' or 'make-indirect-buffer' for XEmacs).

*Please note*: The History of ECB is not meant to be a full replacement
for the Buffers-menu of (X)Emacs!  It only displays buffers which are
related to a file (either directly or via indirect-buffer).  All
non-file-related buffers (e.g.  *Help*, *grep* etc.)  will never be
displayed in the ECB-History-window!

4.1.6.1 Usage of the ECB-History-window
.......................................

   * Buffers in the history can be selected by clicking with the primary
     mouse button (*note Using the mouse::) or hitting RETURN (*note
     Using the keyboard::) on the buffername-node in the
     "ECB-History"-window.  The buffer of the selected buffer-name will
     be displayed in an edit-window - which one depends on the setting
     in 'ecb-mouse-click-destination'.

     IMPORTANT: If you use the POWER-click (i.e.  hold down the
     SHIFT-key while clicking with the primary mouse button (*note Using
     the mouse::) or RETURN (*note Using the keyboard::)) on a node in
     the ECB-History-window then the related buffer will not be
     displayed in an edit-window but it will be scanned in the
     background and all its contents (e.g.  methods and variables) are
     listed in the "ECB Methods"-window (*note ECB Methods-window::.  So
     you can get an overlook over the buffer-contents without changing
     the buffer in the edit-window.

   * Clicking on a buffername-node with the secondary mouse button or
     C-RETURN (*note Usage of ECB::) will open the buffer in another
     edit window - which one depends on the setting in
     'ecb-mouse-click-destination'.

   * Right clicking on a buffername-node (mouse-button 3) will open a
     popup menu where different operation on the item under the mouse
     cursor can be performed.  This popup-menu offers operations for
     version-control, dired, grep, filtering the buffernames and some
     file-operations like deleting the related file from disk.  In
     addition the ECB-History-window can be maximized or the bucketizing
     type (s.b.  "Bucketizing the history") can be changed on the fly
     via popup-menu.

4.1.6.2 Activating/Displaying the ECB-History-window
....................................................

Either use one of the predefined layouts which contain the
ECB-History-window (*note Changing the ECB-layout::) (e.g.  via 'C-c . l
c') or create a new ecb-layout via the command 'ecb-create-new-layout'
and add a buffer of type "history" into this new layout (*note Creating
a new ECB-layout::).

4.1.6.3 Dead buffers in the history
...................................

You can customize if ECB should remove the related buffername-node from
the history-window after killing a buffer.  This is done with the option
'ecb-kill-buffer-clears-history'.  See the documentation of this option
for the possible choices.  If you decide that ECB should *not* remove
the related buffername-node then this is named a "dead" buffer in the
history-window.  It is displayed with a special face (see
'ecb-history-dead-buffer-face'), default is a kind of grey.

You can use such a dead-buffer-node in the history as all other
buffername-nodes: ECB will reopen the related file in a buffer and
perform the action you have choosen (see above section "Usage of the
ECB-History-window").

4.1.6.4 Indirect buffers in the history
.......................................

You can work with indirect buffers as well with direct buffers.  See the
(X)Emacs manual for an introduction for indirect buffers (e.g.  see the
command 'clone-indirect-buffer' for GNU Emacs).

Indirect buffers are displayed with the face
'ecb-history-indirect-buffer-face', default is an italic outline.

There is an option 'ecb-history-stick-indirect-buffers-to-basebuffer'
which allows to customize how ECB displays indirect buffers in the
history-window:

If this option is 'nil' then indirect-buffers are treated as
non-indirect-buffers and sorted into the history-buffer-sequence
according to the setting of 'ecb-history-sort-method'.  Then the history
contains something like this:

     <base-buffer BB>
     <indirect-buffer 1 of BB>
     <indirect-buffer 2 of BB>
     <indirect-buffer 3 of BB>

If not nil then indirect-buffers are always sticked to their
base-buffer, ie.  the base-buffer is displayed as expandable node with
all its indirect-buffers as children-nodes, so the history contains
something like:

     [-] <base-buffer BB>
      |  <indirect-buffer 1 of BB>
      |  <indirect-buffer 2 of BB>
      `- <indirect-buffer 3 of BB>

Here the buffer with name "<base-buffer BB>" has three indirect-buffers
which are display as childrens of their base-buffer.

4.1.6.5 Bucketizing the history
...............................

ECB can display the history-contents "flat" or it can display buckets to
bucketize the contens according to certain criterias.  This is done with
the option 'ecb-history-make-buckets'.  It allows bucketizing according
to the directory, the file-extension, the major-mode or a list of
regular expression - see the documentation of this option for details.

Here is an example for a history-window bucketized according to the
major-mode of the related buffers:

     [-] [c++-mode]
      |  headerfile-1.h
      |  headerfile-2.h
      |  codefile-1.cc
      `- codefile-2.cc
     [-] [emacs-lisp-mode]
      |  elisp-buffer-1.el
      |  elisp-buffer-1.el
      `- elisp-buffer-1.el
     [-] [makefile-mode]
      `- Makefile
     [-] [java-mode]
      |  java-buffer-1.java
      `- java-buffer-2.java

*Please note*: If 'ecb-history-make-buckets' is nil then this is
interpreted as an empty list of regular-expressions and the history is
display with exactly one bucket.  Use the value 'never if you want the?
contents of the history-window to be displayed "flat"!

You can change the bucketizing type on the fly via the popup-menu of the
history-window.

4.1.6.6 Customizing the ECB-History-window
..........................................

See *note ecb-history:: for a list of all options currently available
for customizing this ECB-windows to your needs.


File: ecb.info,  Node: Add-on ECB-windows,  Prev: Basic ECB-windows,  Up: ECB-windows

4.2 Add-on ECB-windows of ECB
=============================

This chapter gives detailled informations about available add-on
ECB-windows.  This includes basic desciptions what they do as well as
how to use them.

* Menu:

* Semantic analyser::           Analyses and displays semantic context
* Symboldefinition::            Displays definition of current symbol


File: ecb.info,  Node: Semantic analyser,  Next: Symboldefinition,  Prev: Add-on ECB-windows,  Up: Add-on ECB-windows

4.2.1 Displaying the current semantic context via analyser
----------------------------------------------------------

The CEDET-suite contains the "semantic analyzer"(1) which is a library
tool that performs context analysis and can derive useful information.

Please see the related node in the info-manual of cedet/semantic for
more detailed informations about this tool and how to setup it for best
performance for your project needs.

The semantic-analyzer output can be used through a special ECB-window.
This interface lists details about the analysis, such as the current
function, local arguments and variables, details on the prefix (the
symbol the cursor is on), and a list of all possible completions (see
'semantic-analyze-possible-completions' for more details about
completions available via the semantic-analyser).

The analyser-ECB-window is of type tree-buffer.  See *note Tree-buffer
basics:: for basic informations how to use such a tree-buffer.

4.2.1.1 Usage of the analyser-ECB-window
........................................

   * When a node-name in the "Context"-bucket is selected with the
     primary mouse button (*note Using the mouse::) or RETURN (*note
     Using the keyboard::) the buffer in the edit-window (which one
     depends on the setting in 'ecb-mouse-click-destination') will jump
     to the related entry.  For strongly typed languages, this means you
     will jump to the definition of the variable, slot, or type
     definition.

   * Clicking on a node-name in the "Context"-bucket with the secondary
     mouse button or C-RETURN (*note Usage of ECB::) will jump to the
     related entry in another edit window - which one depends on the
     setting in 'ecb-mouse-click-destination'.

   * If you click on a node-name in the "Completions"-bucket, then the
     text that was recently analyzed will be replaced with the name of
     the tag that was clicked on in the analyser-ECB-window.

   * Right clicking with the mouse (or with the keyboard, see *note
     Using popup-menus::) onto a tree-node opens a popup-menu which
     allows to display additional (if available) informations to the
     current node.

4.2.1.2 Synchronizing the analyse-window
........................................

Per default the content of the analyser-ECB-window is automatically
synchronized and updated with current point of the current source-buffer
in the edit-area (see 'ecb-analyse-buffer-sync' and most notably
'ecb-analyse-buffer-sync-delay') and *note ECB-window synchronizing::).

In contrary to the sync-options of the basic ECB-windows(2) the default
synchronisation delay of the ECB-analyse-window is quite high: 2 seconds
(see 'ecb-analyse-buffer-sync').

What is the reason for this: a small value like 0.25 as for the basic
windows would make the analyse-window quite unusable because then more
or less after each type (depends on how fast you are typing) the analyse
window would be synchronized with current point, which can be really
annoying when there would be hundreds of completions for the current
point.

Imagine the following scenario: programming in emacs-lisp, typing
     (e
and then you make a short break, just a moment, but immediately ECB
would call the semantic-analyzer to analyse the current context for
possible completions (a.o.).  You can imagine that there are even
thousands of possible function completions in emacs-lisp which beginns
with "e".  Getting all these and displaying them in the analyse-window
can take some time!  Of course the whole stuff is interruptable by any
key-press so ECB will not be blocked but nevertheless the will be a
noticeable break in your typing.

Therefore it is strongly recommended to choose one of the following
possibilities:

   * Automatic synchronizing with long delay

     Set 'ecb-analyse-buffer-sync-delay' to a value which is suitable
     for your programing and typing style, default is already to
     seconds.

   * Manually synchronizing on demand

       1. Switch off the automatic synchronizing for the
          ECB-analyse-window by setting the option
          'ecb-analyse-buffer-sync' to nil.  Use always customize for
          this, never setq!
       2. Bind the command 'ecb-analyse-buffer-sync' to a conveniant
          shortcut
       3. Synchronize the analyse-window exactly then when you need the
          context informations for current point (e.g.  possible local
          variables or completions).

          But note that semantic already offers some intellisense
          commands which can help you on demand too!  See the
          documentation of the semantic analyzer.

4.2.1.3 Interactive commands of the analyser-ECB-window
.......................................................

ECB offers the following commands for the analyser-ECB-window:

   - 'ecb-analyse-buffer-sync'
   - 'ecb-goto-window-analyse'
   - 'ecb-maximize-window-analyse'

See *note Interactive ECB commands:: for details about these commands.

4.2.1.4 Activating/Displaying the analyser-ECB-window
.....................................................

Either use one of the predefined layouts "left-analyse" or
"leftright-analyse" (e.g.  via 'C-c . l c') or create a new ecb-layout
via the command 'ecb-create-new-layout' and add a buffer of type "other"
and name "analyse" into this new layout (*note Creating a new
ECB-layout::).

4.2.1.5 Customizing the analyser ECB-window
...........................................

See *note ecb-analyse:: for a list of all options currently available
for customizing this ECB-window to your needs.

   ---------- Footnotes ----------

   (1) Note that ECB uses analyser (with s) whereas semantic uses
analyzer (with z).

   (2) see *note Basic ECB-windows:: and the options
'ecb-basic-buffer-sync' and 'ecb-basic-buffer-sync-delay'.


File: ecb.info,  Node: Symboldefinition,  Prev: Semantic analyser,  Up: Add-on ECB-windows

4.2.2 Displaying the definition of the current symbol under point
-----------------------------------------------------------------


File: ecb.info,  Node: Activation and Deactivation,  Next: Usage of ECB,  Prev: ECB-windows,  Up: Top

5 Activation and Deactivation
*****************************

This chapter describes all aspects of activating and deactivating ECB.

* Menu:

* Standard activation::         How to manually (de)activate ECB
* Automatic activation::        Automatically (de)activating ECB

*IMPORTANT*: Regardless of the activation-type (standard or automatic)
the activation-process of ECB is always completely failure-save.  This
means any error during any step of the activation-process forces a
complete cleanup (e.g.  removing hooks, disabling advices etc.)  of all
settings ECB did (e.g.  adding hooks, activating advices etc.)  until
the failure.  Therefore if ECB-activation stops cause of a failure then
you can be sure that your Emacs has the same state as before the
ECB-activation-start!


File: ecb.info,  Node: Standard activation,  Next: Automatic activation,  Prev: Activation and Deactivation,  Up: Activation and Deactivation

5.1 Standard activation and deactivation
========================================

Call 'M-x ecb-activate' and 'M-x ecb-deactivate' to activate or
deactivate ECB(1). If you want ECB started in a new frame see the option
'ecb-new-ecb-frame' (default is nil).  'ecb-activate' always raises and
selects the ECB-frame even if ECB is already started.

Because ECB is a global minor-mode it can also be (de)activated/toggled
by 'M-x ecb-minor-mode'.

The following sequence of hooks is evaluated during activation of ECB:
  1. 'ecb-before-activate-hook'
  2. <All actions for activation but no layout drawing>
  3. 'ecb-activate-before-layout-draw-hook'
  4. 'ecb-redraw-layout-before-hook'
  5. <Drawing the layout>
  6. 'ecb-redraw-layout-after-hook'
  7. 'ecb-activate-hook'

The following sequence of hooks is evaluated during deactivation of ECB:
  1. 'ecb-before-deactivate-hook'
  2. <All actions for deactivation of ECB>
  3. 'ecb-deactivate-hook'

   ---------- Footnotes ----------

   (1) Activation is also possible via the menu "Tools -> Start Code
Browser (ECB)".


File: ecb.info,  Node: Automatic activation,  Prev: Standard activation,  Up: Activation and Deactivation

5.2 Automatic activation and deactivation
=========================================

There are two ways for auto.  (de)activation ECB after Emacs-start and
for different window-configurations.

'ecb-auto-activate'
     This option is for auto.  activating ECB after Emacs-startup.  Set
     this to not nil and ECB will automatically be started after Emacs
     comes up.

'window-manager support'
     The window-manager support of ECB deactivates ECB when going to
     another window-configuration and reactivates ECB when coming back
     to the ECB-window-configuration.  For all details about this see
     *note Window-managers and ECB::.


File: ecb.info,  Node: Usage of ECB,  Next: Customizing,  Prev: Activation and Deactivation,  Up: Top

6 Usage of ECB
**************

This chapter describes in a detailed manner all aspects of using the
Emacs Code Browser.

* Menu:

* Using the mouse::             Working with the mouse
* Using the keyboard::          Working with the keyboard
* The edit-area::               How to use the edit-area
* Temp- and compile-buffers::   Displaying temp- and compilation-buffers
* The other window::            How the "other window" is determined
* The Methods window::          Using and customizing the Methods-window
* Filtering the tree-buffers::  Applying filters to the ECB-tree-buffers
* The ECB-layout::              Changing, customizing, redrawing, creating
* Hiding the ECB windows::      Hiding/Showing the ECB-windows
* Maximizing the ECB windows::  Maximizing the ECB-windows
* Back/forward navigation::     Back- and forward navigation like a browser
* ECB-window synchronizing::    Auto./manual synchronizing the ECB-windows
* Stealthy background tasks::   Stealthy background-tasks of ECB
* Interactive ECB commands::    All interactive user-commands of ECB


File: ecb.info,  Node: Using the mouse,  Next: Using the keyboard,  Prev: Usage of ECB,  Up: Usage of ECB

6.1 Working with the mouse in the ECB-windows
=============================================

Normally you get best usage if you use ECB with a mouse.  ECB
distinguishes between a "primary" and a "secondary" mouse-button.

With the option 'ecb-primary-secondary-mouse-buttons' the following
combinations of primary and secondary mouse-buttons are possible:

   - primary: mouse-2, secondary: C-mouse-2(1).  This is the default.

   - primary: mouse-1, secondary: C-mouse-1

   - primary: mouse-1, secondary: mouse-2

If you change this during ECB is activated you must deactivate and
activate ECB again to take effect.

6.1.1 The primary mouse-button
------------------------------

A click with the primary button causes the main effect in each
ECB-buffer:

   - ECB Directories: Expanding/collapsing nodes and displaying files in
     the ECB-Sources buffer.

   - ECB sources/history: Opening the file in that edit-window specified
     by the option 'ecb-mouse-click-destination'.

   - ECB Methods: Jumping to the method in that edit-window specified by
     the option 'ecb-mouse-click-destination'.

6.1.2 The POWER- or SHIFT-click
-------------------------------

A click with the primary mouse-button while the SHIFT-key is pressed is
called the POWER-click and does the following (depending on the
ECB-buffer where the POWER-click occurs):

   - ECB Directory: Refreshing the directory-contents-cache (see
     'ecb-cache-directory-contents').

   - ECB sources/history: Only displaying the source-contents in the
     method-buffer but not displaying the source-file in an edit-window.
     This means it opens the clicked source only in the background and
     shows all its methods/variables in ECB-Methods; the buffer of the
     edit-window is not changed!  This is very useful to get only an
     overlook for a certain source.

   - ECB Methods: Narrowing to the clicked method/variable/ect...  (see
     'ecb-tag-visit-post-actions').  But this works only for sources
     parsed by semantic, not by imenu or etags!

Per default the complete node-name of an item in a tree-buffer is
displayed in the echo-area if the mouse moves over it, regardless if the
related window is the active one or not.  You get the same effect always
after a POWER-click.  In general: For each tree-buffer there is an
option 'ecb-*-show-node-info' (replace "*" with directories, sources,
methods, history or analyse, e.g.  'ecb-directories-show-node-info' is
the option for the ECB-directories-window.): you can specify in a
detailed manner for the named ECB tree-buffer when and which node-info
should be displayed in the minibuffer.

6.1.3 The secondary mouse-button
--------------------------------

The secondary mouse-button is for opening (jumping to) the file in
another edit-window (see the documentation of the option
'ecb-mouse-click-destination').

6.1.4 The right mouse-button
----------------------------

In each ECB-buffer mouse-3 (= right button) opens a special context
popup-menu for the clicked item where you can choose several senseful
actions.

With the options 'ecb-directories-menu-user-extension',
'ecb-sources-menu-user-extension', 'ecb-methods-menu-user-extension' and
'ecb-history-menu-user-extension' you can add statically new commands to
the popup-menus.  See the docstring of
'ecb-directories-menu-user-extension' for more details.

With the options 'ecb-directories-menu-user-extension-function',
'ecb-sources-menu-user-extension-function',
'ecb-methods-menu-user-extension-function' and
'ecb-history-menu-user-extension-function' you can add new commands to
the popup-menus in a dynamic manner.  See the docstring of
'ecb-directories-menu-user-extension-function' for more details.

With the options 'ecb-directories-menu-sorter',
'ecb-sources-menu-sorter', 'ecb-methods-menu-sorter' and
'ecb-history-menu-sorter' you can even re-arrange all the entries of the
popup-menus.

6.1.5 Horizontal scrolling with the mouse
-----------------------------------------

In each tree-buffer of ECB you can easily scroll left and right with the
mouse if the option 'ecb-tree-easy-hor-scroll' is not 'nil'.

The reason for this is: XEmacs has horizontal scroll-bars so invisible
parts beyond the right window-border of a tree-buffer can always made
visible very easy.

GNU Emacs does not have hor.  scroll-bars so especially with the mouse
it is quite impossible to scroll smoothly right and left.  The functions
'scroll-left' and 'scroll-right' can be annoying and are also not bound
to mouse-buttons.

ECB offers three ways for smoothly hor.  scrolling with GNU Emacs if
'ecb-tree-easy-hor-scroll' is a positive integer-value S:

   * In all ECB-tree-buffers the keys 'M-mouse-1' and 'M-mouse-3' are
     bound to scrolling left rsp.  right with scroll-step S.

   * Clicking with mouse-1 or mouse-2 onto the edge of the modeline has
     the same effect, i.e.  if you click with mouse-1 onto the left
     \(resp right) edge of the modeline you will scroll left \(resp.
     right) with scroll-step S.

   * Additionally 'C-M-mouse-1' and 'C-M-mouse-3' are bound to scrolling
     left rsp.  right with scroll-step 'window-width' - 2.

This is NOT done for XEmacs cause of its horizontal scrollbars.  If you
want scrolling left and right with the mouse in XEmacs then activate the
horizontal scrollbars.

   ---------- Footnotes ----------

   (1) means mouse-2 while CTRL-key is pressed.


File: ecb.info,  Node: Using the keyboard,  Next: The edit-area,  Prev: Using the mouse,  Up: Usage of ECB

6.2 Working with the keyboard in the ECB-windows
================================================

ECB offers the 'ecb-mode-map' which binds the most important functions
of ECB to keys so you can easily use ECB in every window(1) without a
mouse.

IMPORTANT: Do not modify 'ecb-mode-map' directly!  The option
'ecb-key-map' defines all ECB keybindings, including a common prefix-key
(This is by default 'C-c .').  If there are conflicts with other
minor-modes or packages you can define very easy another prefix.  Please
read carefully the description of 'ecb-key-map' (*note ecb-general::).!

The following sections describe special topics about using the keyboard
in the ECB-tree-buffers:

* Menu:

* Navigation/Selection::        Keyboard navigation/selection in a tree-buffer
* Incremental search::          Find nodes as fast as possible
* Personal tree-keybindings::   Adding personal keybindings to a tree-buffer
* Using popup-menus::           Using the popup-menus from keyboard.

   ---------- Footnotes ----------

   (1) Regardless if a tree-window or an edit-window


File: ecb.info,  Node: Navigation/Selection,  Next: Incremental search,  Prev: Using the keyboard,  Up: Using the keyboard

6.2.1 Navigation and Selection in a tree-buffer
-----------------------------------------------

In the ECB-buffers RETURN and TAB are the most important keys:

   * RETURN does the same as the primary button and C-RETURN does the
     same as the secondary button.  S-RETURN is the same as the
     SHIFT-click or POWER-click.  The terms "primary", "secondary",
     "SHIFT-" and "POWER-click" are explained in *note Using the
     mouse::.  See also the option
     'ecb-tree-do-not-leave-window-after-select' and the function
     'ecb-toggle-do-not-leave-window-after-select' which is bound to
     'C-t' in each tree-buffer of ECB!

     For all RETURN (and S-RETURN and C-RETURN) hits the position of the
     point within the current node-line is irrelevant!  This is for
     conveniance.

   * TAB always expands or collapses expandable nodes.

The RETURN and TAB keys can not be (re)defined with 'ecb-key-map'!

If you set 'ecb-tree-navigation-by-arrow' to not nil then the arrow keys
work in the ECB tree-window in the following smart way:

   * Left-arrow: If node is expanded then it will be collapsed otherwise
     (i.e.  current node is either not expandable or not expanded) point
     jumps to the next "higher" node in the hierarchical tree (higher
     means the next higher level or - if no higher level available - the
     next higher node on the same level).

   * Right-arrow: If node is expandable but not expanded then it will be
     expanded.  Otherwise (i.e.  current node is either not expandable
     or already expanded) point jumps to the next following node (which
     is the first subnode in case of an already expanded node or simply
     the next node in the following line).

   * Up- and down-arrow: Point jumps to the first character of the
     previous (up) rsp.  next node (down).  "First" character means
     either the first character of the expand-symbol (in case
     'ecb-tree-expand-symbol-before' is not nil) or of the displayed
     node-name.  Or with other words: The first non-indentation and
     non-guide-line (see 'ecb-tree-buffer-style') character of a node
     (*note Tree-buffer styles::).


File: ecb.info,  Node: Incremental search,  Next: Personal tree-keybindings,  Prev: Navigation/Selection,  Up: Using the keyboard

6.2.2 Incremental search for a node in current tree-buffer
----------------------------------------------------------

Each display-able key (e.g.  all keys normally bound to
'self-insert-command') is appended to the current search-pattern.  The
tree-buffer tries to jump to the first node which matching the current
search-pattern either as substring or as prefix (see below).  If no
match is found then nothing is done.  There are some special keys:

   * 'backspace' and 'delete': Delete the last character from the
     search-pattern.

   * 'home': Delete the complete search-pattern

   * 'end': Expand either to a complete node if current search-pattern
     is already unique or expands to the greatest common substring or
     prefix of the nodes.  If there are at least two nodes with the same
     greatest common-prefix than every hit of 'end' jumps to the next
     node with this common prefix.

For better overlooking the current search-pattern is shown in the echo
area.  After selecting a node with RET the search-pattern is cleared
out.  With 'ecb-tree-incremental-search' you can specify if the current
search-pattern must be a real prefix of the node (default) or if any
substring is matched.

For faster and easier finding the right node in a ecb-window the
incremental search ignores the following non interesting stuff:

   - any leading spaces
   - expand/collapse-buttons: [+] rsp.  [-]
   - protection-signs (+, -, #) in the method-window if uml-notation is
     used
   - variables types or return-types in front of variable- or
     method-names.
   - const specifier for variables

This means: Just type in the prefix (rsp.  a substring) of a class-,
variable-, method-, directory- or filename and ECB will bring you as
fast as possible to the node you want.  Incremental node-search uses the
value of 'case-fold-search'.

Tip: The 'ecb-minor-mode' offers you in the 'ecb-mode-map' (customizable
via 'ecb-key-map') some keys for selecting every window of the
ecb-frame.  This makes window-selection a childﾴs play.  For example you
can jump into the method-window by hitting 'C-c . gm'.


File: ecb.info,  Node: Personal tree-keybindings,  Next: Using popup-menus,  Prev: Incremental search,  Up: Using the keyboard

6.2.3 Adding personal keybindings for the tree-buffers
------------------------------------------------------

There are five hooks which can be used for adding personal keybindings
to the ECB tree-buffers:

   - 'ecb-common-tree-buffer-after-create-hook'
   - 'ecb-directories-buffer-after-create-hook'
   - 'ecb-sources-buffer-after-create-hook'
   - 'ecb-methods-buffer-after-create-hook'
   - 'ecb-history-buffer-after-create-hook'

These hooks are called directly after tree-buffer creation so they can
be used to add personal local keybindings(1) either to all tree-buffers
('ecb-common-tree-buffer-after-create-hook') or just to a certain
tree-buffer.  Here is a list which keys MUST NOT be rebound:

   * 'RET' and all combinations with 'Shift' and 'Ctrl': Used for
     selecting nodes in all tree-buffers.
   * 'TAB': Used for expanding/collapsing nodes in all tree-buffers.
   * 'C-t': Used for toggling "do not leave window after selection" in
     all tree-buffers, see command
     'ecb-toggle-do-not-leave-window-after-select'.
   * All self-inserting characters: Used for easy and fast navigation in
     all tree-buffers, *Note Incremental search::.
   * 'F2', 'F3', 'F4': Used for customizing ECB, adding source-path in
     the directories buffer.

The following example binds 'C-a' to some useful code in ALL
tree-buffers and 'C-d' to even more useful code ONLY in the directories
buffer:

     (add-hook 'ecb-common-tree-buffer-after-create-hook
               (lambda ()
                  (local-set-key (kbd "C-a")
                                 (lambda ()
                                    (interactive)
                                    (message "ECB is great!")))))

     (add-hook 'ecb-directories-buffer-after-create-hook
               (lambda ()
                  (local-set-key (kbd "C-d")
                                 (lambda ()
                                    (interactive)
                                    (message "ECB is wonderful!")))))

   ---------- Footnotes ----------

   (1) To be more general: They can be used to run any arbitrary lisp
code after a tree-buffer creation!


File: ecb.info,  Node: Using popup-menus,  Prev: Personal tree-keybindings,  Up: Using the keyboard

6.2.4 Using the popup-menu of a tree-buffer from keyboard.
----------------------------------------------------------

A popup-menu of a tree-buffer can be activated from keyboard with the
command 'tree-buffer-show-menu-keyboard' which is bound to 'M-m' in
every tree-buffer.  How the popup-menu is displayed depends if this
command is called with a prefix-argument or not:

If called without a prefix-arg then the popup-menu is displayed
graphically as if it would be activated via mouse (for GNU Emacs this
works perfectly but for XEmacs there is a bug which results in a wrong
menu-position - but the menu itself works also with XEmacs).

If called with a prefix-arg ('C-u M-m') then the popup-menu is displayed
with the tmm-mechanism (like the Emacs-[menu-bar] is displayed when
'tmm-menubar' is called).  This tmm-display is only available for GNU
Emacs.


File: ecb.info,  Node: The edit-area,  Next: Temp- and compile-buffers,  Prev: Using the keyboard,  Up: Usage of ECB

6.3 Working with the edit-window(s) of the edit-area
====================================================

ECB offers you all what you need to work with the edit-area as if the
edit-windows of the edit-area would be the only windows of the
ECB-frame.

ECB advices the following user-commands so they work best with ECB:

   - 'balance-windows'
   - 'delete-other-windows'
   - 'delete-window'
   - 'delete-windows-on'
   - 'display-buffer'
   - 'shrink-window-if-larger-than-buffer'
   - 'split-window'
   - 'split-window-horizontally'
   - 'split-window-vertically'
   - 'switch-to-buffer'
   - 'switch-to-buffer-other-window'
   - 'other-window'
   - 'other-window-for-scrolling'

The behavior of the adviced functions is (slightly simplified):

   * All these adviced functions behaves exactly like their
     corresponding original functions but they always act as if the
     edit-window(s) of ECB would be the only window(s) of the ECB-frame.
     So the edit-window(s) of ECB seems to be a normal Emacs-frame to
     the user.  This means that you can split and delete edit-windows
     without any restriction - ECB ensures that neither the special
     ECB-windows nor the compile-window will be damaged.

   * If there is a persistent compile-window (*note Temp- and
     compile-buffers::) then all compilation-buffers in the sense of
     'ecb-compilation-buffer-p' will be displayed in the compile-window.

   * If called in another frame than the ECB-frame these functions
     behave exactly like the not adviced original versions!

*Please note*: All these advices are only enabled when ECB is enabled.

Another interesting option in the context of the edit-window and these
adviced functions is 'ecb-layout-always-operate-in-edit-window'!

6.3.1 Documentation of the adviced window functions
---------------------------------------------------

This section describes for every adviced window function (s.a.)  how it
differs from the original version.  Only the differences are mentioned,
so if you want the full documentation of such a function call
'describe-function' or 'C-h f'.

 -- Command: other-window ARG &optional ALL-FRAMES
     Around-advice 'ecb': The ECB-version of 'other-window'.  Works
     exactly like the original function with the following
     ECB-adjustment: The behavior depends on
     'ecb-other-window-behavior'.

 -- Command: delete-window &optional WINDOW
     Around-advice 'ecb': The ECB-version of 'delete-window'.  Works
     exactly like the original function with the following
     ECB-adjustment:

     If optional argument WINDOW is nil (i.e.  probably called
     interactively): If called in a splitted edit-window then it works
     like as if all the edit-windows would be the only windows in the
     frame.  This means the current edit-window which contains the point
     will be destroyed and its place will be occupied from another one.
     If called in an unsplitted edit-window then nothing is done.  If
     called in the compile-window of ECB then the compile-window will be
     hidden (like with 'ecb-toggle-compile-window').  If called in an
     ecb-window of the current ECB-layout there are two alternatives:

        * If the function is contained in
          'ecb-layout-always-operate-in-edit-window' the right
          edit-window is selected (depends on the value of the option
          'ecb-mouse-click-destination') and does then itﾴs job.

        * Otherwise the behavior depends on the value of the option
          'ecb-advice-window-functions-signal-error'.

     If optional argument WINDOW is a living window (i.e.  called from
     program): If WINDOW is an edit-window then this window is deleted,
     if WINDOW is the compile-window then it will be hidden and
     otherwise the behavior depends on
     'ecb-advice-window-functions-signal-error'.

 -- Command: delete-other-windows &optional WINDOW
     Around-advice 'ecb': The ECB-version of 'delete-other-windows'.
     Works exactly like the original function with the following
     ECB-adjustment:

     If optional argument WINDOW is nil (i.e.  probably called
     interactively): If called in a splitted edit-window then it works
     like as if all the edit-windows would be the only windows in the
     frame.  This means all other edit-windows besides the current
     edit-window which contains the point will be destroyed and the
     current edit-window fills the whole edit-area.  Neither the special
     ecb-windows nor the compile-window will be destroyed!

        * If called in an unsplitted edit-window then either the
          compile-window will be hidden (if there is one) otherwise
          nothing is done.

        * If called in one of the ecb-windows then the current one is
          maximized, i.e.  the other ecb-windows (not the edit-windows!)
          are deleted.

        * If called in the compile window there are two alternatives:

             - If the function is contained in
               'ecb-layout-always-operate-in-edit-window' the right
               edit-window is selected (depends on the value of the
               option 'ecb-mouse-click-destination') and then it does
               itﾴs job.

             - Otherwise the behavior depends on the value of the option
               'ecb-advice-window-functions-signal-error'.

     If optional argument WINDOW is a living window (i.e.  called from
     program): If WINDOW is an edit-window then this window is maximized
     (i.e.  the other edit-window is deleted) if there are more at least
     2 edit-windows otherwise the compile-window is deleted (if there is
     one).  If WINDOW is an ecb-window then only the other ecb-windows
     are deleted and in all other cases the behavior depends on
     'ecb-advice-window-functions-signal-error'.

 -- Command: delete-windows-on BUFFER &optional FRAME
     Around-advice 'ecb': The ECB-version of 'delete-windows-on'.  Works
     exactly like the original function with the following
     ECB-adjustment:

     An error is reported if BUFFER is an ECB-tree-buffer.  These
     windows are not allowed to be deleted.

 -- Command: split-window &optional WINDOW SIZE HORFLAG
     Around-advice 'ecb': The ECB-version of 'split-window'.  Works
     exactly like the original function with the following
     ECB-adjustment:

     If called for a not-edit-window in the 'ecb-frame' it stops with an
     error if 'split-window' is not contained in the option
     'ecb-layout-always-operate-in-edit-window'!  Besides this (e.g.
     called for a window in another frame than the 'ecb-frame') it
     behaves like the original version.

 -- Command: split-window-horizontally
     Around-advice 'ecb': The ECB-version of
     'split-window-horizontally'.  Works exactly like the original
     function with the following ECB-adjustment:

     If called in any other window of the current ECB-layout it stops
     with an error if this 'split-window-horizontally' is not contained
     in the option 'ecb-layout-always-operate-in-edit-window'!

 -- Command: split-window-vertically
     Around-advice 'ecb': The ECB-version of 'split-window-vertically'.
     Works exactly like the original function with the following
     ECB-adjustment:

     If called in any other window of the current ECB-layout it stops
     with an error if this 'split-window-vertically' is not contained in
     the option 'ecb-layout-always-operate-in-edit-window'!

 -- Command: display-buffer BUFFER &optional NOT-THIS-WINDOW FRAME
     Around-advice 'ecb': Makes this function compatible with ECB if
     called in or for the ecb-frame.  It displays all buffers which are
     "compilation-buffers" in the sense of 'ecb-compilation-buffer-p' in
     the compile-window of ECB. If the compile-window is temporally
     hidden then it will be displayed first.

     If there is no compile-window ('ecb-compile-window-height' is nil)
     then it splits the edit-window if unsplitted and displays BUFFER in
     another edit-window but only if 'pop-up-windows' is not nil
     (otherwise the edit-window will not be splitted).

     All buffers which are not "compilation-buffers" in the sense of
     'ecb-compilation-buffer-p' will be displayed in one of the
     edit-area and 'display-buffer' behaves as if the edit-windows would
     be the only windows in the frame.

     If BUFFER is contained in 'special-display-buffer-names' or matches
     'special-display-regexps' then 'special-display-function' will be
     called (if not nil).  But this behavior depends on the value of the
     option 'ecb-ignore-special-display'.  The values of
     'same-window-buffer-names' and 'same-window-regexps' are supported
     as well.

     See the option 'ecb-ignore-display-buffer-function'!

     If called for other frames it works like the original version.

 -- Command: switch-to-buffer BUFFER &optional NORECORD
     Around-advice 'ecb': The ECB-version of 'switch-to-buffer'.  Works
     exactly like the original but with the following enhancements for
     ECB:

     "compilation-buffers" in the sense of 'ecb-compilation-buffer-p'
     will be displayed always in the compile-window of ECB (if
     'ecb-compile-window-height' is not nil) - if the compile-window is
     temporally hidden then it will be displayed first.  If you do not
     want this you have to modify the options
     'ecb-compilation-buffer-names', 'ecb-compilation-major-modes' or
     'ecb-compilation-predicates'.

     If called for non "compilation-buffers" (s.a.)  from outside the
     edit-area of ECB it behaves as if called from an edit-window if
     'switch-to-buffer' is contained in the option
     'ecb-layout-always-operate-in-edit-window'.  Otherwise an error is
     reported.

 -- Command: switch-to-buffer-other-window BUFFER &optional FRAME
     Around-advice 'ecb': The ECB-version of
     'switch-to-buffer-other-window'.  Works exactly like the original
     but with some adaptions for ECB so this function works in a
     "natural" way:

     If called in any special ecb-window of the current ECB-layout then
     it goes always to an edit-window (which one depends on the setting
     in 'ecb-mouse-click-destination') and then goes on as if called
     from this edit-window.

     If a compile-window is used (i.e.  'ecb-compile-window-height' is
     not nil) then "compilation-buffers" in the sense of
     'ecb-compilation-buffer-p' are always displayed in the
     compile-window.  If the compile-window is temporally hidden then it
     will be displayed first.  If no compile-window is used it behaves
     like the original.

     If called from within the compile-window then "compilation-buffers"
     will be displayed still there and all other buffers are displayed
     in one of the edit-windows - if the destination-buffer is already
     displayed in one of the edit-windows then this one is used
     otherwise it behaves like the original.

     If called within an edit-window it behaves like the original
     function except for compilation-buffers (if a compile-window is
     used, see above).

 -- Function: other-window-for-scrolling
     Around-advice 'ecb': This function determines the window which is
     scrolled if any of the "other-window-scrolling-functions" is called
     (e.g.  'scroll-other-window'):

     If the option 'ecb-scroll-other-window-scrolls-compile-window' is
     not nil (maybe set by
     'ecb-toggle-scroll-other-window-scrolls-compile') and a
     compile-window is visible then always the current buffer in the
     compile-window is scrolled!

     Otherwise it depends completely on the setting in
     'ecb-other-window-behavior'.

 -- Command: balance-windows
     Around-advice 'ecb': When called in the 'ecb-frame' then only the
     edit-windows are balanced.


File: ecb.info,  Node: Temp- and compile-buffers,  Next: The other window,  Prev: The edit-area,  Up: Usage of ECB

6.4 Temp- and compile-buffers display in ECB
============================================

If you call any help in Emacs, e.g.  by calling 'describe-function', or
if you do a completion in the minibuffer, then Emacs displays the
result-buffer in another window.  This behavior you have also in ECB.

6.4.1 Standard Emacs behavior
-----------------------------

6.4.1.1 Gnu Emacs 21.x, 22.x and XEmacs 21.4:
.............................................

If the edit-area is already splitted into at least two edit-windows then
the temp-buffer is displayed in another edit-window otherwise the
edit-area will be splitted first vertically into two edit-windows, one
above the other.  The variables 'temp-buffer-max-height' and
'temp-buffer-resize-mode' (for GNU Emacs) and
'temp-buffer-shrink-to-fit' (for XEmacs) work also correctly with ECB.

Same for all completion-buffer and "compile"-like output-buffers (e.g.
after a 'compile' or 'grep') and the variable
'compilation-window-height'(1).

6.4.1.2 Gnu Emacs 23.x
......................

Gnu Emacs 23 has a much smarter window-manager for displaying temporary
buffers (like help-buffers) and "compile"-buffers (like real compilation
outputs but also grep-outputs, completions etc.).  Therefore ECB uses
completely the logic of Emacs 23 and does exactly what Emacs 23 would do
without activated ECB: This means mainly that the split-behavior depends
on the settings of the options 'split-width-threshold' and
'split-height-threshold'.

*Please note*: If you are wondering why displaying temporary-buffers
(like help, compile, grep, completion etc.)  shows different behavior
compared to deactivated ECB, then you probably have to adjust the values
of the options 'split-width-threshold' and 'split-height-threshold' to
the sizes of the edit-area of ECB (at least nearly).

This is default behavior of ECB. But there is also another way to
display such buffers: Using a persistent extra window at the bottom of
the ECB-frame, named the "compile-window":

6.4.2 Using a persistent compile window
---------------------------------------

With the option 'ecb-compile-window-height' you can define if the ECB
layout should contain per default a compile-window at the bottom (just
specify the number of lines which should be used for the compile-window
at the bottom of the frame).  If "yes" ECB displays all buffers for
which the function 'ecb-compilation-buffer-p' returns not nil (e.g.  all
output of compilation-mode (compile, grep etc.)  or all temp-buffers
like *Help*-buffers) in this special window.

In general: With the options 'ecb-compilation-buffer-names',
'ecb-compilation-major-modes' and 'ecb-compilation-predicates' you can
define which buffers should be displayed in the compile-window of ECB
(for example if you call 'switch-to-buffer' or 'display-buffer' or if
you run 'compile' or if you display *Help*-buffers).  Per default these
are all temp-buffers like *Help*-buffers, all compile- and grep buffers,
*Occur*-buffers etc.  See the default values of these options.

With the command 'ecb-toggle-compile-window' (bound to 'C-c . \') you
can toggle the visibility of the compile-window (*note Interactive ECB
commands::).

There are some more useful options and commands related to the
compile-window of ECB (to see all options for the compile-window see the
customization group *note ecb-compilation::):

   * With the option 'ecb-compile-window-temporally-enlarge' you can
     allow Emacs to enlarge temporally the ECB-compile-window in some
     situations.  Please read the comment of this option.  See also the
     description of the command 'ecb-toggle-compile-window-height'.

   * With the option 'ecb-enlarged-compilation-window-max-height' you
     specify how 'ecb-toggle-compile-window-height' should enlarge the
     compile-window.

   * With the command 'ecb-cycle-through-compilation-buffers' (*note
     Interactive ECB commands::) you can cycle through all current open
     compilation-buffers (in the sense of 'ecb-compilation-buffer-p')
     very fast.

ECB offers the same compile-window functionality regardless if the
ECB-window are hidden or not.  The state of the compile-window will be
preserved when toggling the ecb-windows or when maximizing one
ecb-windows!  So you have the advantage of one special window for all
help-, grep or compile-output (see above) also when the ecb-windows are
hidden - a window which will not be deleted if you call
'delete-other-windows' (bound to 'C-x 1') for one of the edit-windows.
In general: All features of the compile-window work with hidden
ecb-windows exactly as when the ecb-windows are visible.

6.4.3 What to do if there are problems with the compile-window
--------------------------------------------------------------

Normally displaying temp- and compilation-buffers (or more general:
displaying buffer for which 'ecb-compilation-buffer-p' is not nil)
should work reliable.  But if there are problems which you can not
handle with the options 'ecb-compilation-buffer-names',
'ecb-compilation-major-modes' or 'ecb-compilation-predicates' then
please go on like follows:

  1. Set the option 'ecb-layout-debug-mode' to not nil.

  2. Reproduce the wrong behavior exactly by repeating all the
     operations which lead to the problem.  If possible then restart
     Emacs before reproducing the problem so you can begin from the
     beginning!

  3. Now send immediately a bug report with 'ecb-submit-problem-report'.

  4. Set 'ecb-layout-debug-mode' back to nil if you do not want further
     debugging output in the *Messages* buffer"

6.4.4 Handling special-display-buffers
--------------------------------------

Emacs offers three options for a special-display-handling of certain
buffers: 'special-display-function', 'special-display-buffer-names' and
'special-display-regexps' (see the Emacs manual for a description of
these options).  ECB offers an option 'ecb-ignore-special-display' for
specification in which situations ECB should take account for the values
of these special-display-options.

Default-behavior of ECB is to ignore these special-display-options when
a persistent compile-window is active (i.e.  'ecb-compile-window-height'
is not nil).  But with 'ecb-ignore-special-display' you can tell ECB,
that either always the special-display-options should be ignored as long
as ECB is active or that they should be never igored regardless if a
persistent compile-window is set or not.  In the latter case using
'display-buffer' or 'pop-to-buffer' takes always account for the values
of these options - like the original behavior of Emacs.

   ---------- Footnotes ----------

   (1) It goes without saying that is is also true for
'grep-window-height' and all other "compile"-modes.


File: ecb.info,  Node: The other window,  Next: The Methods window,  Prev: Temp- and compile-buffers,  Up: Usage of ECB

6.5 How the "other window" is determined by ECB
===============================================

Normally all windows in an Emacs-frame are arranged in a cyclic order
and window-selecting-commands like 'other-window' or
window-scrolling-commands like 'scroll-other-window' choose simply the
next(1) window after the current window as "other window".

6.5.1 "Other window"-basics in ECB
----------------------------------

With a typical window-layout of ECB such a cyclic order of *all* windows
in the ECB-frame does not make sense because it would be not very
intuitive and against that what the user wants to "say" when calling
'other-window' or 'scroll-other-window'.

Therefore ECB divides the whole set of windows of the ECB-frame in
several subsets:

   * The edit-windows of the edit-area
   * The special tree-windows for browsing-tasks
   * The compile-window at the bottom (if there is one)
   * The minibuffer-window of the ECB-frame (if active)

Each of these subsets will be treated as a cyclic ordered subset, i.e.
all windows in each of these subsets are ordered as the function
'walk-windows' would visit the windows when the windows of a subset
would be the only windows of a frame(2).

6.5.2 Builtin "other window" behaviors of ECB
---------------------------------------------

ECB now offers to specify the behavior of commands like 'other-window'
or 'scroll-other-window' within the ECB-frame.  This can be done with
the option 'ecb-other-window-behavior'.  This option offers several
builtin behaviors:

   * All windows of the ECB-frame are considered

     ECB will cycle through all windows of the ECB-frame or scroll
     simply the next window in the ECB-frame, means it behaves like the
     original 'other-window' rsp.  the original
     'other-window-for-scrolling'.

   * Only the windows of the edit-area are considered

     ECB will only cycle through the edit-windows of ECB or only scroll
     another edit-window.  If the selected window is not an edit-window
     then all windows are taken into account.

   * The edit-windows and the compile-window are considered

     Like above but the compile-window will be added to the subset of
     the edit-windows.

   * Behave as smart and intuitive as possible

     This is the default behavior of ECB. ECB tries to choose the
     'other-window'-destination or the "other window" to scroll in a
     smart and intuitive way: If point is in one of the edit-windows and
     if the edit-area is splitted then always the "next" edit-window is
     choosen (whereas the next edit-window of the last edit-window is
     the first edit-window)- if the edit-area is unsplitted then the
     compile-window is used if there is one.  In the context of an
     'other-window'-call the ARG of 'other-window' will be taken into
     account.

     If one of the special ecb-windows is selected then always the
     "next" ecb-window is choosen (whereas the next ecb-window of the
     last ecb-window is the first ecb-window).  In the context of an
     'other-window'-call the ARG of 'other-window' will be taken into
     account.  If there is only one ecb-window then ECB considers also
     the edit-windows.

     If the compile-window is selected then always the last edit-window
     which had the point will be used unless 'other-window' has been
     called with a prefix-argument unequal 1.

Regardless of the different behaviors above ECB handles the situation of
an active minibuffer during a call to 'other-window' or
'scroll-other-window' like follows:

If the minibuffer-window is selected then ECB always chooses the window
'minibuffer-scroll-window' points to (when this variable is set,
otherwise the compile-window or the last selected edit-window is
choosen) when the called command is called to choose the 1.  next window
(always true for scrolling another window or true when 'other-window'
called without prefix-arg or with prefix-arg equal 1).  Otherwise the
window ARG steps away is choosen (in case of 'other-window').

If there is an active minibuffer but the minibuffer-window is not
selected then 'other-window' and 'scroll-other-window' behave like the
original version.

6.5.3 User-defined "other window" behavior
------------------------------------------

In addition to the builtin "other window" behaviors ECB offers a user to
completely define for himself how ECB should choose another window for
scrolling it or selecting it.  This can be done with the option
'ecb-other-window-behavior' too because this option can also have a
function-symbol as value:

Such a function gets seven arguments:
  1. A canonical list of all currently visible windows of the
     'ecb-frame'
  2. A canonical list of all currently visible edit-windows
  3. A canonical list of all currently visible ecb-windows
  4. The window-object of the compile-window if there is any.
  5. The minibuffer-window of the ECB-frame if there is an active
     minibuffer.
  6. The result of the function 'ecb-where-is-point' - see the
     documentation of this function for details.
  7. An integer which indicates how many steps away from the current
     selected window the "other-window" is.  Is nil when this function
     is called in another context than for 'other-window'.

The function has to return a window-object which is then used as "other
window" for the command 'other-window' or for scrolling another window
(e.g.  with 'scroll-other-window').  Such a function has to handle
properly all situation for itself.

Here is an example for such a function:

     (defun ecb-get-other-window-smart (win-list
                                        edit-win-list
                                        ecb-win-list
                                        comp-win
                                        minibuf-win
                                        point-loc
                                        nth-window)
       "Implements the smart-setting of `ecb-other-window-behavior'."
       (if minibuf-win
           ;; if we have an active mini-buffer we delegate this to
           ;; `ecb-get-other-window-minibuf-active'
           (ecb-get-other-window-minibuf-active win-list
                                                edit-win-list
                                                ecb-win-list
                                                comp-win
                                                minibuf-win
                                                point-loc
                                                nth-window)
         ;; here we have no active minibuffer!
         (let ((nth-win (or nth-window 1)))
           (cond ((equal point-loc 'ecb)
                  (ecb-next-listelem ecb-win-list (selected-window) nth-win))
                 ((equal point-loc 'compile)
                  (if (= nth-win 1)
                      (or (and ecb-last-edit-window-with-point
                               (window-live-p ecb-last-edit-window-with-point)
                               ecb-last-edit-window-with-point)
                          (car edit-win-list))
                    (ecb-next-listelem (append edit-win-list
                                               (list (selected-window)))
                                       (selected-window)
                                       nth-win)))
                 (t ;; must be an edit-window
                  (ecb-next-listelem (append edit-win-list
                                             (if (and comp-win
                                                      (= (length edit-win-list)
                                                         1))
                                                 (list comp-win)))
                                     (selected-window)
                                     nth-win))))))

This example implements the builtin smart behavior described above.

   ---------- Footnotes ----------

   (1) 'other-window' allows to select ARG'th different window, i.e.
the window ARG steps away from current window in the cyclic order of the
windows

   (2) 'other-window' uses the same window-ordering as 'walk-windows'


File: ecb.info,  Node: The Methods window,  Next: Filtering the tree-buffers,  Prev: The other window,  Up: Usage of ECB

6.6 Using and customizing the ECB-Methods window
================================================

ECB is mostly designed to display parsing information for files
supported by semantic.  But beginning with version 1.94 it also supports
other parsing engines like imenu and etags, so also files not supported
by semantic but by imenu/etags can be displayed in the Method-buffer of
ECB. Therefore we have to introduce some terminology:

   - "semantic-sources": These are file-types for which a semantic
     grammar is available, so the files are parse-able by semantic.
     These sources are supported best by ECB and most of the following
     options and descriptions are related to these file-types.  Examples
     are programming-sources like C++, C, Java, Emacs-Lisp and
     Texinfo-file and some more.

   - "non-semantic-sources": For these files there is no
     semantic-grammar available so they can not be parsed by semantic.
     Examples are Perl-, LaTeX- and TeX-files.  But for many of these
     files imenu and/or etags parsers exist.  ECB supports now parsing
     and displaying these file-types too and it uses for this some
     speedbar-logic.

This chapter describes how to use and customize the Methods-buffer of
ECB.

* Menu:

* Visiting tags::               Possible actions after visiting a tag
* Expanding::                   Explicit and automatic expanding
* Customizing the display::     How to customize the Methods-buffer display
* Updating Methods-window::     Updating Methods with contents of current buffer
* Updating for ind. buffers::   Updating Methods for indirect buffers
* Jumping to external tags::    Jumping to the definition of external types


File: ecb.info,  Node: Visiting tags,  Next: Expanding,  Prev: The Methods window,  Up: The Methods window

6.6.1 Possible actions after visiting a tag
-------------------------------------------

You visit a tag by clicking with either the primary oder secondary
mouse-button (or by hitting 'RET' or 'C-RET' if using the keyboard) onto
a node in the Methods-tree-buffer of ECB. This simply selects the
"right" edit-window (depends if clicked with the primary or secondary
button, in how many windows the edit-area is splitted and the value of
'ecb-mouse-click-destination') and puts the point onto the first line of
the clicked tag.

But you can define if after this "basic" tag-visit-action more
additional actions should be performed by ECB. You can either use some
of the predefined actions (e.g.  highlighting the header-line of the
tag) or define own actions.  You can set different actions for different
major-modes.  All this is done via the option
'ecb-tag-visit-post-actions'.

The following actions are currently predefined:
   - 'ecb-tag-visit-highlight-tag-header'
   - 'ecb-tag-visit-smart-tag-start'
   - 'ecb-tag-visit-recenter'
   - 'ecb-tag-visit-recenter-top'
   - 'ecb-tag-visit-goto-doc-start'
   - 'ecb-tag-visit-narrow-tag'

See the documentation of these function for details what they do.

Per default ECB performs the actions 'ecb-tag-visit-smart-tag-start' and
'ecb-tag-visit-highlight-tag-header' for all major-modes.


File: ecb.info,  Node: Expanding,  Next: Customizing the display,  Prev: Visiting tags,  Up: The Methods window

6.6.2 Explicit and automatic expanding of the ECB-methods-buffer
----------------------------------------------------------------

6.6.2.1 Explicit expanding all nodes to a certain expansion level
.................................................................

With the command 'ecb-expand-methods-nodes' (bound to 'C-c . x') you can
get a fast overlook of the contents of the source-buffer, because this
command allows precisely expanding all tags with a certain
indentation-level.  So you can either expand no tags (or with other
words collapse all tags) or expand all tags so see the contents of a
buffer at one glance.  Or you can expand exactly that tags of a certain
indentation level.

Which node-types are expanded (rsp.  collapsed) by this command depends
for semantic-sources on the options 'ecb-methods-nodes-expand-spec' and
'ecb-methods-nodes-collapse-spec'!  For non-semantic-sources always all
node-types are expanded/collapsed, i.e.  the two options above takes no
effect for these files.

6.6.2.2 Explicit expanding of the current node to a certain level
.................................................................

With the popup-menu of the methods-buffer an even more precise expansion
is possible because it allows not only expanding all tags (see above)
but offers in addition expanding only the current-node (for which the
menu was activated) to an exact level of expansion:

All menu-entries are label with an expansion-"level" whereas level
specifies precisely which level of nodes should be expanded.  level
means the indentation-level of the NODE itself and its (recursive)
subnodes relative to the NODE itself.

So a level value X means that all (sub)nodes with an indentation-level
<= X relative to NODE are expanded and all other are collapsed.

Examples:

   - Expand this node to level 0: Expand only the NODE itself because it
     is the only node which has indentation 0 to itself.  All deeper
     indented nodes will be collapsed.  This is also the important
     difference between using this menu compared to clicking onto the
     expand-symbol of the node: The latter one expands the NODE to that
     expansion-state it has before the last collapsing (so when deeper
     nodes has been expanded they will be expanded now to).  The former
     one expands exactly(!)  to level 0, means expand only the node
     itself and collapse all(!)  its subnodes recursively(!).

   - Expand this node to level 1: Expand the NODE itself and all of its
     direct subnodes - because only the direct subnodes of NODE have
     indentation-level 1 relativ to NODE. All deeper nodes will be
     collapsed.

   - Collapse this node completely: Collapses the current node
     recursively, means collapse not only the node itself but also its
     subnodes, the subnodes of the subnodes and so on!  This is very
     differnt from clicking onto the collapse symbol because this action
     only collapses the node itself but preserves the expansion-state of
     all its subnodes!

Expanding the current node with the popup-menu ignores the settings in
the options 'ecb-methods-nodes-expand-spec' and
'ecb-methods-nodes-collapse-spec'!

6.6.2.3 Automatic expansion ot tags after buffer-parsing
........................................................

With the option 'ecb-show-tags' you tell ECB how to display tags of a
certain tag-class (*note Customizing the display::).  Among other things
you can tell ECB that a certain tag-class should be combined under an
expanded or collapsed bucket-node.  But such a setting defines the
expansion-state of such a bucket-node only direct afterwards the buffer
has been (re)parsed, which can occur after opening a file, after autom.
reparsing the buffer via semantic or after manually rebuilding the
methods-buffer of ECB.

The tag-class 'type' (classes, interfaces, enumerations etc.)  is
divided into several subtypes by semantic.  The subtypes are strings
which names exactly if the tag with tag-class 'type' is a class, an
interface, an enumeration, a typedef etc.  With the option
'ecb-type-tag-expansion' you can tell ECB if these type-tags should be
autom.  expanded after (reparsing) a buffer (see above) or if they
should be displayed collapsed - so all its members (methods, variables
etc.)  are hidden.

6.6.2.4 Automatic expanding the ECB-methods-buffer for current tag
..................................................................

If the option 'ecb-highlight-tag-with-point' is switched on, then always
that node in the method-buffer is highlighted which belongs to the
current semantic-tag under point in the current active edit-window.  But
if this node is invisible (probably because its parent node is
collapsed) then no node is highlighted if the auto.  expanding feature
is switched off.

You can either switch on this feature with the option
'ecb-auto-expand-tag-tree' or even easier with the command
'ecb-toggle-auto-expand-tag-tree'.

There is another option 'ecb-expand-methods-switch-off-auto-expand'
which makes both explicit and auto.  expanding best working together.
See the documentation of this option to get the details.

The autom.  expanding feature is only available for semantic-sources!

Previous versions of ECB have always fully expanded the whole tree in
the Methods-buffer if the current tag in the source-buffer was not
visible in the current tree - e.g.  because the variables-bucket was
collapsed or the containing type of a tag (e.g.  the class of a method)
was collapsed.  So in most cases much more was expanded as needed to
make the current tag visible.

The mechanism of ECB 2.22 and higher only expands the needed parts of
the tree-buffer to make the related node visible: First we try to
highlight the current tag with current expansion-state of the
Methods-buffer.  If the node is not visible so the tag can not be
highlighted then we go upstairs the ladder of type-tags the current tag
belongs to (e.g.  we expand successive the nodes of the whole
class-hierachy of the current method-tag until the related node becomes
visible).  If there is no containing type for the current tag then the
node of the tag is probably contained in a toplevel-bucket which is
currently collapsed; in this case we expand only this bucket-node and
try highlighting again.  Only if this has still no success then we
expand the full tree-buffer and try to highlight the current tag.

There is another option 'ecb-auto-expand-tag-tree-collapse-other': If
this option is set then auto.  expanding the tag-tree collapses all not
related nodes.  This means that all nodes which have no relevance for
the currently highlighted node will be collapsed, because they are not
necessary to make the highlighted node visible.  This feature is
switched off by default because if always collapses the complete
Methods-tree before the following highlighting of the node for the
current tag expands the needed parts of the tree-buffer.


File: ecb.info,  Node: Customizing the display,  Next: Updating Methods-window,  Prev: Expanding,  Up: The Methods window

6.6.3 Customizing the display of the Methods-buffer
---------------------------------------------------

The ECB-Methods buffer is probably the most important browsing window
offered by ECB. It displays all parsing informations of the current
source-buffer (the buffer displayed in the current active edit-window).

Normally ECB gets all informations displayed in this Methods-buffer from
the semantic-library - at least for semantic-sources.  This library
parses auto.  the current source-buffer in the edit-window of ECB and
returns all information in form of "tags" to ECB which displays them in
a browse-able form in its Method-buffer.  See *note ECB Methods-window::
for information how to use the Methods-buffer.

There are several options to customize which tags ECB should display in
general, if the tags should be collapsed or expanded, how to fontify
them (i.e.  syntax-highlighting) and something more.

'ecb-show-tags'
     With the option 'ecb-show-tags' you specify how ECB should display
     the tags returned by the semantic parser.  Semantic divides its
     tags in several so called "tag classes".  A tag-class is always a
     symbol and can be for example 'type' (tags which represent a
     class(1), a interface, an enumeration etc.), 'function' (tags which
     represent function or methods), 'variable' (variables and
     attributes), 'include' (import-statements) etc.  There is no
     predefined superset of allowed tag-class-symbols because each
     language-parser can define its own tag-classes.  But to get an
     overview of the most common tag-classes see the default value of
     the option 'ecb-show-tags'.

     With the option 'ecb-show-tags' you can now specify how ECB should
     display tags of a certain tag-class in a certain major-mode.  You
     can tell ECB that all tags of a tag-class 'X' should be displayed
     in an expanded bucket and all tags of a tag-class 'Y' should be
     displayed in a collapsed bucket and all tags of a tag-class 'Z'
     should be displayed flattened (means not contained in a
     expandable/collapsable bucket-node).  These settings can be made
     separately for each major-mode but you can also define a
     default-display which takes effect when for a major-mode no special
     setting can be found in 'ecb-show-tags'.

     For every tag-class you can tell ECB how the tags should be sorted.

'ecb-font-lock-tags'
'ecb-type-tag-display'
     How to fontify the tags in the Method-buffer

'ecb-tag-display-function'
     ECB and semantic offer several predefined functions for displaying
     the tags.  Here you can customize, what informations tags should
     contain (only the method-name or the whole signature or something
     else) and what notation should be used, e.g.  UML or not.

These are the most important options for this topic but it is
recommended to have a look into the customize-group 'ecb-methods' (*note
ecb-methods::) and check all the options offered there!

All these options are only relevant for semantic-sources and take no
effect for non-semantic-sources!

XXXXX

   ---------- Footnotes ----------

   (1) Do not confuse the term "class" in the context of a tag, which
means the class of the tag and which is a semantic-term and a "class" in
the context of an object oriented language like Java or C++!  Normally
the surrounding context sould be sufficient to understand which type of
"class" is meant whenever the term "class" is used in this manual.


File: ecb.info,  Node: Updating Methods-window,  Next: Updating for ind. buffers,  Prev: Customizing the display,  Up: The Methods window

6.6.4 Updating the Methods-window with contents of current source-buffer
------------------------------------------------------------------------

First a preliminary remark: Do not confuse this chapter with that
synchronizing described in *note ECB-window synchronizing::.  The latter
one describes the mechanism for synchronizing the ECB-windows when the
current-buffer in the edit-area has been changed.  This chapter
describes how to update the ECB-methods-window with the contents of the
current-buffer if the buffer has been modified!

6.6.4.1 The short version
.........................

In almost all cases there is *NO* need to manually rebuild the
method-buffer, because it is always done automatically if necessary; the
mechanism depends on the sources:

   - semantic-sources: The command 'global-semantic-idle-scheduler-mode'
     switches on autom.  reparsing of semantic-sources.  All the rest
     will be done by semantic and ECB automatically.  ECB and semantic
     always try to reparse and update as less as possible of the
     sourcecode-buffer.

   - non-semantic-sources (imenu supported): You can switch on autom.
     rescanning/reparsing with the option 'imenu-auto-rescan'.  But
     nevertheless you have to manually rebuild the Method-buffer (with
     the autom.  updated imenu-tags) via the command
     'ecb-rebuild-methods-buffer' (bound to 'C-c . r').

   - non-semantic-sources (etags supported): For these sources there is
     no built-in auto-rescan mechanism, because etags is an external
     tool it can only operate on the saved file-contents.  So rescanning
     the buffer contents would need to save the buffer before.
     Therefore there is no built-in auto-rescan mechanism because this
     would always result in saving the buffer and running an external
     tool.  But of course you can program such a an etags-auto-rescan
     mechanism for yourself!

6.6.4.2 The full and long story
...............................

Generally ECB calls semantic to get the list of tags for current
source-file of current edit-window.  Per default ECB does never
automatically force a reparse of the source-file after this has been
changed - this is only done on demand by calling the command
'ecb-rebuild-methods-buffer'.  So per default the idle-scheduler of
semantic is responsible for reparsing the source-file when this is
necessary (see 'semantic-idle-scheduler-mode' for further details).  So
this scheduler is also responsible when updating/sychronizing the
methods-window with current buffer-contents.  This is the most
user-resonsible and therefore the recommended approach.

ECB is responsible to update the methods-window after the idle scheduler
of semantic has triggered either a full or partial reparse of the
source-buffer.  Semantic always tries to reparse as less tags of the
buffer as possible, often just the edited section (if it has no
sideeffect to tags outside the edited parts).  ECB handles this partial
reparse output smoothly and updates only these nodes which are releated
to the reparsed tags.

The main effect a user will notice is that edit actions which trigger
just a partial reparse will just update the related node in the
methods-window and not the whole methods-window.  One of the main
advantages is that this preserves the expand/collapse state of the
methods-window.

Editing examples which trigger only a partial reparse:
   * editing a function- or method-body
   * changing the name of a variable or function/method
   * modifying the return-type of a function/method
   * and some other...

In these cases only the related node in the methods-window will change
nothing else, ie.  the expand/collapse-states of all other nodes in the
methods-window will not be changed.

*Summary*: It's strongly recommended to enable
'semantic-idle-scheduler-mode' or 'global-semantic-idle-scheduler-mode'
(*note Setting up CEDET/semantic::) because then reparsing is always
done during idle-time of Emacs and - maybe even more important - it is
also interruptable.

But if this idle-scheduler is switched off then ECB offers now two
possibilities (via
'ecb-force-reparse-when-semantic-idle-scheduler-off'):

   * 
     Not forcing itself a reparse when tags are needed by ECB: then a
     user declines knowingly Emacs/semantic-driven parsing of code when
     he/she switches off the idle-mode of semantic.  This is the default
     behavior of ECB and the default value of this option.  But this has
     also the consequence that the methods-buffer is only filed on
     demand via 'ecb-rebuild-methods-buffer' (bound to <C-c . r>)!

     This means also in consequence that the methods-buffer is not
     automatically filled when a source-file is opened but first on
     demand after calling the command 'ecb-rebuild-methods-buffer'!

   * 
     Forcing a reparse when tags are needed: Then ECB forces semantic to
     parse the source-file when ECB needs tags to display.  For this
     behavior this option has to be set to not nil.

The term "forcing a reparse by semantic" is a simplification: ECB uses
then the function 'semantic-fetch-tags' which can decide that the cached
tags are up-to-date so no real reparsing is necessary - but it can also
run a full reparse and this reparse is not being done when Emacs is idle
but immediatelly and not interruptable (as with the idle-scheduler of
semantic), which can be quite annoying with big source-files.

To make a long story short: It is strongly recommended to enable the
'semantic-idle-scheduler-mode' or 'global-semantic-idle-scheduler-mode'!
See *note Setting up CEDET/semantic::.  This will give you in all cases
the behavior you would expect of an IDE like ECB/semantic.


File: ecb.info,  Node: Updating for ind. buffers,  Next: Jumping to external tags,  Prev: Updating Methods-window,  Up: The Methods window

6.6.5 Updating Methods for indirect buffers
-------------------------------------------

ECB works out of the box with indirect buffers, especially with indirect
buffer clones created with the command 'clone-indirect-buffer' (only
available with GNU Emacs >= 21).  They will be handled as all other
buffers and you can work with them with no difference to "normal"
buffers.  With one exception:

*Please note*: Cause of a bug in Emacs 22 (and maybe also in Emacs 23)
the propagation of parsing informations from one buffer to all others
which are in an indirect-buffer relation to the same base-buffer does
currently not work.

What does this mean: If you modify a buffer then Emacs propagates this
change to all buffers with the same base-buffer.  ECB/semantic recognize
this change and do all necessary to automatically reparse the changed
buffer (at least if you have customized semantic/ECB to do this).  So
far so good, but: If you switch to another buffer with the same
base-buffer then you will notice that the methods-window of ECB still
displays the contents before the change, ie.  the need for a reparse has
not been propagated to these other buffers.  This is a bug in Emacs.

What can you do: As long as this bug is not fixed there is no chance
that all other affected "indirect-related" buffers will be reparsed
automatically after modifying one of them.  So you have to do this
reparse "by hand" after switching to such an indirect-related buffer,
but this is very simple: Just call the command
'ecb-rebuild-methods-buffer' with prefix arg or hit <C-u C-c . r> (key
this command is bound to).

Lets make an example:

  1. 
     Suppose we have a sourcefile test.java loaded as a buffer into
     Emacs and suppose further we have created two indirect-buffer
     clones test-clone1.java and test-clone2.java - all of these buffers
     point to the same file: test.java.

  2. 
     Now lets be the buffer test-clone1.java the current buffer and let
     us modify it (e.g.  adding a new method).  If you have enabled the
     idle-reparse mechanism of semantic (*note Setting up
     CEDET/semantic::) then this buffer will be reparsed automatically
     and ECBs methods-window will be updated in turn too.

  3. 
     So far so good.  But if you now switch to one of the two other
     buffers, lets say to test.java, then you will notice that the
     change done in test-clone1.java is also visible in the buffer
     test.java but the ECB-methods-window for test.java will display the
     contents before the change.  This is cause of the Emacs-bug
     described above.

  4. 
     To update the methods-window for test.java to the new contents you
     have to call 'ecb-rebuild-methods-buffer' with prefix argument (ie.
     clear-cache is true) or hitting <C-u C-c . r>.  Note: Calling this
     command without prefix argument is not enough!


File: ecb.info,  Node: Jumping to external tags,  Prev: Updating for ind. buffers,  Up: The Methods window

6.6.6 Jumping to the definition of external types
-------------------------------------------------

There are two common types of "external" tags displayed in the
method-window, mostly with object oriented programing-languages:

  1. parent-types

     Tags which represent the type of a parent-class (which can be
     defined in the same file but which is more often defined in another
     file).  All parents (regardless if defined internaly or externaly)
     of a type will be displayed under a bucket "[Parents]" in the
     methods-window of ECB.

  2. "virtual" types

     In OO-languages like CLOS, eieio and C++ there can be nodes with
     type-tags in the method-buffer which are somehow virtual because
     there is no definition in the current source-file.  But such a
     virtual type collects all its outside defined members like methods
     in C++ which are defined in the '*.cc' file whereas the
     class-definition is defined in the associated header-file.

In both cases the user wants to jump to the definition of the type if he
clicks onto the related node in the methods-window of ECB.

Here is a C++-example for "virtual" types (2) and parent types (1) which
explains this in detail:

Let's say this class is defined in a file 'ParentClass.h':

     class ParentClass
     {
     protected:
       int p;
     };

Let's say this class is defined in a file 'ClassWithExternals.h'

     #include "ParentClass.h"

     class ClassWithExternals : public ParentClass
     {
     private:
       int i;

     public:
       ClassWithExternals();
       ~ClassWithExternals();
     };

Both the constructor and the destructor of the class
"ClassWithExternals" are implemented in a file 'ClassWithExternals.cc':

     #include "test.h"

     ClassWithExternals::ClassWithExternals(int i,
                                            boolean b,
                                            char c)
     {
       return;
     }

     void
     ClassWithExternals::~ClassWithExternals()
     {
       return;
     }

ECB displays the contents of 'ClassWithExternals.cc' in its
methods-buffer like follows:

     [-] [Includes]
      `- test.h
     [-] ClassWithExternals
      |  +ClassWithExternals (+i:int, +b:class boolean, +c:char):ClassWithExternals
      `- +~ClassWithExternals ():void

Both the constructor and the destructor of the class
"ClassWithExternals" are grouped under their class-type.  But this
class-type "ClassWithExternals" is represented by a so called "virtual"
or "faux" node-tag, i.e.  there is no real tag in the current
source-buffer for this tag.

If a user now clicks onto the node of "ClassWithExternals" then he wants
to jump to the right location in the right file where
"ClassWithExternals" is defined.  ECB now uses now some smart mechanisms
(see below) to do this.  In case of success (means ECB has found the
definition) it opens the right file and point will stay at beginning of
the definition of the type "ClassWithExternals".

The contents of 'ClassWithExternals.h' are then displayed like follows:

     [-] [Includes]
      `- ParentClass.h
     [-] ClassWithExternals:class
      |  [-] [Parents]
      |   `- ParentClass
      |  [-] [Variables]
      |   `- -i:int
      |  +ClassWithExternals ():ClassWithExternals
      |  +~ClassWithExternals ():void
      `- [+] [Misc]

Now let's play it again: Now we want to go to the definition of the
parent-type "ParentClass" when we click onto the related node under the
bucket "[Parents]".  Again ECB uses its smartness to jump to the
definition of the class "ParentClass" when you click onto the node
"ParentClass".

Now lets explain the precondition which must be fulfilled so ECB can do
its job:

   * Customizing the semantic analyzer for your needs

     ECB itself is quite stupid concerning finding external tags.  But
     it can use the semantic-analyzer of the CEDET-suite (remember: The
     CEDET-suite is a must-requirement of ECB, see *note
     Requirements::).  But this in turn means that the semantic-analyzer
     must be customized in the right way for the needs of your
     programing projects.  Mainly this means activating semanticdb and
     setting the correct include-path etc...

     *Please note*: Read the related manuals of semantic and - strongly
     recommended - read in addition the article "Gentle introduction to
     Cedet".  It's worth to read it!  The website of CEDET contains a
     link, you find it here:
     <http://xtalk.msk.su/~ott/en/writings/emacs-devenv/EmacsCedet.html>

   * Customize the related options of ECB:

     There is exactly one option you have to take into account:
     'ecb-find-external-tag-functions'.  This defines the method ECB
     uses to find these external tags.

     Mostly there is nothing to do because the default values should do
     a good job.  But if things are running bad then maybe this is the
     right screw for you.

     Finding such external types can be very complex and there are
     several roads to success.  ECB uses per default methods based on
     the semantic-analyzer.  But this option allows to define own
     find-functions and tell ECB to uses them.

     This functionality is set on a major-mode base, i.e.  for every
     major-mode a different setting can be used.  ECB first performs all
     find-functions defined for current major-mode (if any) anf then all
     find-functions defined for the special symbol 'default (if any).

     ECB offers some predefined senseful finding-functions.  Currently
     there are:

        - 'ecb-search-type-tag-by-semantic-analyzer': The most powerfil
          one, based on the semantic-analyzer
        - 'ecb-search-type-tag-by-semanticdb': A backup for the first
          one
        - 'ecb-jde-show-class-source': For major-mode 'jde-mode' when
          coding in java, uses java-mechanisms - maybe for java the best
          choice.

     See the documentation of the option and also of these function for
     details how they work and how to write own finding-functions.


File: ecb.info,  Node: Filtering the tree-buffers,  Next: The ECB-layout,  Prev: The Methods window,  Up: Usage of ECB

6.7 Applying filters to the special ECB-tree-buffers
====================================================

To get a fast and good overlook of the contents of a tree-buffer ECB
offers a filter-mechanism for the Directories-, Sources-, the History-
and the Methods-buffer.

* Menu:

* Filtering Directories::       Applying filters to the Directories-buffer
* Filtering Sources::           Applying filters to the Sources-buffer
* Filtering History::           Applying filters to the History-buffer
* Filtering Methods::           Applying filters to the Methods-buffer


File: ecb.info,  Node: Filtering Directories,  Next: Filtering Sources,  Prev: Filtering the tree-buffers,  Up: Filtering the tree-buffers

6.7.1 Applying filters to the Directories-buffer
------------------------------------------------

With the option 'ecb-excluded-directories-regexps' certain directories
can be excluded from being displayed in the directories-browser of ECB.
This can be done by defining regular expressions.  If the name of a
directory matches at least one of the regexps of this option the
directory is not displayed in the directories-tree-buffer.

The option 'ecb-sources-exclude-cvsignore' allows to exclude
source-files from the sources-tree-buffer if their name is listed in a
so called '.cvsignore'-file.  This option is a list of regular
expressions and if a directory-name matches at least one of these
regexps then all files listed in the '.cvsignore'-file of this directory
are not displayed in the sources-tree-buffer.


File: ecb.info,  Node: Filtering Sources,  Next: Filtering History,  Prev: Filtering Directories,  Up: Filtering the tree-buffers

6.7.2 Applying filters to the Sources-buffer
--------------------------------------------

6.7.2.1 Interactive Sources-filters
...................................

The command 'ecb-sources-filter' allows to filter these tree-buffer
either by a regular expression or by an extension (e.g.  java, cc, el
for java-, c++- rsp elisp-sources).  This functionality is also
available via the popup-menu of the Sources-tree-buffer.

The currently applied filter is indicated in the modeline of the related
tree-buffer.  Applying a new filter replaces an eventually already
applied filter.

6.7.2.2 Default Sources-filters
...............................

The option 'ecb-source-file-regexps' allow to specify which source-files
should be displayed and which not.  This is done on a directory-basis,
ie.  for each directory-regexp the files to display can be specified.
See the documentation of this option for all details.

In addition to this option you should also know the option
'ecb-sources-exclude-cvsignore' (*note Filtering Directories::).


File: ecb.info,  Node: Filtering History,  Next: Filtering Methods,  Prev: Filtering Sources,  Up: Filtering the tree-buffers

6.7.3 Applying filters to the History-buffer
--------------------------------------------

6.7.3.1 Interactive History-filters
...................................

The command 'ecb-history-filter' allows to filter these tree-buffer
either by a regular expression or by an extension (e.g.  java, cc, el
for java-, c++- rsp elisp-sources).  This functionality is also
available via the popup-menu of the History-tree-buffer.

The currently applied filter is indicated in the modeline of the related
tree-buffer.  Applying a new filter replaces an eventually already
applied filter.

6.7.3.2 Default History-filters
...............................

The option 'ecb-history-exclude-file-regexps' allows to exclude
source-files from being historized (ie.  displayed in the
History-buffer).  Despite the fact that the History-buffer already
excludes all non-file-buffers there can be still buffers which name you
do not wat to be displayed in the history.  These are file-buffer like
'TAGS' or 'semantic.cache' which store meta-informations used by Emacs
and its tools (etags, semantic etc.).  These files can be excluded via
'ecb-history-exclude-file-regexps'.


File: ecb.info,  Node: Filtering Methods,  Prev: Filtering History,  Up: Filtering the tree-buffers

6.7.4 Applying filters to the Methods-buffer
--------------------------------------------

The commands 'ecb-methods-filter', 'ecb-methods-filter-regexp',
'ecb-methods-filter-protection', 'ecb-methods-filter-tagclass',
'ecb-methods-filter-function', 'ecb-methods-filter-delete-last',
'ecb-methods-filter-nofilter' allows to filter the tags/nodes of the
Methods-buffer by several criterias.  As for the Sources- and the
History-buffer the same functionality is also available via the
popup-menu of the Methods-buffer.

6.7.4.1 Possible filter-criterias
.................................

   * Filter by protection: Just insert the protection you want the
     Methods-buffer being filtered: private, protected or public!  For
     sources not supported by semantic the protection filter will not be
     offered because these informations are not available for such
     sources.

   * Filter by regexp: Insert the filter as regular expression.

   * Filter by tag-class: You can filter by tag-classes.  The popup-menu
     contains mode-dependend tag-filter entries and the command
     'ecb-methods-filter' offers only the tag-classes of the current
     mode.  This means for sources not supported by semantic the
     tag-class filter will not be offered.  And for semantic-supported
     sources exactly these tag-classes are offered the semantic-parser
     for the current major-mode offers.  For example texi-sources can
     only be filtered by the tag-classes "Definitions" and "Sections"
     and java-sources can be filtered by "Methods", "Variables",
     "Classes" etc.  In general the semantic-variable
     'semantic-symbol->name-assoc-list' is used to get the right
     tag-classes.

   * Filter by a filter-function: Such a function gets two arguments: a
     tag and the source-buffer of this tag.  If the tag should be
     displayed (i.e.  not being filtered out) then the function has to
     return not nil otherwise nil.

   * No special filter: This means to display all tags specified with
     the option 'ecb-show-tokens'.  If currently some of the above
     filters are applied they will be all removed.

   * Delete the last added: This removes only the topmost filter-layer,
     means that filter added last.

Be aware that the tag-list specified by the option 'ecb-show-tags' is
the basis of all filters, i.e.  tags which are excluded by that option
will never be shown regardless of the filter type here!

All tags which match the applied filter(s) will be displayed in the
Methods-buffer.  Such a filter is only applied to the current
source-buffer, i.e.  each source-buffer can have its own tag-filters.

These tag-filters can also applied to sources which are not supported by
the semantic-parser but "only" by imenu or etags.  But because for these
sources not all information are avaiable the protection- and tag-class
filter are not offered with such "non-semantic"-sources.  See *note
Non-semantic sources:: for further details about working with
source-files not supported by the semantic-parser.

6.7.4.2 Inverse Filters
.......................

But if 'ecb-methods-filter' is called with a prefix-argument then an
inverse filter is applied to the Methods-buffer, i.e.  all tags which do
*NOT* match the choosen filter will be displayed in the Methods-buffer!

6.7.4.3 Layered filters
.......................

Per default the choosen filter will be applied on top of already
existing filters.  This means that filters applied before are combined
with the new filter.  This behavior can changed via the option
'ecb-methods-filter-replace-existing'.

6.7.4.4 Display of currently applied filters
............................................

The current active filter will be displayed in the modeline of the
Methods-buffer [regexp, prot (= protection), tag-class, function (=
filter-function)].  If an inverse filter has been applied then this is
signalized by a preceding caret ^.  If currently more than 1 filter is
applied then always the top-most filter is displayed in the modeline but
the fact of more than 1 filter is visualized by the number of the
filters - included in parens.  You can see all currently applied filters
by moving the mouse over the filter-string in modeline of the
Methods-buffer: They will displayed as help-echo.

6.7.4.5 Default filters for certain files.
..........................................

The new option 'ecb-default-tag-filter' allow to define default
tag-filters for certain files which are applied automatically after
loading such a file into a buffer.  The possible filters are the same as
offered by the command 'ecb-methods-filter' and they are applied in the
same manner - the only difference is they are applied automatically.
The files can be specified on a combined major-mode- and
filename-regexp-basis.

Usage-example: This can be used to display in outline-mode files (e.g.
'NEWS') only the level-1-headings by defining a filter regexp "^\* .*".


File: ecb.info,  Node: The ECB-layout,  Next: Hiding the ECB windows,  Prev: Filtering the tree-buffers,  Up: Usage of ECB

6.8 Changing, customizing, redrawing and creating layouts
=========================================================

The term "ECB-layout" means in which windows the ECB-frame is divided.
This chapter describes all aspects concerning this layout, especially
changing, customizing, redrawing and also creating new layouts.

* Menu:

* Changing the ECB-layout::     How to change and customize the layout
* Redrawing the ECB-layout::    How and when redrawing the layout
* Changing window sizes::       Changing sizes of the ECB-windows
* Fixing window sizes::         Fixing sizes of the ECB-windows
* Creating a new ECB-layout::   Interactively creating new layouts


File: ecb.info,  Node: Changing the ECB-layout,  Next: Redrawing the ECB-layout,  Prev: The ECB-layout,  Up: The ECB-layout

6.8.1 Changing and customizing the ECB-layout
---------------------------------------------

ECB offers several predefined layouts with different sets and also
different locations of ECB-windows.  See below the "ascii-screenshot" of
all currently built-in layouts(1).

In addition to these predefined layouts you can either interactively
create new layouts "by example" (*note Creating a new ECB-layout::) or
program new layouts with the macro 'ecb-layout-define' (*note The
layout-engine::).  The former method is the recommended one!

There are two ways to interactively change the layout:
   * Changing permanently: Customize the option 'ecb-layout-name' and
     store it for future Emacs sessions.

   * Switching between several layouts at runtime: If you want to switch
     fast between a certain sequence of layouts see the option
     'ecb-toggle-layout-sequence' and the command 'ecb-toggle-layout'
     (*note Simulating speedbar::).  For just selecting another layout
     during current Emacs-session use the command 'ecb-change-layout'.

With the option 'ecb-show-sources-in-directories-buffer' you can define
if sources are displayed in the directory-window of a layout (*note ECB
Directories-window::).

In addition to the general layout you can specify if the layout should
contain a persistent compilation-window at the bottom of the frame, see
'ecb-compile-window-height' (*note Temp- and compile-buffers::).

Maybe you want also change the look&feel of the tree-buffers.  Then you
can change the general style of the tree-buffers with the option
'ecb-tree-buffer-style' and the location of the collapse- and
expand-symbols and the indentation of sub-nodes in a tree.  See
'ecb-tree-indent' and 'ecb-tree-expand-symbol-before'.  More details
about the different tree-buffer-styles are described in *note
Tree-buffer styles::.

Here are all currently available layouts (for creating own new layouts
see *note Creating a new ECB-layout::); just customize the option
'ecb-layout-name' to the related name:

Layout "left1"
          -------------------------------------------------------
          |              |                                      |
          |  Directories |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |--------------|                                      |
          |      |       |                                      |
          | Sour | Hist  |                 Edit                 |
          |      |       |                                      |
          |      |       |                                      |
          |--------------|                                      |
          |              |                                      |
          |  Methods     |                                      |
          |              |                                      |
          |              |                                      |
          -------------------------------------------------------
          |                                                     |
          |                    Compilation                      |
          |                                                     |
          -------------------------------------------------------

Layout "left2"
          -------------------------------------------------------
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |  Directories |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |--------------|                 Edit                 |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |  Sources     |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          -------------------------------------------------------
          |                                                     |
          |                    Compilation                      |
          |                                                     |
          -------------------------------------------------------

Layout "left3"
          -------------------------------------------------------
          |              |                                      |
          |  Directories |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |--------------|                                      |
          |              |                                      |
          |  Sources     |                 Edit                 |
          |              |                                      |
          |              |                                      |
          |--------------|                                      |
          |              |                                      |
          |  Methods     |                                      |
          |              |                                      |
          |              |                                      |
          -------------------------------------------------------
          |                                                     |
          |                    Compilation                      |
          |                                                     |
          -------------------------------------------------------

Layout "left4"
          -------------------------------------------------------
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |  Directories |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |--------------|                 Edit                 |
          |      |       |                                      |
          |      |       |                                      |
          |      |       |                                      |
          | Sour | Hist  |                                      |
          |      |       |                                      |
          |      |       |                                      |
          |      |       |                                      |
          -------------------------------------------------------
          |                                                     |
          |                    Compilation                      |
          |                                                     |
          -------------------------------------------------------

Layout "left5"
          -------------------------------------------------------
          |              |                                      |
          |  Directories |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |--------------|                                      |
          |              |                                      |
          |  Sources     |                 Edit                 |
          |              |                                      |
          |              |                                      |
          |--------------|                                      |
          |              |                                      |
          |  History     |                                      |
          |              |                                      |
          |              |                                      |
          -------------------------------------------------------
          |                                                     |
          |                    Compilation                      |
          |                                                     |
          -------------------------------------------------------

Layout "right1"
          -------------------------------------------------------
          |                                      |              |
          |                                      |  Directories |
          |                                      |              |
          |                                      |              |
          |                                      |--------------|
          |                                      |              |
          |                                      |              |
          |             Edit                     |  Sources     |
          |                                      |              |
          |                                      |              |
          |                                      |--------------|
          |                                      |              |
          |                                      |  Methods     |
          |                                      |              |
          |                                      |              |
          -------------------------------------------------------
          |                                                     |
          |                    Compilation                      |
          |                                                     |
          -------------------------------------------------------

Layout "left6"
          -------------------------------------------------------
          |  Sources     |                                      |
          |--------------|                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |  Methods     |                 Edit                 |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |--------------|                                      |
          |  History     |                                      |
          -------------------------------------------------------
          |                                                     |
          |                    Compilation                      |
          |                                                     |
          -------------------------------------------------------

Layout "top1"
          -------------------------------------------------------
          |                        |             |              |
          |                        |             |              |
          |      Directories       |  Sources    |  Methods     |
          |                        |             |              |
          |                        |             |              |
          |-----------------------------------------------------|
          |                                                     |
          |                                                     |
          |                                                     |
          |                                                     |
          |                    Edit                             |
          |                                                     |
          |                                                     |
          |                                                     |
          |                                                     |
          -------------------------------------------------------
          |                                                     |
          |                    Compilation                      |
          |                                                     |
          -------------------------------------------------------

Layout "left7"
          -------------------------------------------------------
          |              |                                      |
          |  Directories |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |--------------|                 Edit                 |
          |              |                                      |
          |  History     |                                      |
          |              |                                      |
          |--------------|                                      |
          |              |                                      |
          |  Methods     |                                      |
          |              |                                      |
          -------------------------------------------------------
          |                                                     |
          |                    Compilation                      |
          |                                                     |
          -------------------------------------------------------

Layout "left8"
          -------------------------------------------------------
          |              |                                      |
          |  Directories |                                      |
          |              |                                      |
          |--------------|                                      |
          |              |                                      |
          |  Sources     |                                      |
          |              |                                      |
          |--------------|                 Edit                 |
          |              |                                      |
          |  Methods     |                                      |
          |              |                                      |
          |              |                                      |
          |--------------|                                      |
          |  History     |                                      |
          |              |                                      |
          -------------------------------------------------------
          |                                                     |
          |                    Compilation                      |
          |                                                     |
          -------------------------------------------------------

Layout "top2"
          -------------------------------------------------------
          |                                                     |
          |                                                     |
          |                    Methods                          |
          |                                                     |
          |                                                     |
          |-----------------------------------------------------|
          |                                                     |
          |                                                     |
          |                                                     |
          |                                                     |
          |                    Edit                             |
          |                                                     |
          |                                                     |
          |                                                     |
          |                                                     |
          -------------------------------------------------------
          |                                                     |
          |                    Compilation                      |
          |                                                     |
          -------------------------------------------------------

Layout "left9"
          -------------------------------------------------------
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |   Methods    |                 Edit                 |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          -------------------------------------------------------
          |                                                     |
          |                    Compilation                      |
          |                                                     |
          -------------------------------------------------------

Layout "left10"
          -------------------------------------------------------
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |  Methods     |                 Edit                 |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |--------------|                                      |
          |      |       |                                      |
          | Sou  | Hist  |                                      |
          |      |       |                                      |
          -------------------------------------------------------
          |                                                     |
          |                    Compilation                      |
          |                                                     |
          -------------------------------------------------------

Layout "left11"
          -------------------------------------------------------
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |  Methods     |                 Edit                 |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |--------------|                                      |
          |              |                                      |
          |  History     |                                      |
          |              |                                      |
          -------------------------------------------------------
          |                                                     |
          |                    Compilation                      |
          |                                                     |
          -------------------------------------------------------

Layout "left12"
          -------------------------------------------------------
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |   History    |                 Edit                 |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          -------------------------------------------------------
          |                                                     |
          |                    Compilation                      |
          |                                                     |
          -------------------------------------------------------

Layout "left13"
          -------------------------------------------------------
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          | Directories  |                 Edit                 |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          -------------------------------------------------------
          |                                                     |
          |                    Compilation                      |
          |                                                     |
          -------------------------------------------------------

Layout "left14"
          -------------------------------------------------------
          |              |                                      |
          |              |                                      |
          |              |                                      |
          | Directories  |                 Edit                 |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |--------------|                                      |
          |              |                                      |
          |  History     |                                      |
          |              |                                      |
          -------------------------------------------------------
          |                                                     |
          |                    Compilation                      |
          |                                                     |
          -------------------------------------------------------

Layout "left15"
          -------------------------------------------------------
          |              |                                      |
          |  Directories |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |--------------|                 Edit                 |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          |  Methods     |                                      |
          |              |                                      |
          |              |                                      |
          |              |                                      |
          -------------------------------------------------------
          |                                                     |
          |                    Compilation                      |
          |                                                     |
          -------------------------------------------------------

Layout "leftright1"
          -------------------------------------------------------
          |             |                         |             |
          | Directories |                         |  Methods    |
          |             |                         |             |
          |             |                         |             |
          |             |                         |             |
          |             |                         |             |
          |             |                         |             |
          |-------------|          Edit           |             |
          |             |                         |             |
          | Sources     |                         |             |
          |             |                         |             |
          |-------------|                         |             |
          |             |                         |             |
          | History     |                         |             |
          |             |                         |             |
          -------------------------------------------------------
          |                                                     |
          |                   Compilation                       |
          |                                                     |
          -------------------------------------------------------

Layout "leftright2"
          -------------------------------------------------------
          |             |                         |             |
          | Directories |                         |  Methods    |
          |             |                         |             |
          |             |                         |             |
          |             |                         |             |
          |             |                         |             |
          |             |                         |             |
          |             |          Edit           |             |
          |-------------|                         |-------------|
          |             |                         |             |
          | Sources     |                         |  History    |
          |             |                         |             |
          |             |                         |             |
          |             |                         |             |
          |             |                         |             |
          -------------------------------------------------------
          |                                                     |
          |                   Compilation                       |
          |                                                     |
          -------------------------------------------------------

Layout "leftright3"
          -------------------------------------------------------
          |             |                         |             |
          | Directories |                         |  Methods    |
          |             |                         |             |
          |             |                         |             |
          |             |                         |             |
          |             |                         |             |
          |             |                         |             |
          |             |          Edit           |             |
          |             |                         |             |
          |             |                         |             |
          |             |                         |             |
          |             |                         |             |
          |             |                         |             |
          |             |                         |             |
          |             |                         |             |
          -------------------------------------------------------
          |                                                     |
          |                    Compilation                      |
          |                                                     |
          -------------------------------------------------------

Layout "left-dir-plus-speedbar"
          -------------------------------------------------------
          |             |                                       |
          | Directories |                                       |
          |             |                                       |
          |             |                                       |
          |             |                                       |
          |             |                                       |
          |             |                                       |
          |-------------|                                       |
          |             |                                       |
          |             |                                       |
          |             |                                       |
          | Speedbar    |                                       |
          |             |                                       |
          |             |                                       |
          |             |                                       |
          -------------------------------------------------------
          |                                                     |
          |                    Compilation                      |
          |                                                     |
          -------------------------------------------------------

Layout "left-analyse"
          -------------------------------------------------------
          |              |                                      |
          |  Directories |                                      |
          |              |                                      |
          |--------------|                                      |
          |              |                                      |
          |  Sources     |                                      |
          |              |                                      |
          |--------------|                 Edit                 |
          |              |                                      |
          |  Methods     |                                      |
          |              |                                      |
          |--------------|                                      |
          |              |                                      |
          |  Analyse     |                                      |
          |              |                                      |
          -------------------------------------------------------
          |                                                     |
          |                    Compilation                      |
          |                                                     |
          -------------------------------------------------------

Layout "left-symboldef"
          -------------------------------------------------------
          |              |                                      |
          |  Directories |                                      |
          |              |                                      |
          |--------------|                                      |
          |              |                                      |
          |  Sources     |                                      |
          |              |                                      |
          |--------------|                 Edit                 |
          |              |                                      |
          |  Methods     |                                      |
          |              |                                      |
          |--------------|                                      |
          |              |                                      |
          |  Symbol-defs |                                      |
          |              |                                      |
          -------------------------------------------------------
          |                                                     |
          |                    Compilation                      |
          |                                                     |
          -------------------------------------------------------

   ---------- Footnotes ----------

   (1) The command 'ecb-show-layout-help'' shows the outline-picture for
all built-in layouts.


File: ecb.info,  Node: Redrawing the ECB-layout,  Next: Changing window sizes,  Prev: Changing the ECB-layout,  Up: The ECB-layout

6.8.2 Redrawing the ECB-layout
------------------------------

If you have unintentionally destroyed the ECB-layout, you can always
restore the layout with calling 'ecb-redraw-layout'.  This is even true,
if you get messages like "wrong-type-argument window-live-p #<window
222>".

If the variable 'ecb-redraw-layout-quickly' is not nil then the redraw
is done by the 'ecb-redraw-layout-quickly' function, otherwise by
'ecb-redraw-layout-full'.  But it's strongly recommended to use the
quick redraw only if you have really slow machines where a full redraw
takes several seconds because the quick redraw is not really safe and
may have some drawbacks!  On normal machines the full redraw should be
done in << 1s!

Please read the documentation of the command 'ecb-redraw-layout'!

See also the hooks 'ecb-redraw-layout-after-hook' and
'ecb-redraw-layout-before-hook'!


File: ecb.info,  Node: Changing window sizes,  Next: Fixing window sizes,  Prev: Redrawing the ECB-layout,  Up: The ECB-layout

6.8.3 Changing the sizes of the special ECB-windows
---------------------------------------------------

The standard width and height of the special ECB-windows is defined with
the options 'ecb-windows-width' and 'ecb-windows-height'.  But changing
these options always influences all layouts which is not always desired.

ECB offers to re-adjust the width and height of the ECB-windows (e.g.
by dragging the windows-borders via the mouse) and then saving exactly
these current window-sizes for the current layout so after activating
this layout all windows have autom.  the stored sizes.

This is done via the option 'ecb-layout-window-sizes' and the commands
'ecb-store-window-sizes', 'ecb-restore-window-sizes' and
'ecb-restore-default-window-sizes'.

Here is an example how to resize and store the sizes of the ECB-windows
of layout "left1":

  1. Switch to layout "left1" via 'ecb-change-layout' ('C-c . lc')
  2. Resize the ECB-windows by dragging the window-borders with the
     mouse
  3. Call 'ecb-store-window-sizes'

After this layout "left1" will be always drawn with the new sizes until
you call 'ecb-restore-default-window-sizes' during layout "left1" is
active.

*Please note*: 'ecb-store-window-sizes' stores the width and height of
the windows per default as fractions of the width (rsp.  height) of the
ECB-frame, so the stored sizes are always correct regardless of the
current frame-size!  But if called with a prefix argument then fixed
sizes are stored.


File: ecb.info,  Node: Fixing window sizes,  Next: Creating a new ECB-layout,  Prev: Changing window sizes,  Up: The ECB-layout

6.8.4 Fixing the sizes of the special ECB-windows
-------------------------------------------------

GNU Emacs 21 introduced a new feature which can fix the sizes of a
window displaying a certain buffer even after resizing the frame.  This
new feature is driven by the new buffer-local variable
'window-size-fixed'(1).

ECB offers an option 'ecb-fix-window-size' for fixing the sizes of the
special ECB-windows/buffers even after frame-resizing.  The fix type
(valid values are 'nil', 't', 'width' and 'height') can either be set on
a layout-basis (means a different value for each layout) or one value
can be set for all layouts.  In the latter case there is an additional
value 'auto' which choose autom.  the senseful fix-type depending on the
current layout-type: For top-layouts the fix-type 'height' and for all
other layout-types the fix-type 'width'.

Probably the most senseful value is 'auto' for all layouts because it
makes less sense to fix the height of the ecb-windows in a left-, right-
or leftright-layout.  Same for fixing the width in a top-layout.

Note: With Emacs < 22 there seems to be no distinction between 'width',
'height' and 't'.  Therefore this option takes no effect (means all
ecb-windows have always unfixed sizes) with Emacs < 22 if
'ecb-compile-window-height' is not 'nil'.

   ---------- Footnotes ----------

   (1) Currently XEmacs does not support this feature therefore
'ecb-fix-window-size' has no effect with XEmacs


File: ecb.info,  Node: Creating a new ECB-layout,  Prev: Fixing window sizes,  Up: The ECB-layout

6.8.5 Interactively creating new layouts
----------------------------------------

If you want to create your own ECB-layout then you can do this very easy
"by example" with the command 'ecb-create-new-layout'.  This command
creates a new empty frame and offers a small set of keys to create the
new layout by splitting windows.  'ecb-create-new-layout' and this
couple of keys are your guide during the layout-creation-process(1).

After calling 'ecb-create-new-layout' you will be asked which type of
layout you want to create: "left", "right", "top" or "left-right".  Here
you specify where the ECB-tree-windows/buffers should be located in the
ECB-frame:

   - left: All ECB-tree-windows are located on the left side
   - right: All ECB-tree-windows are located on the right side
   - top: All ECB-tree-windows are located on the top side
   - left-right: All ECB-tree-windows are located on the left and right
     side

Depending on the type you choose the window is splitted by the values of
the options 'ecb-windows-width' (types "left", "right" and "left-right")
or 'ecb-windows-height' (type "top").

Afterwards you will see a frame like follows (here the layout-type is
"left-right"):

     -----------------------------------------------------------------
     |<point>       |                                   |            |
     |              | ECB-layout creation mode          |            |
     |              | ========================          |            |
     |              |                                   |            |
     |              | <This is a persistent help-screen>|            |
     |              |                                   |            |
     |              |                                   |            |
     |              |                                   |            |
     |              |                                   |            |
     |              |                                   |            |
     |              |                                   |            |
     |              |                                   |            |
     |              |                                   |            |
     |              |                                   |            |
     |              |                                   |            |
     -----------------------------------------------------------------
                    |
                    |   ,---
                    `---| Splitted by the value of ecb-windows-width.
                        `---

The big window (here the middle window) will be the edit-area of the new
layout and can not be selected, deleted or splitted during the creation
process.  It displays the help-screen for the layout-creation mode.
Here all the available commands are displayed.

The small window(s) (here the left and right windows) can be splitted by
you wherever you want ('C-s').  The left one contains the point.  You
must give every ECB-tree-window you create a type ('C-t') which can be
either

   * One of the built-in types

     This can be either "directories", "sources", "methods", "history"
     or "speedbar".

   * Any user-defined type:

     In this case you insert "other" after hitting 'C-t' and you will
     then be asked for the name of the user-defined type.  You can
     insert any arbitrary type name X. But to get this layout working
     you have to define a function with name 'ecb-set-X-buffer' whereas
     X is the name of the user-defined type you have specified during
     layout-creation.

     This function 'ecb-set-X-buffer' must be defined with the macro
     'defecb-window-dedicator-to-ecb-buffer' and has to switch to the
     buffer you want to display in this window.  This macro
     automatically ensures that this window is dedicated to that buffer.

     Here is an example: Suppose you have inserted as type name
     "example" then you have to define and load a function
     'ecb-set-example-buffer' which could be defined like follows:

          (defecb-window-dedicator-to-ecb-buffer ecb-set-example-buffer " *ECB example-buf*"
            (switch-to-buffer (get-buffer-create " *ECB example-buf*")))

     If you forget to define such a function for the user-defined type
     then nevertheless ECB will draw this layout but it will use the
     default-function 'ecb-set-default-ecb-buffer' instead.

If you are satisfied with your new layout just hit 'C-q'.  You will be
asked for a new layout-name (TAB-completion is offered to get a list of
all names already in use) and after inserting a new(!)  name the new
layout is saved in the file defined by the option
'ecb-create-layout-file'.  The new layout is now available via the
option 'ecb-layout-name'.

There is no need for you to load the file 'ecb-create-layout-file'
manually into your Emacs because it's automatically loaded by ECB!

*Please note*: During the layout-creation process only the commands
displayed in the help-screen are available.  ALL other commands are
temporally disabled (even the mouse-commands).

For programming new layouts with emacs-lisp see *note The
layout-engine::.

With the command 'ecb-delete-new-layout' you can delete previously
created layouts (TAB-completion is offered for all names of user created
layouts).

   ---------- Footnotes ----------

   (1) During the creation process you will be asked in the minibuffer
for several options; here you can use TAB-completion and an "empty" RET
chooses always the first option!


File: ecb.info,  Node: Hiding the ECB windows,  Next: Maximizing the ECB windows,  Prev: The ECB-layout,  Up: Usage of ECB

6.9 Hiding/Showing the ECB windows
==================================

With 'ecb-toggle-ecb-windows', 'ecb-hide-ecb-windows' and
'ecb-show-ecb-windows' you can hide/show all the ECB windows without
changing the activation state of ECB and also without deactivating the
advices for 'delete-other-windows' and/or 'delete-window'.  This is most
useful if you use a layout like "top2" (*note Common use-cases::) or if
you want to have maximum space for editing and you don't need the
browsing windows all the time.

The following sequence of hooks is evaluated during showing again the
hidden ECB-windows:
  1. 'ecb-show-ecb-windows-before-hook'
  2. 'ecb-redraw-layout-before-hook'
  3. <Redrawing the layout to show the hidden ECB-windows>
  4. 'ecb-redraw-layout-after-hook'
  5. 'ecb-show-ecb-windows-after-hook'

The following sequence of hooks is evaluated during hiding the
ECB-windows:
  1. 'ecb-hide-ecb-windows-before-hook'
  2. 'ecb-redraw-layout-before-hook'
  3. <Hiding the ECB-windows>
  4. 'ecb-redraw-layout-after-hook'
  5. 'ecb-hide-ecb-windows-after-hook'

If the special ECB-windows are hidden (e.g.  by
'ecb-toggle-ecb-windows') all adviced functions behave as their
originals.  So the frame can be used as if ECB would not be active but
ECB IS still active in the "background" and all ECB-commands and all
ECB-keybindings can be used.  Of course some of them doesn't make much
sense but nevertheless they can be called.  Toggling the visibility of
the ECB-windows preserves the splitting-state of the edit-area: If you
hide the ECB-windows then the frame will be divided in the same
window-layout the edit-area had before the hiding and if you show the
ECB-windows again the edit-area will be divided into all the
edit-windows the ECB-frame had before the showing.

Therefore it should be enough to hide the ECB-windows to run other
Emacs-applications which have their own window-layout-managing.  There
should be no conflicts.  But nevertheless the most recommended method
for running ECB and other applications (e.g.  xrefactory, Gnus etc.)  in
the same frame is to use a window-manager like winring.el or escreen.el
(*note Window-managers and ECB::).


File: ecb.info,  Node: Maximizing the ECB windows,  Next: Back/forward navigation,  Prev: Hiding the ECB windows,  Up: Usage of ECB

6.10 Maximizing the ECB windows
===============================

6.10.1 How to maximize and minimize special ecb-tree-windows
------------------------------------------------------------

To get a better overlook about the contents of a certain ECB-window
every ECB-window can be "maximized", means all other ECB-windows are
deleted so only the edit-window(s) and this maximized ECB-window are
visible (and maybe a compile-window if active).  There are several ways
to do this:

   * Via the node-popup-menus of the ECB-windows

   * Via the main "ECB"-menu and here "Display window maximized"

   * Via calling the adviced version of 'delete-other-windows'(1) (bound
     to 'C-x 1') in one of the ECB windows.

   * Via one of the commands 'ecb-maximize-window-directories',
     'ecb-maximize-window-sources', 'ecb-maximize-window-methods',
     'ecb-maximize-window-history' or 'ecb-maximize-window-speedbar' or
     the bound short-cuts for those commands.

   * Via the new command 'ecb-cycle-maximized-ecb-buffers' which cycles
     through all ecb-buffers of current layout by maximizing exactly one
     of the ecb-windows after every cycle-step.

   * Via the option 'ecb-maximize-ecb-window-after-selection' and then
     just by selecting an ECB-window.  "Deselecting" an ECB-window
     brings back all ECB-windows of current layout.

   * Via the default modeline-mechanisms for deleting other windows.
     GNU Emacs binds 'mouse-2' in its modeline to 'delete-other-window'.
     XEmacs binds a popup-menu with some window commands to 'button-3'
     in its modeline.

     ECB combines the best of both worlds by supporting both of these
     mechanisms for both Xemacs and Emacs: ECB binds a toggle-command to
     'mouse-2' in the modeline of each tree-buffer which maximizes the
     current tree-window if all ECB-windows are visible and displays all
     ECB-windows if current tree-window is maximized.  In addition ECB
     binds a popup-menu to 'mouse-3' which offers exactly 2 commands:
     Maximizing current tree-window and displaying all ECB-windows.

"Minimizing" such a maximized ECB-window, i.e.  bringing back to its
original size and displays all ecb-windows of current layout, can simply
be done by redrawing the layout via the command 'ecb-redraw-layout'
(bound to 'C-c . lr').

6.10.2 Selecting a node in a maximized ecb-tree-window
------------------------------------------------------

When you select a node (either via mouse or RET) in a maximized
tree-window the default behavior of ECB is the following:

Maximized directories-window: When selecting a directory then first
automatically the maximized directories-window will be "minimized" (i.e.
all ecb-windows of current layout are displayed) if the current layout
contains a sources-buffer and no sources are shown in the
directories-window - see 'ecb-show-sources-in-directories-buffer'.  So
the source-files can be displayed in the sources-window.

Maximized sources- or history-window: When selecting a source-file in
one of these buffers then first automatically the maximized window will
be "minimized" (i.e.  all ecb-windows of current layout are displayed)
if the current layout contains a methods-buffer.  So the tag-contents of
the selected source-file can be displayed in the methods-window.

For a even smarter behavior ECB offers the option
'ecb-maximize-next-after-maximized-select' which automatically maximizes
the next logical tree-window after a node selection.  The definition of
"next logical is": Directories -> sources, sources/history -> methods.
But if the current maximized tree-buffer is also contained in the option
'ecb-tree-do-not-leave-window-after-select' (see also the
tree-buffer-command 'ecb-toggle-do-not-leave-window-after-select' which
is bound to <C-t> in each tree-buffer) then ECB does *not* maximize the
next logical tree-window but point stays in the currently maximized
tree-buffer so for example the user can select more than one source-file
from the sources-buffer.

   ---------- Footnotes ----------

   (1) This command is adviced per default, see *note The edit-area::.


File: ecb.info,  Node: Back/forward navigation,  Next: ECB-window synchronizing,  Prev: Maximizing the ECB windows,  Up: Usage of ECB

6.11 Back- and forward navigation like a browser
================================================

With ECB you can "browse" in your source-files like with a web-browser.
This means ECB stores the current buffer- and window-position relative
to the current tag(1) in the edit-window after

   - selecting a tag in the ECB-methods buffer or
   - selecting a source-file in the ECB-sources/history-buffer.

ECB offers two commands 'ecb-nav-goto-next' ('C-c . n') and
'ecb-nav-goto-previous' ('C-c . p') to go forward and backward within
this navigation history-list.  These commands are also available via the
menu "ECB -> Navigate".

Aside normal "location-browsing" this is useful for example in a
scenario where the buffer is narrowed to a tag (see
'ecb-tag-visit-post-actions'):

  1. You edit a function
  2. Goto another function above the current in the same file
  3. Add a few lines
  4. Call ecb-nav-goto-previous

     Now you will edit at the same place in the function.

   ---------- Footnotes ----------

   (1) e.g.  a method, a variable or any other semantic tag


File: ecb.info,  Node: ECB-window synchronizing,  Next: Stealthy background tasks,  Prev: Back/forward navigation,  Up: Usage of ECB

6.12 Synchronization of the ECB-windows
=======================================

Per default ECB synchronizes automatically the contents of the
ECB-windows (e.g.  tree-buffers) with the current active edit-window
(rsp.  the current buffer of the edit window).

ECB distinguishes between the so called "basic" ECB-windows (for a
general description see *note Basic ECB-windows::) and add-on
ECB-windows (*note Add-on ECB-windows::).  This distinction is also
important concerning synchronization:

The basic ECB-windows are always synchronized together whereas for each
add-on ECB-window a separate synchronization option is offered.

This section describes at beginning some general synchronization aspects
(common for all ECB-windows, basic ones as well as add-ons), then the
synchronization of the basic-ECB-windows and finally the synchronization
of the add-on ECB-windows.

* Menu:

* General synchronization aspects::       General synchronization aspects
* Synchronization of basic ECB-windows::  Synchronization of basic ECB-windows
* Add-on synchronization::                Synchronization of add-on ECB-windows


File: ecb.info,  Node: General synchronization aspects,  Next: Synchronization of basic ECB-windows,  Prev: ECB-window synchronizing,  Up: ECB-window synchronizing

6.12.1 General synchronization aspects
--------------------------------------

For each separate ECB-window-synchronization (remember: One common for
the basic ECB-windows, one for each add-on ECB-window) ECB offers the
following option-triple (demonstrated for the basic ECB-windows):

   * 'ecb-basic-buffer-sync':

     Enables or disables the synchronization in general.

     If active then the synchronization for the related
     ECB-window-buffers/windows takes place whenever a buffer changes in
     an edit window or if another edit-window with another buffer will
     be selected, if deactivated then never.  But you can also set this
     option to a list of major-modes and then the sync.  will only be
     done if the major-mode of the current buffer does NOT belong to
     this list.

     But in every case the synchronization only takes place if the
     major-mode of the current-buffer in the current selected
     edit-window has a relation to files or directories.  Examples for
     the former one are all programming-language-modes like 'c++-mode'
     or 'java-mode', 'Info-mode' too, an example for the latter one is
     'dired-mode'.  For all major-modes related to
     non-file/directory-buffers like 'help-mode', 'customize-mode' and
     others a synchronization will never be done!

     It's recommended to exclude at least 'Info-mode' because it makes
     no sense to synchronize the ECB-windows after calling the Info
     help.  Per default also 'dired-mode' is excluded but it can also
     making sense to synchronize the ECB-directories/sources windows
     with the current directory of the dired-buffer in the edit-window.

   * 'ecb-basic-buffer-sync-delay':

     This option takes only effect if the synchronization is switched on
     via 'ecb-basic-buffer-sync' and determines when ECB synchronizes.

     This option sets the time in seconds (fractions allowed) Emacs must
     be idle before the related ECB-window(s) are synchronized.  If nil
     then there is no delay, means synchronization takes place
     immediately.  A small value of about 0.25 seconds saves CPU
     resources and you get even though almost the same effect as if you
     set no delay.

     Per default ECB always synchronizes on idle-basis and it is
     strongly recommened not to change this (ie.  not setting the
     delay-option to nil) because this can be very performance consuming
     (e.g.  at least the check if a synchronization must be performed is
     done after *every* key- or mouse-button press!

     Some fraction of a second is probably always the best choice,
     because it does not cost cpu-power and nonetheless the
     synchronization takes place quite immediately.  So in most cases
     there is no need to bother with this option, just use the default
     value.

   * 'ecb-basic-buffer-sync-hook':

     For each separate synchronization a hook variable is offered where
     you can hook in with some elisp code if you need some tasks
     performed afterwards the synchronization has been finished.

     In most cases no hook will be needed.

Analogous to the shown options for the basic ECB-windows each add-on
ECB-window has its own separate triple of these options, named congruent
to the name of the buffer-name of the add-on ECB-window (e.g.  for the
analyse ECB-window with the buffer-name hold in
'ecb-analyse-buffer-name' these three options are named
'ecb-analyse-buffer-sync', 'ecb-analyse-buffer-sync-delay' and
'ecb-analyse-buffer-sync-hook'.  For some specialities see *note Add-on
synchronization::.

*Please note*: With the command 'ecb-window-sync' you can do a manual
synchronization if the automatic one is switched off or if you just want
to do this!  See the documantation of this command.


File: ecb.info,  Node: Synchronization of basic ECB-windows,  Next: Add-on synchronization,  Prev: General synchronization aspects,  Up: ECB-window synchronizing

6.12.2 Synchronization of the basic ECB-windows
-----------------------------------------------

This section describes some special aspects of the synchronizing of the
basic ECB-windows:

   * ECB-directories:

     This windows is synchronized to display the directory where the
     source-file which is displayed in the current active edit-window is
     located.  If the source-path (i.e.  an element of the option
     'ecb-source-path') containing this directory is not expanded it
     will be auto.  expanded according to the value of the option
     'ecb-auto-expand-directory-tree' (*note ecb-directories::).

   * ECB-sources:

     The ECB-sources-buffer contains after synchronizing all the sources
     of the directory of the "current" source-file displayed in the
     edit-window.  The entry of the "current" source-file is
     highlighted.

   * ECB-methods:

     Contains after synchronizing all the tags of the buffer in the
     current selected edit-window, i.e.  all methods, variables etc...
     depending on the major-mode.

   * ECB-history:

     Highlights the entry of the buffer displayed in the current active
     edit-window if this buffer is a source-file.

The synchronization can be customized via the option triple
'ecb-basic-buffer-sync', 'ecb-basic-buffer-sync-delay' and
'ecb-basic-buffer-sync-hook'.  The four basic ECB-windows of ECB are
always synchonized together, never separate!


File: ecb.info,  Node: Add-on synchronization,  Prev: Synchronization of basic ECB-windows,  Up: ECB-window synchronizing

6.12.3 Synchronization of add-on ECB-windows
--------------------------------------------

Currently ECB has a separate synchronization for the add-on ECB-windows
ECB-analyse and ECB-symboldef and also for the eshell and
speedbar-integration.  Customizing can be done via:

   * ECB-analyse: 'ecb-analyse-buffer-sync',
     'ecb-analyse-buffer-sync-delay' and 'ecb-analyse-buffer-sync-hook'

   * ECB-symboldef: 'ecb-symboldef-buffer-sync',
     'ecb-symboldef-buffer-sync-delay' and
     'ecb-symboldef-buffer-sync-hook'

   * ECB-eshell: 'ecb-eshell-buffer-sync',
     'ecb-eshell-buffer-sync-delay' and 'ecb-eshell-buffer-sync-hook'

   * ECB-speedbar: 'ecb-speedbar-buffer-sync',
     'ecb-speedbar-buffer-sync-delay' and
     'ecb-speedbar-buffer-sync-hook'

Each enabling- and delay-option has an additonal special value 'basic
which is the default for all these options because it allows to use the
current setting of 'ecb-basic-buffer-sync' rsp.
'ecb-basic-buffer-sync-delay' for the add-on synchronization too.
Example: If 'ecb-basic-buffer-sync' is set to the value '(Info-mode
dired-mode)' then a setting of 'basic for 'ecb-analyse-buffer-sync'
means that synchronization is always done unless the current major-mode
is Info-mode or dired-mode.  Per default all add-on synchronization
enabling- and delay-options are set to 'basic with one exeption:
'ecb-analyse-buffer-sync-delay': See the documentation of this option
for a detailed description.

In general it is recommended to read the documentation of all these
options.


File: ecb.info,  Node: Stealthy background tasks,  Next: Interactive ECB commands,  Prev: ECB-window synchronizing,  Up: Usage of ECB

6.13 Stealthy background-tasks of ECB
=====================================

ECB performs some tasks stealthily in the background and also
interruptable by the user because these tasks can be time-consuming and
could otherwise block ECB. Currently the following tasks are performed
stealthily and in the background by ECB:

Prescann directories for emptyness
     Prescann directories and display them as empty or not-empty in the
     directories-buffer.  See the documentation of the option
     'ecb-prescan-directories-for-emptyness' for a description.

File is read only
     Check if sourcefile-items of the directories- or sources-buffer are
     read-only or not.  See documentation of the option
     'ecb-sources-perform-read-only-check'.

Version-control-state
     Checks the version-control-state of files in directories which are
     managed by a VC-backend.  See the option 'ecb-vc-enable-support'.

All of these tasks (e.g.  checking if a directory is empty or not)
perform a certain action for all directories or sources displayed in the
current visible tree-buffers of ECB. Normally there should be no
annoying delay for the user because each of these tasks will be only
performed when Emacs is idle and will be interrupted immediatelly when a
user hits a key or clicks the mouse but especially for
remote-directories one single action (e.g.  checking if a certain
directory is empty or checking the VC-state of a sourcefile in such a
remote directory) can be very time-consuming and such a single action is
not interruptable (an interrupt can only occur between the
single-actions for two directories or sources) For a further discussion
how to deal best with remote directories see *note Remote
directories::.!

ECB offers for all stealthy tasks three steps of activation:
   * 't': Switch on this feature.

   * 'unless-remote': Switch on this feature but not for remote
     directories.  The term "remote" means here directories which are
     used via tramp, ange-ftp or efs.  So mounted directories are
     counted not as remote directories here even if such a directory is
     maybe hosted on a remote machine.  But normally only directories in
     a LAN are mounted so there should be no performance-problems with
     such mounted directories.

   * 'nil': Switch off this feature completely.

In combination with the option 'ecb-stealthy-tasks-delay' these three
choices already allow adapting the stealthy tasks to most needs.  But to
offer finest granularity for which directories a certain stealthy task
should be switched on and for which not ECB offers for every stealthy
task an additional option which allows a finer adjustment:

   * Prescanning directories for emptyness:
     'ecb-prescan-directories-exclude-regexps'.

   * Checking the read-only-state of a sourcefile:
     'ecb-read-only-check-exclude-regexps'

   * Checking the VC-state of sourcefiles:
     'ecb-vc-directory-exclude-regexps'

These options take only effect when the related task is not completely
switched off.  If this is the case they allow excluding certain
directories (or the sources of directories) from being processed by a
certain stealthy task.


File: ecb.info,  Node: Interactive ECB commands,  Prev: Stealthy background tasks,  Up: Usage of ECB

6.14 Interactive ECB commands
=============================

ECB offers a lot of interactive commands.  Some of these commands prompt
the user in the minibuffer if called with a prefix argument.

Example: If 'ecb-clear-history' is called with a prefix argument then
you will be prompted in the minibuffer with:

     Clear from history: [all, not-existing-buffers, existing-buffers]

You can choose one of the options enclosed in brackets with
TAB-completion; hitting RET direct after the prompt chooses auto.  the
first offered option (in the example above "all").

*Please note*: The following interactive commands of ECB are listed
without the prefix "ecb-" (e.g.  the command 'ecb-activate' is listed
with name "activate").  This has been done for a better readable command
index.  *Note Command Index::.

 -- Command: activate
     Activates ECB and creates the special buffers for the choosen
     layout.  For the layout see 'ecb-layout-name'.  This function
     always raises the ECB-frame if called from another frame.  This is
     the same as calling 'ecb-minor-mode' with a positive argument.

 -- Command: add-all-buffers-to-history
     Add all current file-buffers to the history-buffer of ECB.
     Dependend on the values of 'ecb-history-make-buckets' and
     'ecb-history-sort-method' afterwards the history is bucketized or
     not and sorted either by name or by extension (if bucketized then
     the sorting is only within each bucket).  If
     'ecb-history-sort-method' is nil the most recently used buffers are
     on the top of the history and the seldom used buffers at the bottom
     (again: when bucketized then this holds only within each bucket).

 -- Command: analyse-buffer-sync
     Synchronize the analyse buffer with the current buffer and point.
     This means in fact display the current analysis for current point.

 -- Command: change-layout &optional preselect-type
     Select a layout-name from all current available layouts
     (TAB-completion is offered) and change the layout to the selected
     layout-name.  If optional argument PRESELECT-TYPE is not nil then
     you can preselect a layout-type \(TAB-completion is offered too)
     and then you will be asked only for layouts of that preselected
     type.  Note: This function works by changing the option
     'ecb-layout-name' but only for current Emacs-session.

 -- Command: clear-history
     Clears the history-buffer.

 -- Command: customize
     Open a customize-buffer for all customize-groups of ECB.

 -- Command: customize-most-important
     Open a customize-buffer for the most important options of ECB.

 -- Command: create-new-layout
     Start process for interactively creating a new ECB-layout (*note
     Creating a new ECB-layout::).

 -- Command: cycle-maximized-ecb-buffers
     Cycles through all ecb-buffers of current layout by maximizing
     exactly one of the ecb-windows after every cycle-step.

 -- Command: cycle-through-compilation-buffers &optional choose-buffer
     Cycle through all compilation buffers currently open and display
     them within the compilation window 'ecb-compile-window'.  If the
     currently opened buffer within the compilation window is not a
     compilation buffer, we jump to the first compilation buffer.  If
     not we try to loop through all compilation buffers.  If we hit the
     end we go back to the beginning.

     If CHOOSE-BUFFER is not 'nil' then the user will be prompted for
     the compilation-buffer to switch to.

 -- Command: deactivate
     Deactivates the ECB and kills all ECB buffers and windows.

 -- Command: delete-new-layout
     Select a layout-name for a layout created by
     'ecb-create-new-layout' and delete this layout.  This means the
     layout-definition is removed from the file 'ecb-create-layout-file'
     and the layout-function and associated aliases are unbound.

 -- Command: display-news-for-upgrade &optional FULL-NEWS
     Display the most important NEWS after an ECB-upgrade.  If you call
     this function but no ECB-upgrade has been performed before starting
     ECB then nothing is display unless FULL-NEWS is not nil.

     If FULL-NEWS is not nil then the NEWS-file is displayed in another
     window.

 -- Command: display-upgraded-options
     Display a information-buffer which options have been upgraded or
     reset.  Offers two buttons where the user can decide if the
     upgraded options should also being saved by ECB for future settings
     or if the buffer should be killed.

     If saving is possible this command display where the options would
     be saved.  It is that file Emacs uses to save customize-settings.
     This file is "computed" from the settings in 'custom-file' and
     'user-init-file' (see the documentation of these variables).

     ECB automatically makes a backup-file of that file which will be
     modified by storing the upgraded rsp.  renamed ECB-options.  This
     backup file gets a unique name by adding a suffix
     ".before_ecb_<version>" to the name of the modified file.  If such
     a file already exists ECB adds a unique number to the end of the
     filename to make the filename unique.  This is a safety mechanism
     if something fails during storing the upgraded options, so you
     never lose the contents of your customization-file!

 -- Command: expand-methods-nodes &optional force-all
     Set the expand level of the nodes in the ECB-methods-buffer.

     This command asks in the minibuffer for an indentation level LEVEL.
     With this LEVEL you can precisely specify which level of nodes
     should be expanded.  LEVEL means the indentation-level of the
     nodes.

     A LEVEL value X means that all nodes with an indentation-level <= X
     are expanded and all other are collapsed.  A negative LEVEL value
     means all visible nodes are collapsed.

     Nodes which are not indented have indentation-level 0!

     Which node-types are expanded (rsp.  collapsed) by this command
     depends on the options 'ecb-methods-nodes-expand-spec' and
     'ecb-methods-nodes-collapse-spec'!  With optional argument
     FORCE-ALL all tags will be expanded/collapsed regardless of the
     values of these options.

     Examples:
        - LEVEL = 0 expands only nodes which have no indentation itself.
        - LEVEL = 2 expands nodes which are either not indented or
          indented indented once or twice
        - LEVEL ~ 10 should normally expand all nodes expect there are
          nodes which are indented deeper than 10.

     Note 1: This command switches off auto.  expanding of the
     method-buffer if 'ecb-expand-methods-switch-off-auto-expand' is not
     nil.  But it can be switched on again quickly with
     'ecb-toggle-auto-expand-tag-tree' or '[C-c . a]'.

     Note 2: All this is only valid for file-types parsed by semantic.
     For other file types which are parsed by imenu or etags (see
     'ecb-process-non-semantic-files') FORCE-ALL is always true!

 -- Command: dump-semantic-toplevel
     Dump the current semantic-tags in special buffer and display them.

 -- Command: eshell-current-buffer-sync
     Synchronize the eshell with the directory of current source-buffer.
     This is only done if the eshell is currently visible in the
     compile-window of ECB and if either this function is called
     interactively or 'ecb-eshell-buffer-sync' is not nil.

 -- Command: eshell-recenter
     Recenter the eshell window so that the prompt is at the buffer-end.

 -- Command: expand-directory-nodes
     Set the expand level of the nodes in the ECB-directories-buffer.
     For argument LEVEL see 'ecb-expand-methods-nodes'.

     Be aware that for deep structured paths and a lot of source-paths
     this command can last a long time - depending on machine- and
     disk-performance.

 -- Command: goto-window-analyse
     Make the ECB-analyse window the current window.

 -- Command: goto-window-compilation
     Goto the ecb compilation window 'ecb-compile-window'.

 -- Command: goto-window-directories
     Make the ECB-directories window the current window.  If
     'ecb-use-speedbar-instead-native-tree-buffer' is 'dir' then goto to
     the speedbar-window.

 -- Command: goto-window-ecb-by-smart-selection
     selects a special ecb-browsing-window by smart selection.  The
     command offers a list of all special ecb-windows by buffer-name.
     Selecting the buffer-name will select the displaying window.  Which
     special ecb-windows are offered depends on the currently selected
     window: If not a special ecb-window is the currently
     selected-window then all edit-windows are offered in canonical
     order (means from top-left to button-right).  If an ecb-window is
     the currently selected-window then all other(!)  special
     ecb-windows are offered, beginning with the next special ecb-window
     to the current ecb-window (the following special ecb-windows also
     in canonical order).  If there is only one senseful
     destination-ecb-window then this window is immediately selected,
     without confirmation (e.g.: There are two special ecb-windows and
     point stays in one of them.  Or there is only one ecb-window and
     point stays either in one of the edit-windows or in the
     compile-window).

     If optional argument USE-IMMEDIATE-COMPLETION is nil then all
     possible destination-windows are displayed in the message-area and
     only hitting TAB offers completion.  If USE-IMMEDIATE-COMPLETION is
     not nil then all possible destinations are immediately shown in a
     completion-buffer.

 -- Command: goto-window-edit-by-smart-selection
     Selects an edit-window by smart selection.  The command offers a
     list of all edit-windows by buffer-name.  Selecting the buffer-name
     will select the displaying window.  Which edit-windows are offered
     depends on the currently selected window: If not an edit-window is
     the currently selected-window then all edit-windows are offered in
     canonical order (means from top-left to button-right).  If an
     edit-window is the currently selected-window then all other(!)
     edit-windows are offered, beginning with the next edit-window to
     the current edit-window (the following edit-windows also in
     canonical order).  If there is only one senseful
     destination-edit-window then this window is immediately selected,
     without confirmation (e.g.: There are two edit-windows and point
     stays in one of them.  Or there is only one edit-window and point
     stays either in one of the special ecb-windows or in the
     compile-window).

     If optional argument USE-IMMEDIATE-COMPLETION is nil then all
     possible destination-windows are displayed in the message-area and
     only hitting TAB offers completion.  If USE-IMMEDIATE-COMPLETION is
     not nil then all possible destinations are immediately shown in a
     completion-buffer.

 -- Command: goto-window-edit1
     Make the (first) edit-window window the current window.

 -- Command: goto-window-edit2
     Make the second edit-window (if available) window the current
     window.

 -- Command: goto-window-edit-last
     Make the last selected edit-window window the current window.  This
     is the same as if 'ecb-mouse-click-destination' is set to
     'last-point'.

 -- Command: goto-window-history
     Make the ECB-history window the current window.

 -- Command: goto-window-methods
     Make the ECB-methods window the current window.  If
     'ecb-use-speedbar-instead-native-tree-buffer' is 'method' then goto
     to the speedbar-window.

 -- Command: goto-window-sources
     Make the ECB-sources window the current window.  If
     'ecb-use-speedbar-instead-native-tree-buffer' is 'source' then goto
     to the speedbar-window.

 -- Command: history-filter
     Apply a filter to the history-buffer to reduce the number of
     entries.  So you get a better overlooking.  There are three
     choices:

        - Filter by extension: Just insert the extension you want the
          History-buffer being filtered.  Insert the extension without
          leading dot!

        - Filter by regexp: Insert the filter as regular expression.

        - No filter: This means to display an entry for all currently
          living file-buffers.

 -- Command: jde-display-class-at-point
     Display in the ECB-methods-buffer the contents (methods, attributes
     etc...)  of the class which contains the definition of the "thing"
     under point (this can be a variable-name, class-name, method-name,
     attribute-name).  This function needs the same requirements to work
     as the method-completion feature of JDEE (see 'jde-complete')!.
     The source-file is searched first in 'jde-sourcepath', then in
     'jde-global-classpath', then in $CLASSPATH, then in
     current-directory.

     Works only for classes where the source-code (i.e.  the
     *.java-file) is available.

 -- Command: maximize-window-analyse
     Maximize the ECB-analyse-window.  I.e.  delete all other
     ECB-windows, so only one ECB-window and the edit-window(s) are
     visible (and maybe a compile-window).  Works also if the
     ECB-analyse-window is not visible in current layout.

 -- Command: maximize-window-directories
     Maximize the ECB-directories-window, i.e.  delete all other
     ECB-windows, so only one ECB-window and the edit-window(s) are
     visible (and maybe a compile-window).  Works also if the
     ECB-directories-window is not visible in current layout.

 -- Command: maximize-window-sources
     Maximize the ECB-sources-window, i.e.  delete all other
     ECB-windows, so only one ECB-window and the edit-window(s) are
     visible (and maybe a compile-window).  Works also if the
     ECB-sources-window is not visible in current layout.

 -- Command: maximize-window-methods
     Maximize the ECB-methods-window, i.e.  delete all other
     ECB-windows, so only one ECB-window and the edit-window(s) are
     visible (and maybe a compile-window).  Works also if the
     ECB-methods-window is not visible in current layout.

 -- Command: maximize-window-history
     Maximize the ECB-history-window, i.e.  delete all other
     ECB-windows, so only one ECB-window and the edit-window(s) are
     visible (and maybe a compile-window).  Works also if the
     ECB-history-window is not visible in current layout.

 -- Command: maximize-window-speedbar
     Maximize the ECB-speedbar-window, i.e.  delete all other
     ECB-windows, so only one ECB-window and the edit-window(s) are
     visible (and maybe a compile-window).  Does nothing if the
     speedbar-window is not visible within the ECB-frame.

 -- Command: methods-filter
     Apply a filter to the Methods-buffer to reduce the number of
     entries.  So you get a better overlooking.  There are six choices:

        * Filter by protection: Just insert the protection you want the
          Methods-buffer being filtered: private, protected or public!

        * Filter by regexp: Insert the filter as regular expression.

        * Filter by tag-class: You can filter by the tag-classes of
          current major-mode.  The available tag-classes come from the
          variable 'semantic--symbol->name-assoc-list'.  The are
          normally methods, variables etc.

        * Filter by current type: In languages which have types like
          Java or C++ this filter displays only the current type and all
          its members (e.g.  attributes and methods).  If ECB can not
          identify the current type in the source-buffer or in the
          methods-window then nothing will be done.

        * Filter by a filter-function: Such a function gets two
          arguments: a tag and the source-buffer of this tag.  If the
          tag should be displayed (i.e.  not being filtered out) then
          the function has to return not nil otherwise nil.

        * No special filter: This means to display all tags specified
          with the option 'ecb-show-tokens'.  If currently some of the
          above filters are applied they will be all removed.

        * Delete the last added: This removes only the topmost
          filter-layer, means that filter added last.

     The protection-, current-type- and the tag-class-filter are only
     available for semantic-supported sources.

     Be aware that the tag-list specified by the option 'ecb-show-tags'
     is the basis of all filters, i.e.  tags which are excluded by that
     option will never be shown regardless of the filter type here!

     All tags which match the applied filter(s) will be displayed in the
     Methods-buffer.

     If called with a prefix-argument or when optional arg INVERSE is
     not nil then an inverse filter is applied to the Methods-buffer,
     i.e.  all tags which do NOT match the choosen filter will be
     displayed in the Methods-buffer!

     Per default the choosen filter will be applied on top of already
     existing filters.  This means that filters applied before are
     combined with the new filter.  This behavior can changed via the
     option 'ecb-methods-filter-replace-existing'.  But regardless of
     the setting in 'ecb-methods-filter-replace-existing' applying one
     of the not-inverse filters protection, tag-class or current-type
     always replaces exactly already existing filters of that type.  On
     the other hand applying more than one inverse tag-class- or
     protection-filter can make sense.

     Such a filter is only applied to the current source-buffer, i.e.
     each source-buffer can have its own tag-filters.

     The current active filter will be displayed in the modeline of the
     Methods-buffer [regexp, prot (= protection), tag-class, function (=
     filter-function)].  If an inverse filter has been applied then this
     is signalized by a preceding caret ^.  If currently more than 1
     filter is applied then always the top-most filter is displayed in
     the modeline but the fact of more than 1 filter is visualized by
     the number of the filters - included in parens.  You can see all
     currently applied filters by moving the mouse over the
     filter-string in modeline of the Methods-buffer: They will
     displayed as help-echo.

     See the option 'ecb-default-tag-filter' if you search for
     automatically applied default-tag-filters.

 -- Command: methods-filter-current-type
     Display in the Methods-buffer only the current type and its
     members.  For further details see 'ecb-methods-filter'.

 -- Command: methods-filter-delete-last
     Remove the most recent filter from the Methods-buffer.  For further
     details see 'ecb-methods-filter'.

 -- Command: methods-filter-function &optional inverse
     Filter the methods-buffer by a function.  If INVERSE is not nil
     (called with a prefix arg) then an inverse filter is applied.  For
     further details see 'ecb-methods-filter'.

 -- Command: methods-filter-nofilter
     Remove any filter from the Methods-buffer.  For further details see
     'ecb-methods-filter'.

 -- Command: methods-filter-protection &optional inverse
     Filter the methods-buffer by protection.  If INVERSE is not nil
     (called with a prefix arg) then an inverse filter is applied.  For
     further details see 'ecb-methods-filter'.

 -- Command: methods-filter-regexp &optional inverse
     Filter the methods-buffer by a regexp.  If INVERSE is not nil
     (called with a prefix arg) then an inverse filter is applied.  For
     further details see 'ecb-methods-filter'.

 -- Command: methods-filter-tagclass &optional inverse
     Filter the methods-buffer by tag-class.  If INVERSE is not nil
     (called with a prefix arg) then an inverse filter is applied.  For
     further details see 'ecb-methods-filter'.

 -- Command: minor-mode &optional arg
     Toggle ECB minor mode.  With prefix argument ARG, turn on if
     positive, otherwise off.  Return non-'nil' if the minor mode is
     enabled.

 -- Command: nav-goto-previous
     Go backward in the navigation history-list, see *note Back/forward
     navigation::.

 -- Command: nav-goto-next
     Go forward in the navigation history-list, see *note Back/forward
     navigation::.

 -- Command: rebuild-methods-buffer
     Updates the methods buffer with the current buffer after deleting
     the complete previous parser-information, means no semantic-cache
     is used!  Point must stay in an edit-window otherwise nothing is
     done.  This method is merely needed for semantic parsed buffers if
     semantic parses not the whole buffer because it reaches a not
     parse-able code or for buffers not supported by semantic but by
     imenu or etags.

     Examples when a call to this function can be necessary:

        * If an Elisp-file is parsed which contains in the middle a
          defun X where the closing ) is missing then semantic parses
          only until this defun X is reached and you will get an
          incomplete ECB-method buffer.  In such a case you must
          complete the defun X and then call this function to completely
          reparse the Elisp-file and rebuild the ECB method buffer!

        * For not semantic supported buffers which can be parsed by
          imenu or etags (see 'ecb-process-non-semantic-files') because
          for these buffers there is no built-in auto-rebuild mechanism.
          For these buffers this command calls
          'ecb-rebuild-methods-buffer-for-non-semantic'.

     For non-semantic-sources supported by etags the option
     'ecb-auto-save-before-etags-methods-rebuild' is checked before
     rescanning the source-buffer and rebuilding the methods-buffer.

     If point is in one of the ecb-windows or in the compile-window then
     this command rebuids the methods-buffer with the contents of the
     source-buffer the last selected edit-window.

 -- Command: redraw-layout &optional ARG
     Redraw the ECB screen.

     Do not call this command from elisp-program but only interactively!

     Called without a prefix-argument the state of the ECB-frame-layout
     will preserved.  This means:

        - The state of compile-window (hidden or visible) will be
          preserved but if visible then the height will be as specified
          in 'ecb-compile-window-height'.

        - The state of the ECB-windows will be preserved (hidden or
          visible) but if visible then the sizes will be as specified in
          the layout (and with the options 'ecb-windows-width' and
          'ecb-windows-height') or as stored with
          'ecb-store-window-sizes'.

     If called with ONE prefix-argument ('[C-u]') then the layout will
     be drawn with all ECB-windows and also with a visible
     compile-window (when 'ecb-compile-window-height' is not nil).  The
     splitting-state of the edit-area will be preserved.

     If called with TWO prefix-arguments (i.e.  hitting '[C-u]' twice:
     ('[C-u]' '[C-u]') then an emergency-redraw will be performed.  This
     means the same as if called with one prefix-argument (s.a.)  but
     the splitting-state of the edit-area will NOT be preserved but all
     edit-windows besides the current one will be deleted.  Use this
     only if there are some anomalies after standard redraws!

     If the variable 'ecb-redraw-layout-quickly' is not nil then the
     redraw is done by the 'ecb-redraw-layout-quickly' function,
     otherwise by 'ecb-redraw-layout-full'.

     Please not: It's strongly recommended to use the quick redraw only
     if you have really slow machines where a full redraw takes several
     seconds because the quick redraw is not really safe and has some
     annoying drawbacks!  On normal machines the full redraw should be
     done in << 1s so there should be no need for the quick version!

 -- Command: restore-default-window-sizes
     Resets the sizes of the ECB windows to their default values.

 -- Command: restore-window-sizes
     Sets the sizes of the ECB windows to their stored values.  See
     option 'ecb-layout-window-sizes' and command
     'ecb-store-window-sizes'.

 -- Command: select-ecb-frame
     Selects the 'ecb-frame' if ECB is activated - otherwise reports an
     error.

 -- Command: show-help &optional format
     Shows the online help of ECB either in Info or in HTML format
     depending on the value of 'ecb-show-help-format'.  If called with
     prefix argument, i.e.  if FORMAT is not nil then the user is
     prompted to choose the format of the help (Info or HTML). If an
     error about not finding the needed help-file occurs please take a
     look at the options 'ecb-help-info-start-file' and
     'ecb-help-html-start-file'!

     Note: If you got ECB as a standard XEmacs-package maybe the
     HTML-online-documentation is not included.

 -- Command: show-layout-help
     Select a name of a layout and shows the documentation of the
     associated layout-function.  At least for the built-in layouts the
     documentation contains a picture of the outline of the chosen
     layout.

 -- Command: show-tip-of-the-day
     Show tip of the day if 'ecb-tip-of-the-day' is not nil or if called
     interactively.

 -- Command: sources-filter
     Apply a filter to the sources-buffer to reduce the number of
     entries.  So you get a better overlooking.  There are three
     choices:

        - Filter by extension: Just insert the extension you want the
          Sources-buffer being filtered.  Insert the extension without
          leading dot!

        - Filter by regexp: Insert the filter as regular expression.

        - No filter: This means to display an entry for every file in
          the current selected directory (all except these filter
          already filtered out by 'ecb-source-file-regexps' and
          'ecb-sources-exclude-cvsignore').

     Such a filter is only applied to the current selected directory,
     i.e.  each directory has its own filtered sources-buffer.

 -- Command: store-window-sizes &optional FIX
     Stores the sizes of the ECB windows for the current layout.  The
     size of the ECB windows will be set to their stored values when
     'ecb-redraw-layout' or 'ecb-restore-window-sizes' is called.  To
     reset the window sizes to their default values call
     'ecb-restore-default-window-sizes'.  Please read also the
     documentation of 'ecb-layout-window-sizes'!

     The windows sizes are stored per default as fractions of current
     frame-width and -height of the ecb-frame, so the stored values will
     "work" for other frame sizes too.  If a permanent compile-window is
     visible then ECB will tell you that window-sizes should be stored
     with hidden compile-window and ask you if you want proceed; if you
     proceed then the window-heights will be stored as fractions of
     current (frame-height minus current visible compile-window-height)
     so you should ensure that the current compile-window has its
     standard-height as specified in 'ecb-compile-window-height'!.  If
     FIX is not nil (means called with a prefix argument) then always
     the fixed values of current width and height are stored!

 -- Command: submit-problem-report
     Submit a problem report for the ECB to the ECB mailing-list.  This
     command generates in the edit-window a problem-report which
     contains already the current values of all ECB options, the current
     backtrace-buffer if there is any and the current message-buffer.
     You will be asked for a problem-report subject and then you must
     insert a description of the problem.  Please describe the problem
     as detailed as possible!

 -- Command: toggle-auto-expand-tag-tree &optional arg
     Toggle auto expanding of the ECB-methods-buffer.  With prefix
     argument ARG, make switch on if positive, otherwise switch off.  If
     the effect is that auto-expanding is switched off then the current
     value of 'ecb-auto-expand-tag-tree' is saved so it can be used for
     the next switch on by this command.

 -- Command: toggle-compile-window &optional arg
     Toggle the visibility of the compile-window of ECB. With prefix
     argument ARG, make visible if positive, otherwise invisible.  The
     height of the compile-window is always the current value of
     'ecb-compile-window-height'!  If called and
     'ecb-compile-window-height' is nil then ECB asks for the height of
     the compile-window, sets this height as new value of
     'ecb-compile-window-height' and displays the compile-window (so if
     you have called this command by mistake and you do not want a
     compile-window you have to quit with <C-g>).

 -- Command: toggle-compile-window-height &optional arg
     Toggle whether the 'ecb-compile-window' is enlarged or not.  If ARG
     > 0 then shrink or enlarge the the compile-window according to the
     value of 'ecb-enlarged-compilation-window-max-height'.  But never
     shrink below the value of 'ecb-compile-window-height'.  If ARG <= 0
     then shrink 'ecb-compile-window' to 'ecb-compile-window-height' and
     if ARG is nil then toggle the enlarge-state.

 -- Command: toggle-ecb-windows &optional arg
     Toggle visibility of the ECB-windows.  With prefix argument ARG,
     make visible if positive, otherwise invisible.  This has nothing to
     do with (de)activating ECB but only affects the visibility of the
     ECB windows.  ECB minor mode remains active!

 -- Command: toggle-layout &optional last-one
     Toggles between the layouts defined in 'ecb-toggle-layout-sequence'
     (See also option 'ecb-show-sources-in-directories-buffer').  Note:
     This function works by changing the options 'ecb-layout-name' but
     only for current Emacs-session.

     If optional argument LAST-ONE is not nil (e.g.  called with a
     prefix-arg) then always the last selected layout was choosen
     regardless of the setting in 'ecb-toggle-layout-sequence'.  The
     last selected layout is always that layout which was current direct
     before the most recent layout-switch.  So now a user can switch to
     another layout via 'ecb-change-layout' and always come back to his
     previous layout via '[C-u]' 'ecb-toggle-layout'.

 -- Command: toggle-scroll-other-window-scrolls-compile &optional ARG
     Toggle the state of
     'ecb-scroll-other-window-scrolls-compile-window'.  With prefix
     argument ARG, set it to 't', otherwise to 'nil'.  For all details
     about the scroll-behavior of 'scroll-other-window' see the advice
     documentation of 'other-window-for-scrolling'.

 -- Command: update-directories-buffer
     Updates the ECB directories buffer.

 -- Command: upgrade-options
     Check for all ECB-options if their current value is compatible to
     the defined type.  If not upgrade it to the new type or reset it to
     the default-value of current ECB. Try also to upgrade renamed
     options.  Displays all upgraded or reset options with their old
     (before the upgrade/reset) and new values.

 -- Command: window-sync
     ynchronizes all special ECB-buffers with current buffer.  Depending
     on the contents of current buffer this command performs different
     synchronizing tasks but only if ECB is active and point stays in an
     edit-window.

        * If current buffer is a file-buffer (or an indirect-buffer with
          a file-buffer as base-buffer) then all basic ECB-windows
          (directories, sources, methods and history) are synchronized
          with current buffer.

        * If current buffer is a dired-buffer then the directory- and
          the sources-tree-buffer are synchronized if visible

     In addition to this the hooks in 'ecb-basic-buffer-sync-hook' run.

     If optional argument ONLY-BASIC-WINDOWS is not nil then only the
     basic tree-buffer directories, sources, methods and history are
     synchronized.  Otherwise all registered special ecb-buffers are
     synchronized too.

     See *note ECB-window synchronizing::.

Most of these functions are also available via the menu "ECB" and also
via the ECB key-map with prefix 'C-c .' (see 'ecb-minor-mode' for a
complete list of the keybindings).


File: ecb.info,  Node: Customizing,  Next: Submitting problem report,  Prev: Usage of ECB,  Up: Top

7 Customizing ECB
*****************

This chapter describes how to customize ECB for your personal taste.
The first section introduces some general aspects (which you should
really know!), the second one gives an overview of the most important
options and the third one lists all options of ECB (divided into the
customize groups).

* Menu:

* General aspects::             General aspects for customizing ECB
* Most important options::      Which option you must know
* Customizable options::        All customizable options of ECB


File: ecb.info,  Node: General aspects,  Next: Most important options,  Prev: Customizing,  Up: Customizing

7.1 General aspects for customizing ECB
=======================================

This chapter contains all important informations you should know about
customizing ECB. The first section gives an answer to the question
"'setq' or 'customize'" and the second section describes what to do when
you have to customize ECB for a lot of people.

* Menu:

* setq or customize::           Should i use setq or customize?
* Site-wide customizing::       Site-wide customizing of ECB


File: ecb.info,  Node: setq or customize,  Next: Site-wide customizing,  Prev: General aspects,  Up: General aspects

7.1.1 Setq or customize - what should i use?
--------------------------------------------

The best way to customize all the options of ECB is via the
customize-feature of (X)Emacs, i.e.  means calling the commands
'customize-option' or 'customize-group' etc.  This is also the strongly
recommended way!

But you can also use 'setq' or some Elisp-code to change the values of
many but not all of the options.  The values of the following options
*MUST NOT* be changed via 'setq' or Elisp-code but only with the
customize-feature!

   - 'ecb-analyse-buffer-sync-delay'
   - 'ecb-analyse-show-node-info'
   - 'ecb-basic-buffer-sync-delay'
   - 'ecb-bucket-node-display'
   - 'ecb-compile-window-height'
   - 'ecb-compile-window-temporally-enlarge'
   - 'ecb-compile-window-width'
   - 'ecb-directories-show-node-info'
   - 'ecb-eshell-buffer-sync-delay'
   - 'ecb-exclude-parents-regexp'
   - 'ecb-fix-window-size'
   - 'ecb-font-lock-tags'
   - 'ecb-highlight-tag-with-point-delay'
   - 'ecb-history-show-node-info'
   - 'ecb-key-map'
   - 'ecb-layout-name'
   - 'ecb-layout-window-sizes'
   - 'ecb-methods-show-node-info'
   - 'ecb-mode-line-data'
   - 'ecb-mode-line-display-window-number'
   - 'ecb-mode-line-prefixes'
   - 'ecb-show-tags'
   - 'ecb-source-path'
   - 'ecb-sources-show-node-info'
   - 'ecb-speedbar-buffer-sync-delay'
   - 'ecb-symboldef-buffer-sync-delay'
   - 'ecb-toggle-layout-sequence'
   - 'ecb-tag-display-function'
   - 'ecb-tree-do-not-leave-window-after-select'
   - 'ecb-type-tag-display'
   - 'ecb-type-tag-expansion'
   - 'ecb-use-speedbar-instead-native-tree-buffer'
   - 'ecb-windows-height'
   - 'ecb-windows-width'


File: ecb.info,  Node: Site-wide customizing,  Prev: setq or customize,  Up: General aspects

7.1.2 Site-wide customizing of ECB
----------------------------------

If you are the administrator for an Emacs-site, means you are
responsible for the basic customization of a lot of Emacs users, then
you maybe need a way to customize Emacs and ECB without changing
everyones '.emacs'-file and normally you will do this with the file
'site-start.el'.  You can customize all options of ECB in a central
'site-start.el' (even the options mentioned above!)  but you *MUST NOT*
do this via 'setq' but you have to use a mechanism like the
following(1)!

This section describes two methods how to pre-customize ECB site-wide.
The elisp-code contained in the following two subsections has to be
copied to the file 'site-start.el' before it can be used.

But ensure for both methods that you customize the options with the
correct lisp format.  Read carefully the docstrings of the options you
want to customize from within Elisp-code!

7.1.2.1 Storing all option-settings in the users custom-file
............................................................

The mechanism described here defines all site-wide-settings in a file
'site-lisp.el' but stores the values in the users 'custom-file' which is
probably '.emacs'!

First two helper functions are needed, namely
'customize-option-get-value' and 'customize-save-variable-save' whereas
the latter one sets the value for an option via the customize-mechanism
(and is therefore allowed for the setq-forbidden options!)  but only if
the option has no saved value until now (i.e.  the user has not saved
this option for future sessions until now)

     (defun customize-option-get-value (option type)
       "Return the value of a customizable option OPTION with TYPE, where TYPE
     can either be 'standard-value \(the default-value of the defcustom) or
     'saved-value \(the value stored persistent by the user via customize)."
       (let ((val (car (get option type))))
         (cond ((not (listp val)) val)
               ((equal 'quote (car val)) (car (cdr val)))
               (t (car val)))))

     (defun customize-save-variable-save (option value &optional override)
       "Calls `customize-save-variable' with OPTION and VALUE if OPTION is a
     custom-type and if OPTION has no saved-value until now.
     If OVERRIDE is a function or lambda-form then it is called with two arguments:
     - OLD-SAVED-VAL: The saved value of OPTION
     - NEW-VALUE: see argument VALUE.
     OVERRIDE is only called if OPTION has already a saved-value. If OVERIDE
     returns not nil then `customize-save-variable' is called for OPTION with VALUE
     even if OPTION has no saved-value until now."
       (and (get option 'custom-type)
            (or (not (get option 'saved-value))
                (and (functionp override)
                     (funcall override
                              (customize-option-get-value option 'saved-value)
                              value)))
            (progn
              (message "Overriding saved value for option %s with %s" option value)
              (customize-save-variable option value))))

With 'customize-save-variable-save' all ECB-options can be site-wide
pre-customized like follows:

     (customize-save-variable-save 'ecb-show-tags
                                   '((include collapsed nil)
                                     (parent collapsed nil)
                                     (type flattened nil)
                                     (variable collapsed name)
                                     (function flattened name)
                                     (rule flattened name)
                                     (section flattened nil)
                                     (def collapsed name)
                                     (t collapsed name)))
     (customize-save-variable-save 'ecb-font-lock-tags t)
     ;; add here more options of ECB it you want

7.1.2.2 Using a special setq for site-wide settings
...................................................

The mechanism above saves the pre-customized values always in the users
'custom-file' (probably '.emacs').  If this is not preferred, then you
can use the following mechanism but of course the offered 'setq-save' is
only allowed for options which are not setq-forbidden (*note setq or
customize::).

The mechanism below does not change the users 'custom-file'.  This
mechanism is needed especially if ECB should be autoloaded and all
site-wide settings should first loaded when ECB is activated by the
user.  This can be achieved for example via(2):

     (require 'ecb-autoloads))
     (eval-after-load "ecb"
       '(require 'site-ecb))

In such a situation the whole 'custom-file' of a user is mostly loaded
*before* ECB is activated and therefore before the site-wide-settings
are loaded.  So the users own customizations are loaded before the
site-wide ones.

The 'setq-save'-mechanism described below prevents the users own
customisations contained in his 'custom-file' from being overridden by
the site-wide setq-settings.  If 'setq' would be used for the site-wide
settings then in an autoload-situation the site-wide settings would
override the users-settings and this should not be done!

First two helper-macros are needed:

     (defmacro custom-saved-p (option)
       "Return only not nil if OPTION is a defcustom-option and has a
     saved value. Option is a variable and is literal \(not evaluated)."
       `(and (get (quote ,option) 'custom-type)
             (get (quote ,option) 'saved-value)))

     (defmacro setq-save (option value)
       "Sets OPTION to VALUE if and only if OPTION is not already saved
     by customize. Option is a variable and is literal \(not evaluated)."
       `(and (not (custom-saved-p ,option))
             (set (quote ,option) ,value)))

With 'setq-save' all "not-setq-forbidden"-ECB-options can be site-wide
pre-customized like follows:

     (setq-save ecb-tree-indent 4)
     (setq-save ecb-tree-expand-symbol-before t)
     (setq-save ecb-primary-secondary-mouse-buttons 'mouse-1--mouse-2)

   ---------- Footnotes ----------

   (1) At least for the options for which 'setq' is explicitly
forbidden, but it is recommended to use always such a mechanism

   (2) The file 'site-ecb.el' contains all site-wide settings for ECB


File: ecb.info,  Node: Most important options,  Next: Customizable options,  Prev: General aspects,  Up: Customizing

7.2 The most important options of ECB
=====================================

Here are the most important options (it is recommended to check at least
the following options before working with ECB). You can customize them
via the customize-group "ecb-most-important" or via the command
'ecb-customize-most-important'.

'ecb-source-path'
     Where ECB can find your sources.  You must set this option!
'ecb-show-help-format'
     Should the online help of ECB be displayed in the standard Info
     format or in HTML format in a web-browser.
'ecb-auto-activate'
'ecb-major-modes-show-or-hide'
     Auto.  activation of ECB after start (*note Automatic activation::)
     or major-mode-based showing or hiding the ecb-windows.
'ecb-winman-escreen-number'
'ecb-winman-winring-name'
     Support of several window-managers (*note Window-managers and
     ECB::).
'ecb-key-map'
     All ECB-keybindings incl.  a common prefix-key (*note Using the
     keyboard::).
'ecb-new-ecb-frame'
     Should ECB create a new frame at activation time.
'ecb-primary-secondary-mouse-buttons'
'ecb-mouse-click-destination'
     Define how to use the mouse (*note Using the mouse::).
'ecb-tree-buffer-style'
'ecb-tree-expand-symbol-before'
'ecb-tree-indent'
'ecb-truncate-lines'
     The look&feel of the trees in the tree-buffers.  The former option
     defines the general style of the tree-buffers and the latter ones
     allow to customize the ascii-style tree-buffers (maybe you like a
     value of 4 for the latter one if you display the expand-symbol
     before (*note Tree-buffer styles::).
'ecb-source-file-regexps'
     Which files will (not) be shown in ECB.
'ecb-layout-name'
'ecb-compile-window-height'
'ecb-compile-window-width'
'ecb-other-window-behavior'
     The ECB layout, means which windows you want to be displayed in the
     ECB-frame and also the location of these windows (*note Changing
     the ECB-layout::).
'ecb-compilation-buffer-names'
     Which buffers should be treaten as "compilation-buffers" and
     therefore displayed in the compile-window of ECB - if there is any.
'ecb-tag-display-function'
'ecb-type-tag-display'
'ecb-type-tag-expansion'
'ecb-show-tags'
     How to display the entries in the ECB-method window for semantic
     supported sources (*note Customizing the display::).  These options
     take only effect for semantic-sources (*note Definition of
     semantic- and non-semantic-sources::).
'ecb-process-non-semantic-files'
     Displaying file-contents for not by semantic supported files too,
     e.g.  for LaTeX- and perl-sources (*note Non-semantic sources::).

But to make ECB working best for you it is also recommended to have a
look at *note Customizable options::!


File: ecb.info,  Node: Customizable options,  Prev: Most important options,  Up: Customizing

7.3 All customizable options of ECB
===================================

All customization of ECB is divided into the following "customize
groups".  You can highly customize all the ECB behavior/layout so just
go to these groups and you will see all well documented ECB-options.

*Please note*: All options in the following subsections are listed
without the prefix "ecb-" (e.g.  the option 'ecb-layout-name' is listed
with name "layout-name").  This has been done for a better readable
option index.  *Note Option Index::.

* Menu:

* ecb-general::                 General customizing ECB
* ecb-tree-buffer::             Customizing the general tree layout
* ecb-directories::             Customizing the ECB-directories-tree
* ecb-sources::                 Customizing the ECB-sources-window
* ecb-methods::                 Customizing the ECB-methods-window
* ecb-history::                 Customizing the ECB-history-window
* ecb-analyse::                 Customizing the ECB-analyse-window
* ecb-symboldef::               Customizing the ECB-symboldef-window
* ecb-layout::                  Customizing the ECB-layout
* ecb-compilation::             Customizing the compile-window
* ecb-create-layout::           Customizing options for creating layouts
* ecb-face-options::            Customizing options for faces
* ecb-faces::                   Customizing the faces
* ecb-help::                    Customizing the online help of ECB
* ecb-eshell::                  Customizing the eshell-integration
* ecb-speedbar::                Customizing the speedbar-integration
* ecb-non-semantic::            Customizing parsing non-semantic sources
* ecb-winman::                  Customizing window-manager support
* ecb-mode-line::               Customizing the tree-buffer-modelines
* ecb-version-control::         Customizing the version-control-support


File: ecb.info,  Node: ecb-general,  Next: ecb-tree-buffer,  Prev: Customizable options,  Up: Customizable options

7.3.1 Group ecb-general
-----------------------

This group contains general settings for the Emacs code browser:

 -- User Option: activate-before-layout-draw-hook
     Normal hook run at the end of activating the ecb-package by running
     'ecb-activate'.  This hooks are run after all the internal setup
     process but directly before(!)  drawing the layout specified in
     'ecb-layout' (means before dividing the frame into several
     windows).

     A senseful using of this hook can be maximizing the Emacs-frame for
     example, because this should be done before the layout is drawn
     because ECB computes the size of the ECB-windows with the current
     frame size!  If you need a hook-option for the real end of the
     activating process (i.e.  after the layout-drawing) look at
     'ecb-activate-hook'.

     IMPORTANT: The difference between this hook and
     'ecb-redraw-layout-before-hook' is that the latter one is evaluated
     always before the layout is redrawn (for example after calling
     'ecb-redraw-layout') whereas the former one (this hook) is only
     evaluated exactly once during the activation-process of ECB. So
     during the activation process there is the following sequence of
     hooks:
       1. 'ecb-activate-before-layout-draw-hook' \(this one)
       2. 'ecb-redraw-layout-before-hook'
       3. <Drawing the layout>
       4. 'ecb-redraw-layout-after-hook'
       5. 'ecb-activate-hook'

 -- User Option: activate-hook
     Hook run at the end of activating ECB by 'ecb-activate'.  This
     hooks are run at the real end of the activating process, means
     after the layout has been drawn!.  If you need hooks which are run
     direct before the layout-drawing look at
     'ecb-activate-before-layout-draw-hook'.

 -- User Option: activation-selects-ecb-frame-if-already-active
     Trying to activate an already activated ECB selects the ECB-frame.
     If t then the ECB-frame is selected, if nil then it is not.  If
     'ask then ECB asks if the ECB-frame should be selected if the
     current-frame is not the 'ecb-frame'.

 -- User Option: auto-activate
     Automatically startup ECB when Emacs starts up.  This should only
     be true if you always want to run 'ecb-activate'.

 -- User Option: auto-compatibility-check
     Check at ECB-startup if all ECB-options have correct values.  If
     not nil then all ECB-options are checked if their current value
     have the correct type.  It the type is incorrect the option is
     either auto.  upgraded to the new type or reset to the
     default-value of current ECB if no upgrade is possible.  This
     feature can also upgrade options which are renamed in current ECB
     and try to transform the old-value to the new named option.  After
     startup all upgraded or reset options are displayed with their old
     (before upgrade/reset) and new values.  See also the commands
     'ecb-upgrade-options' and 'ecb-display-upgraded-options'.  If this
     option is off then the user can perform the check and reset
     manually with 'ecb-upgrade-options'.  *Note Auto.
     option-upgrading::.

 -- User Option: before-activate-hook
     Normal hook run at the beginning of activating the ecb-package by
     running 'ecb-activate'.  These hooks run before any other tasks of
     the activating process are performed.  If any of these hooks
     returns nil then ECB will not be activated!

     This can be used to check some conditions and then only start ECB
     if all conditions are true.  For example a function could be added
     which returns only nil if Gnus is running.  Then calling
     'ecb-activate' or 'ecb-minor-mode' will only start ECB if Gnus is
     not already running.

 -- User Option: before-deactivate-hook
     Normal hook run at the beginning of deactivating ECB by running
     'ecb-deactivate'.  These hooks run before any other tasks of the
     deactivating process are performed.  If any of these hooks returns
     nil then ECB will not be deactivated!  See also
     'ecb-before-activate-hook'.

 -- User Option: bucket-node-display
     How ECB displays bucket-nodes in a ECB tree-buffer.  Bucket-nodes
     have only one job: Nodes with similar properties will be dropped
     into one bucket for such a common property and all these nodes will
     be added as children to the bucket-node.  Besides being expandable
     and collapsable a bucket-node has no senseful action assigned.
     Examples for bucket-nodes are "[+] Variables, "[+] Dependencies"
     etc.  in the Methods-buffer or buckets which combine filenames with
     same extension under a bucket-node with name this extension.

     This option defines how bucket-node should be displayed.  The name
     of the bucket-node is computed by ECB but you can define a prefix,
     a suffix and a special face for the bucket-node

     The default are empty prefix/suffix-strings and
     'ecb-bucket-node-face'.  But an alternative can be for example
     '("[" "]" nil) which means no special face and a display like "[+]
     [<bucket-name>]".

 -- User Option: clear-caches-before-activate
     Clear all ECB internal caches before startup.  If t then ECB clears
     all its internal caches before starting up.  Caches are used for
     files- and subdirs (see 'ecb-cache-directory-contents' and
     'ecb-cache-directory-contents-not') for semantic-tags and for the
     history-filter.

     This caches are completely clean at load-time of the ECB-library!

     Default is nil, because is makes sense not to clear these caches at
     start-time because ECB is often deacticated temporally especially
     in combination with window-managers like escreen.el.  In these
     situations the internal state of ECB should be preserved for next
     activation.

 -- User Option: deactivate-hook
     Normal hook run at the end of deactivating (but before the
     ecb-layout is cleared!)  ECB by running 'ecb-deactivate'.

 -- User Option: debug-mode
     If not nil ECB displays debug-information in the Messages-buffer.
     This is done for some critical situations concerning semantic-tags
     and their overlays (or extends for XEmacs).  Normally you should
     not need this switched on!  But if you get errors like "destroyed
     extend" for XEmacs or "wrong-argument-type" concerning overlays for
     GNU Emacs then you should switch on this option and submitting a
     bug-report to the ecb-mailing-list ('ecb-submit-problem-report')
     after getting the error again!

 -- User Option: grep-function
     Function used for performing a grep.  The popup-menu of the
     tree-buffers "Directories", "Sources" and "History" offer to grep
     the "current" directory:
        - Directory-buffer: The grep is performed in the current
          popup-directory after clicking the right mouse-button onto a
          node.
        - Sources-buffer: The grep is performed in the current selected
          directory.
        - History-buffer: The grep is performed in the directory of the
          current popup-source after clicking the right mouse-button
          onto a node.

 -- User Option: grep-recursive-function
     Function used for performing a recursive grep.  For more Details
     see option 'ecb-grep-function' and replace "grep" with "recursive
     grep".

 -- User Option: key-map
     Specifies all keybindings for the ECB minor-mode key-map.  The
     value is a cons-cell where the car is a common-prefix key for all
     the keybindings.  The cdr is a list of keybindings each of them a
     list again.  A key-binding has the following form:

          '(<common-prefix-flag> <keysequence> <function>) where

     '<common-prefix-flag>'
          If t then the common-prefix-key defined as car of the value
          (see above) is used.

     '<keysequence>'
          If the common prefix-key is used then the final key-binding is
          the concatenation of the common-prefix-key (see above) and
          this keysequence.

     '<function>:'
          The function to bind to the key.  This can also be a
          lambda-expression .

     It is highly recommended to use one of the standard keys C-c or C-x
     as first key of your common-prefix-key!

     You MUST change this option via customize to take effect!

     All keysequences must be inserted as a string and must follow the
     syntax needed by 'read-kbd-macro' or 'kbd'.  This means you can
     insert the key in the same manner 'C-h k' displays keysequences.
     Here is the summary of the syntax:

     Text is divided into "words" separated by whitespace.  Except for
     the words described below, the characters of each word go directly
     as characters of the keysequence.  The whitespace that separates
     words is ignored.  Whitespace in the macro must be written
     explicitly, as in 'C-c SPC'.

        * The special words RET, SPC, TAB, DEL, LFD, ESC, and NUL
          represent special control characters.  The words must be
          written in uppercase.

        * A word in angle brackets, e.g., <return>, <down>, <left> or
          <f1>, represents a function key.  (Note that in the standard
          configuration, the function key <return> and the control key
          RET are synonymous.).  You can use angle brackets on the words
          RET, SPC, etc., but they are not required there.

        * Keys can be written by their ASCII code, using a backslash
          followed by up to six octal digits.  This is the only way to
          represent keys with codes above \x{FFFF}.

        * One or more prefixes M- (meta), C- (control), S- (shift), A-
          (alt), H- (hyper), and s- (super) may precede a character or
          key notation.  For function keys, the prefixes may go inside
          or outside of the brackets: C-<down> = <C-down>.  The prefixes
          may be written in any order: M-C-x = C-M-x.  Prefixes are not
          allowed on multi-key words, e.g., C-abc, except that the Meta
          prefix is allowed on a sequence of digits and optional minus
          sign: M-123 = M- M-1 M-2 M-3.

        * The '^' notation for control characters also works: ^M = C-m.

 -- User Option: major-modes-show-or-hide
     List of major-modes which show or hide the ecb-windows.  The value
     is a cons-cell where the car contains all major-mode-symbols which
     should show the special ecb-windows and the cdr contains all
     major-mode-symbols which should hide the special ecb-windows.  If
     the symbol of a major-mode is neither contained in the
     car-"show-list" nor in the cdr-"hide-list" then the
     visibility-state of the ecb-windows does not change.

 -- User Option: minor-mode-text
     String to display in the mode line when ECB minor mode is active.
     (When the string is not empty, make sure that it has a leading
     space.)

     Because for ECB it is quite obvious if it is active or not when the
     ECB-windows are visible this text is only display in the modeline
     if the ECB-windows are hidden.

 -- User Option: run-ediff-in-ecb-frame
     Run ediff-sessions in the same frame as ECB is running.  If not nil
     then ECB ensures that ediff runs in the same frame as ECB and ECB
     restores exactly the "before-ediff"-window-layout after quiting
     ediff.  If nil then ediff decides in which frame it will run -
     depending on the current window-layout (e.g.  if the ecb-windows
     are currently hidden) this can be the ecb-frame but this can also
     be a newly created frame or any other frame.

 -- User Option: stealthy-tasks-delay
     Time Emacs must be idle before ECB runs its stealthy tasks.
     Currently ECB performes the following stealthy tasks:

     Prescann directories for emptyness
          Prescann directories and display them as empty or not-empty in
          the directories-buffer.  See the documentation of the option
          'ecb-prescan-directories-for-emptyness' for a description.

     File is read only
          Check if sourcefile-items of the directories- or
          sources-buffer are read-only or not.  See documentation of the
          option 'ecb-sources-perform-read-only-check'.

     Version-control-state
          Checks the version-control-state of files in directories which
          are managed by a VC-backend.  See the option
          'ecb-vc-enable-support'.

     Here the interval is defined ECB has to be idle before starting
     with these stealthy tasks.  It can be a floating-point value in
     seconds.  The value can also be changed during running ECB.

 -- User Option: tip-of-the-day
     Show tip of the day at start time of ECB.

 -- User Option: tip-of-the-day-file
     File where tip-of-the-day cursor is stored.

 -- User Option: use-recursive-edit
     Tell ECB to use a recursive edit.  If set then it can easily be
     deactivated by (keyboard-escape-quit).

 -- User Option: version-check
     Checks at start-time if the requirements are fulfilled.  It checks
     if the required versions of CEDET is installed and loaded into
     Emacs.

     It is strongly recommended to set this option to not 'nil'!


File: ecb.info,  Node: ecb-tree-buffer,  Next: ecb-directories,  Prev: ecb-general,  Up: Customizable options

7.3.2 Group ecb-tree-buffer
---------------------------

This group contains general settings related to the tree-buffers of ECB:

 -- User Option: basic-buffer-sync
     Synchronize the basic ECB-buffers automatically with current edit
     buffer.

     The basic ECB-buffers are the buffers for directories, sources,
     methods and history.

     If 'always then the synchronization takes place always a buffer
     changes in the edit window, if nil then never.  If a list of
     major-modes then only if the 'major-mode' of the new buffer belongs
     NOT to this list.

     But in every case the synchronization takes only place if the
     current-buffer in the edit-window has a relation to files or
     directories.  Examples for the former one are all
     programming-language-modes, 'Info-mode' too, an example for the
     latter one is 'dired-mode'.  For all major-modes related to
     non-file/directory-buffers like 'help-mode', 'customize-mode' and
     others never an autom.  synchronization will be done!

     It's recommended to exclude at least 'Info-mode' because it makes
     no sense to synchronize the ECB-windows after calling the Info
     help.  Per default also 'dired-mode' is excluded but it can also
     making sense to synchronize the ECB-directories/sources windows
     with the current directory in the dired-buffer.

     IMPORTANT NOTE: Every time the synchronization is done the hook
     'ecb-basic-buffer-sync-hook' is evaluated.

 -- User Option: basic-buffer-sync-delay
     Time Emacs must be idle before the special ECB-buffers are
     synchronized.  Synchronizing is done with the current source
     displayed in the edit window.  If nil then there is no delay, means
     synchronization takes place immediately.  A small value of about
     0.25 seconds saves CPU resources and you get even though almost the
     same effect as if you set no delay.

 -- User Option: basic-buffer-sync-hook
     Hook run at the end of 'ecb-basic-buffer-sync'.  See documentation
     of 'ecb-basic-buffer-sync' for conditions when synchronization
     takes place and so in turn these hooks are evaluated.

     Precondition for such a hook: Current buffer is the buffer of the
     currently selected edit-window.

     Postcondition for such a hook: Point must stay in the same
     edit-window as before evaluating the hook.

     Important note: If the option 'ecb-basic-buffer-sync' is not nil
     the function 'ecb-basic-buffer-sync' is running either every time
     Emacs is idle or even after every command (see
     'ecb-basic-buffer-sync-delay').  So these hooks can be really
     called very often!  Therefore each function of this hook
     should/must check in an efficient way at beginning if its task have
     to be really performed and then do them only if really necessary!
     Otherwise performance of Emacs could slow down dramatically!

     It is strongly recommended that each function added to this hook
     uses the macro 'ecb-do-if-buffer-visible-in-ecb-frame' at
     beginning!  See 'ecb-speedbar-buffer-sync' and
     'ecb-eshell-buffer-sync' for examples how to use this macro!

 -- User Option: bucket-node-display
     How ECB displays bucket-nodes in a ECB tree-buffer.  Bucket-nodes
     have only one job: Nodes with similar properties will be dropped
     into one bucket for such a common property and all these nodes will
     be added as children to the bucket-node.  Besides being expandable
     and collapsable a bucket-node has no senseful action assigned.
     Examples for bucket-nodes are "[+] Variables", "[+] Dependencies"
     etc.  in the Methods-buffer or buckets which combine filenames with
     same extension under a bucket-node with name this extension.

     This option defines how bucket-node should be displayed.  The name
     of the bucket-node is computed by ECB but you can define a prefix,
     a suffix and a special face for the bucket-node

     The default are empty prefix/suffix-strings and
     'ecb-bucket-node-face'.  But an alternative can be for example
     '("[" "]" nil) which means no special face and a display like "[+]
     [<bucket-name>]".

 -- User Option: common-tree-buffer-after-create-hook
     Local hook running at the end of each tree-buffer creation.  Every
     function of this hook is called once without arguments direct after
     creating a tree-buffer of ECB and it's local key-map.  So for
     example a function could be added which performs calls of
     'local-set-key' to define new keybindings for EVERY tree-buffer.

     The following keys must not be rebind in all tree-buffers:
        - 'RET' and all combinations with 'Shift' and 'Ctrl'
        - 'TAB'
        - 'C-t'

 -- User Option: mouse-click-destination
     Destination of a mouse-button click.  Defines in which edit-window
     (if splitted) ECB does the "right" action (opening a source,
     jumping to a method/variable etc.)  after clicking with the primary
     mouse-button (see 'ecb-primary-secondary-mouse-buttons') onto a
     node.  There are two possible choices:

        - 'left-top': Does the "right" action always in the left/topmost
          edit-window.
        - 'last-point': Does the "right" action always in that
          edit-window which had the point before.
     This is if the user has clicked either with the primary
     mouse-button or has activated a popup-menu in the tree-buffer.

     If the edit-area is not splitted this setting doesn't matter.

     A click with the secondary mouse-button (see again
     'ecb-primary-secondary-mouse-buttons' does the "right" action
     always in another edit-window related to the setting in this
     option: If there are two edit-windows then the "other" edit-window
     is used and for more than 2 edit-windows the "next" edit-window is
     used (whereas the next edit-window of the last edit-window is the
     first edit-window).

     Note: If the tree-buffers are used with the keyboard instead with
     the mouse then this option takes effect too because 'RET' is
     interpreted as primary mouse-button and 'C-RET' as secondary
     mouse-button!

 -- User Option: primary-secondary-mouse-buttons
     Primary- and secondary mouse button for using the ECB-buffers.  A
     click with the primary button causes the main effect in each
     ECB-buffer:

        * ECB Directories: Expanding/collapsing nodes and displaying
          files in the ECB Sources buffer.

        * ECB sources/history: Opening the file in that edit-window
          specified by the option 'ecb-mouse-click-destination'.

        * ECB Methods: Jumping to the method in that edit-window
          specified by the option 'ecb-mouse-click-destination'.

     A click with the primary mouse-button while the SHIFT-key is
     pressed called the POWER-click and does the following (depending on
     the ECB-buffer where the POWER-click occurs):

        * ECB Directories: Refreshing the directory-contents-cache (see
          'ecb-cache-directory-contents').

        * ECB sources/history: Only displaying the source-contents in
          the method-buffer but not displaying the source-file in the
          edit-window.

        * ECB Methods: Narrowing to the clicked method/variable/ect...
          (see 'ecb-tag-visit-post-actions').  This works only for
          semantic supported sources but not for imenu- or
          etags-supported ones!

     In addition always the whole node-name is displayed in the
     minibuffer after a POWER-click (for this see also
     'ecb-methods-show-node-info').

     The secondary mouse-button is for opening (jumping to) the file in
     another edit-window (see the documentation
     'ecb-mouse-click-destination').

     The following combinations are possible:

        - primary: mouse-2, secondary: C-mouse-2 (means mouse-2 while
          CTRL-key is pressed).  This is the default setting.
        - primary: mouse-1, secondary: C-mouse-1
        - primary: mouse-1, secondary: mouse-2

     Please note: If the tree-buffers are used with the keyboard instead
     with the mouse then 'RET' is interpreted as primary mouse-button
     and 'C-RET' as secondary mouse-button!

     If you change this during ECB is activated you must deactivate and
     activate ECB again to take effect

 -- User Option: tree-buffer-style
     The style of the tree-buffers.  There are three different styles
     available:

     Image-style (value 'image'): Very nice and modern - just try it.
     For this style the options 'ecb-tree-indent' and
     'ecb-tree-expand-symbol-before' have no effect!  The value 'image
     means use image-style if images can be displayed with current
     Emacs-setup \(otherwise auto.  'ascii-style is used).  Note: GNU
     Emacs <= 21.3.X for Windows does not support image-display so ECB
     uses always 'ascii-guides even when here 'image is set!

     Ascii-style with guide-lines (value 'ascii-guides'):
          [-] ECB
           |  [+] code-save
           `- [-] ecb-images
               |  [-] directories
               |   |  [-] height-15
               |   |   |  * close.xpm
               |   |   |  * empty.xpm
               |   |   |  * leaf.xpm
               |   |   `- * open.xpm
               |   |  [+] height-17
               |   |  [+] height-19
               |   `- [+] height-21
               |  [x] history
               |  [x] methods
               `- [x] sources

     Ascii-style without guide-lines (value 'ascii-no-guides') - this is
     the style used by ECB <= 1.96:
          [-] ECB
              [+] code-save
              [-] ecb-images
                  [-] directories
                      [-] height-15
                          * close.xpm
                          * empty.xpm
                          * leaf.xpm
                          * open.xpm
                      [+] height-17
                      [+] height-19
                      [+] height-21
                  [x] history
                  [x] methods
                  [x] sources

     With both ascii-styles the tree-layout can be affected with the
     options 'ecb-tree-indent' and 'ecb-tree-expand-symbol-before'.

 -- User Option: tree-do-not-leave-window-after-select
     Tree-buffers which stay selected after a key- or mouse-selection.
     If a buffer (either its name or the variable-symbol which holds the
     name) is contained in this list then selecting a tree-node either
     by RET or by a mouse-click doesn't leave that tree-buffer after the
     node-selection but performes only the appropriate action (opening a
     new source, selecting a method etc.)  but point stays in the
     tree-buffer.  In tree-buffers not contained in this option normaly
     a node-selection selects as "last" action the right edit-window or
     maximizes the next senseful tree-buffer in case of a currently
     maximized tree-buffer (see
     'ecb-maximize-next-after-maximized-select').

     The buffer-name can either be defined as plain string or with a
     symbol which contains the buffer-name as value.  The latter one is
     recommended for the builtin ECB-tree-buffers because then simply
     the related option-symbol can be used.

     A special remark for the 'ecb-directories-buffer-name': Of course
     here the value of this option is only relevant if the name of the
     current layout is contained in
     'ecb-show-sources-in-directories-buffer' or if the value of
     'ecb-show-sources-in-directories-buffer' is 'always and the clicked
     ot hitted node represents a sourcefile (otherwise this would not
     make any sense)!

     The setting in this option is only the default for each
     tree-buffer.  With the command
     'ecb-toggle-do-not-leave-window-after-select' the behavior of a
     node-selection can be changed fast and easy in a tree-buffer
     without customizing this option, but of course not for future Emacs
     sessions!

 -- User Option: tree-easy-hor-scroll
     Scroll step for easy hor.  scrolling via mouse-click in
     tree-buffers.  XEmacs has horizontal scroll-bars so invisible parts
     beyond the right window-border of a tree-buffer can always made
     visible very easy.

     GNU Emacs does not have hor.  scroll-bars so especially with the
     mouse it is quite impossible to scroll smoothly right and left.
     The functions 'scroll-left' and 'scroll-right' can be annoying and
     are also not bound to mouse-buttons.

     If this option is a positive integer S then in all ECB-tree-buffers
     the keys 'M-mouse-1' and 'M-mouse-3' are bound to scrolling left
     rsp.  right with scroll-step S - clicking with 'mouse-1' or
     'mouse-2' onto the edge of the modeline has the same effect, i.e.
     if you click with mouse-1 onto the left (rsp right) edge of the
     modeline you will scroll left (rsp.  right).

     Additionally 'C-M-mouse-1' and 'C-M-mouse-3' are bound to scrolling
     left rsp.  right with scroll-step 'window-width' - 2.

     Default is a scroll-step of 5.  If the value is 'nil' then no keys
     for horizontal scrolling are bound.

 -- User Option: tree-expand-symbol-before
     Show the expand symbol before the items in a tree.  When the
     expand-symbol is located before the items then the tree looks like:

          [-] ECB
              [+] code-save
              [-] ecb-images
                  [-] directories

     When located after then the tree looks like:

          ECB [-]
            code-save [+]
            ecb-images [-]
              directories [-]

     The after-example above use a value of 2 for 'ecb-tree-indent'
     whereas the before-example uses a value of 4.

     It is recommended to display the expand-symbol before because
     otherwise it could be that with a deep nested item-structure with
     and/or with long item-names (e.g.  a deep directory-structure with
     some long subdirectory-names) the expand-symbol is not visible in
     the tree-buffer and the tree-buffer has to be horizontal scrolled
     to expand an item.

 -- User Option: tree-image-icons-directories
     Directories where the images for the tree-buffer can be found.
     This is a cons cell where:

     car: Default directory where the default images for the tree-buffer
     can be found.  It should contain an image for every name of
     'tree-buffer-tree-image-names'.  The name of an image-file must be:
     "ecb-<NAME of TREE-BUFFER-TREE-IMAGE-NAMES>.<ALLOWED EXTENSIONS>".

     cdr: This is a list where each element is a cons again with: car is
     the buffer name of the tree-buffer for which a special image-path
     should be used.  The buffer-name can either be defined as plain
     string or with a symbol which contains the buffer-name as value.
     The latter one is recommended for the builtin ECB-tree-buffers
     because then simply the related option-symbol can be used (e.g.
     the symbol 'ecb-directories-buffer-name').  The cdr is the the
     full-path of an additional image-directorie which is searched first
     for images needed for the related tree-buffer.  If the image can
     not be found in this directory then the default-directory (see
     above) is searched.  If the image can't even be found there the
     related ascii-symbol is used - which is defined in
     'tree-buffer-tree-image-names'.  If a tree-buffer is not contained
     in this list then there is no additional special image-directory
     for it.

     ECB comes with predefined images in several different heights - so
     for the most senseful font-heights of a tree-buffer a fitting
     image-size should be available.  The images reside either in the
     subdirectory "ecb-images" of the ECB-installation or - if ECB is
     installed as regular XEmacs-package - in the ECB-etc data-directory
     (the directory returned by (locate-data-directory "ecb").

 -- User Option: tree-incremental-search
     Enable incremental search in the ECB-tree-buffers.  For a detailed
     explanation see the online help section "Working with the keyboard
     in the ECB buffers".  If you change this during ECB is activated
     you must deactivate and activate ECB again to take effect.

 -- User Option: tree-indent
     Indent size for tree buffer.  If you change this during ECB is
     activated you must deactivate and activate ECB again to take
     effect.

 -- User Option: tree-make-parent-node-sticky
     Make the parent-node sticky in the headerline of the tree-buffer.

     If not nil then the first line of the tree-buffer is used as
     header-line which is used to display the next unvisible parent of
     the first visible node as sticky, so always the parent of a node is
     visible and clickable.  If a node has no parent then just the next
     node above is displayed in the header-line.  The node displayed in
     the header-line is exactly in the same manner clickable as all
     other nodes.

     See also 'ecb-tree-stickynode-indent-string'.

     This feature is only available with Gnu Emacs, not with XEmacs.

 -- User Option: tree-mouse-action-trigger
     When the tree-buffer mouse-action should be triggered.  This option
     determines the moment a mouse-action in a tree-buffer is triggered.
     This can be either direct after pressing a mouse-button (value
     'button-press') or not until releasing the mouse-button (value:
     'button-release').

     If you change this during ECB is activated you must deactivate and
     activate ECB again to take effect!

 -- User Option: tree-navigation-by-arrow
     Enable smart navigation in the tree-windows by horiz.  arrow-keys.
     If not nil then the left- and right-arrow keys work in the ECB
     tree-window in the following smart way if onto an expandable node:

        * Left-arrow: If node is expanded then it will be collapsed
          otherwise point jumps to the next "higher" node in the
          hierarchical tree (higher means the next higher tree-level or
          - if no higher level available - the next higher node on the
          same level).

        * Right-arrow: If node is not expanded then it will be expanded.
          Onto a not expandable node the horizontal arrow-keys go one
          character in the senseful correct direction.

     If this option is changed the new value takes first effect after
     deactivating ECB and then activating it again!

 -- User Option: tree-stickynode-indent-string
     String used to indent the stickynode.  This string is used to match
     the space used by scrollbars and fringe so it does not appear that
     the node-name is moving left/right when it lands in the sticky
     line.

     Normally the needed value is computed automatically by ECB. But if
     the result is not matching this option allows to customize the
     indent-string.  The default value is computed by the function
     'tree-buffer-sticky-default-indent-string', so you can change the
     needed value with that starting-point.

     Changing this option takes only effect after restarting Emacs!

 -- User Option: tree-truncate-lines
     Truncate lines in ECB buffers.  If a buffer (either its name or the
     variable-symbol which holds the name) is contained in this list
     then line-truncation is switched on for this buffer otherwise it is
     off.

     The buffer-name can either be defined as plain string or with a
     symbol which contains the buffer-name as value.  The latter one is
     recommended to switch on line-truncation for one of the builtin
     ECB-tree-buffers because then simply the related option-symbol can
     be used.  To truncate lines in the builtin directories tree-buffer
     just add the symbol 'ecb-directories-buffer-name' to this option.

     If you change this during ECB is activated you must deactivate and
     activate ECB again to take effect.

 -- User Option: truncate-long-names
     Truncate long names that don't fit in the width of the ECB windows.
     If you change this during ECB is activated you must deactivate and
     activate ECB again to take effect.


File: ecb.info,  Node: ecb-directories,  Next: ecb-sources,  Prev: ecb-tree-buffer,  Up: Customizable options

7.3.3 Group ecb-directories
---------------------------

This group contains settings for the directories-buffer in the ECB:

 -- User Option: add-path-for-not-matching-files
     Add path of a file to 'ecb-source-path' if not already contained.
     This is done during the auto.  windows synchronization which
     happens if a file is opened not via the file/directory-browser of
     ECB. In such a situation ECB adds the path of the new file auto.
     to 'ecb-source-path' at least temporally for the current Emacs
     session.  This option defines two things:

       1. Should only the root-part (which means for Unix-like systems
          always '/' and for windows-like systems the drive) of the new
          file be added as source-path to 'ecb-source-path' or the whole
          directory-part?  For remote-files (e.g.  tramp, ange-ftp- or
          efs-files) the root-part is the complete host-part + the
          root-dir at that host (example: /berndl@ecb.sourceforge.net:/
          would be the root-part of
          /berndl@ecb.sourceforge.net:/tmp/test.txt).
       2. Should this path be added for future sessions too?

     The value of this option is a cons-cell where the car is a boolean
     for 1.  and the cdr is a boolean for 2.

     A value of not nil for the car (1.)  is reasonably if a user often
     opens files not via the ECB-browser which are not located in any of
     the paths of 'ecb-source-path' because then only one path for each
     drive (windows) or the root-path (Unix) is added to the directory
     buffer of ECB.

 -- User Option: auto-expand-directory-tree
     Automatically expand the directory tree to the current source file.
     There are three options:

        - 'best': Expand the best-matching source-path
        - 'first': Expand the first matching source-path
        - 'nil': Do not automatically expand the directory tree.

 -- User Option: after-directory-change-hook
     Hook which run directly after the selected directory has changed.
     This means not onyl after a click onto a directory in the
     directory-window of ECB but it means this hook runs always when the
     current directory changes regardless of the trigger of this change.
     So for example it runs also when you just switches from one buffer
     to another via 'switch-to-buffer' or
     'switch-to-buffer-other-window' and the directory of these
     filebuffers is different but only when auto-synchronizing of the
     ECB-windows is on (see 'ecb-basic-buffer-sync').  It runs not when
     switching between buffers and the associated files reside in the
     same directory.

     Each function added to this hook will be called with two arguments:
     The directory which was current _before_ the
     directory-change-trigger and the directory which was now the
     current (i.e.  after the trigger).

     Example: If you switch from a filebuffer "~/.emacs" to a filebuffer
     "/tmp/test.txt" then the functions of this hook will be called with
     the two arguments "~" and "/tmp".

 -- User Option: cache-directory-contents
     Cache contents of directories.

     This can be useful if 'ecb-source-path' contains directories with
     many files and subdirs, especially if these directories are mounted
     net-drives ("many" means here something > 500, dependent of the
     speed of the net-connection and the machine).  Or if it contains
     remote-source-paths which means paths in the sense of tramp,
     ange-ftp or efs.  For these directories actualizing the sources-
     and/or directories- buffer of ECB (if displayed in current layout!)
     can slow down dramatically so a caching increases speed a lot.

     The value of this option is a list where each element is a
     cons-cell and looks like:

            (<dir-regexp> . <filenumber threshold>) with

     '<dir-regexp>:'
          Regular expression a directory must match to be cached.
     '<filenumber threshold>:'
          Number of directory contents must exceed this number.

     A directory will only be cached if and only if the directory-name
     matches at least one rexexp of this option and its content-number
     exceeds the related threshold AND the directory-name matches NOT
     any regexp of 'ecb-cache-directory-contents-not'!

     The cache entry for a certain directory will be refreshed and
     actualized only by using the POWER-click (see
     'ecb-primary-secondary-mouse-buttons') in the directories-buffer of
     ECB (*note Using the mouse::).

     Default-value: ECB caches the contents of all remote directories
     regardless of the size and all other directories if more than 50
     entries are contained.

     Examples:

     An entry '("/usr/home/john_smith/bigdir*" . 1000)' means the
     contents of every subdirectory of the home-directory of John Smith
     will be cached if the directory contains more than 1000 entries and
     its name begins with "bigdir".

     An entry '(".*" . 1000)' caches every directory which has more than
     1000 entries.

     An entry '("^/\\([^:/]*@\\)?\\([^@:/]*\\):.*" . 0)' caches every
     remote (in the sense of tramp, ange-ftp or efs) directory
     regardless of the number of entries."

     Please note: If you want your home-dir being cached then you MUST
     NOT use "~" because ECB tries always to match full path-names!

 -- User Option: cache-directory-contents-not
     Do not cache the contents of certain directories.  The value of
     this option is a list where the each element is a regular
     expression a directory must match if it should not being cached.

     If a directory-name matches at least one of the regexps of this
     option the directory-contents will never being cached.  See
     'ecb-cache-directory-contents' to see when a directory will be
     cached.

     This option can be useful when normally all directories with a
     certain amount of content (files and subdirs) should be cached but
     some special directories not.  This can be achieved by:

        - Setting 'ecb-cache-directory-contents' to ((".*" .  500)):
          Caches all directories with more then 500 entries

        - Setting 'ecb-cache-directory-contents-not' to a value which
          matches these directories which should not being cached (e.g.
          ("/usr/home/john_smith") excludes the HOME-directory of John
          Smith from being cached).

     Please note: If you want your home-dir exclude from being cached
     then you MUST NOT use "~" because ECB tries always to match full
     path-names!

 -- User Option: directories-buffer-after-create-hook
     Local hook running after the creation of the directories-buffer.
     Every function of this hook is called once without arguments direct
     after creating the directories-buffer of ECB and it's local
     key-map.  So for example a function could be added which performs
     calls of 'local-set-key' to define new keybindings only for the
     directories-buffer of ECB.

     The following keys must not be rebind in the directories-buffer:
     'F2', 'F3' and 'F4'

 -- User Option: directories-buffer-name
     Name of the ECB directory buffer.  Because it is not a normal
     buffer for editing you should enclose the name with stars, e.g.  "
     *ECB Directories*".

     If it is necessary for you you can get emacs-lisp access to the
     buffer-object of the ECB-directory-buffer by this name, e.g.  by a
     call of 'set-buffer'.

     Changes for this option at runtime will take affect only after
     deactivating and then activating ECB again!

 -- User Option: directories-menu-sorter
     Function which re-sorts the menu-entries of the directories buffer.

     If a function then this function is called to re-arrange the
     menu-entries of the combined menu-entries of the
     user-menu-extensions of 'ecb-directories-menu-user-extension' and
     the built-in-menu 'ecb-directories-menu'.  If nil then no special
     sorting will be done and the user-extensions are placed in front of
     the built-in-entries.

     The function get one argument, a list of menu-entries.  For the
     format of this argument see 'ecb-directories-menu-user-extension'.
     The function must return a new list in the same format.  Of course
     this function can not only re-arrange the entries but also delete
     entries or add new entries.

 -- User Option: directories-menu-user-extension
     Static user extensions for the popup-menu of the directories
     buffer.  Value is a list of elements of the following type: Each
     element defines a new menu-entry and is either:

       1. Menu-command: A list containing two sub-elements, whereas the
          first is the function (a function symbol) being called if the
          menu-entry is selected and the second is the name of the
          menu-entry.

       2. Separator: A one-element-list and the element is the string
          "--": Then a non-selectable menu-separator is displayed.

       3. Submenu: A list where the first element is the title of the
          submenu displayed in the main-menu and all other elements are
          either menu-commands (see 1) or separators (see 2) or another
          submenu (see c).  This allows deep nested
          menu-submenu-structures.  Currently a level of 4 is allowed
          but in general there could be an infinite depth of nesting but
          it makes no sense - if possible at all - to define infinite
          nested defcustom-types.  So there is a limit of 4 levels but
          tis is not a hard limit: Just increase the value of the
          'ecb-max-submenu-depth' *BEFORE* first loading ECB!

     The function of a menu-command must follow the following
     guidelines: Such a function must be defined with the macro
     'tree-buffer-defpopup-command'!  This macro defines a new
     popup-command whereas the newly defined command gets one argument
     NODE.  See the docstring of 'tree-buffer-defpopup-command' for
     further details.

     Example for the definition of such a menu-function:

          (tree-buffer-defpopup-command ecb-my-special-dir-popup-function
            "Prints the name of the directory of the node under point."
            (let ((node-data=dir (tree-node-get-data node)))
               (message ``Dir under node: %s'' node-data=dir)))

     Per default the static user-extensions are added at the beginning
     of the built-in menu-entries of 'ecb-directories-menu' but the
     whole menu can be re-arranged with 'ecb-directories-menu-sorter'.

     These menu-extensions are static.  A dynamic menu-extension can be
     achieved via 'ecb-directories-menu-user-extension-function'.

 -- User Option: directories-menu-user-extension-function
     Dynamic user extensions for the popup-menu of the directories
     buffer.  A function which has to return a list in the same format
     like the option 'ecb-directories-menu-user-extension'.  This
     function is called when the user opens the popup-menu for the
     directories buffer.

     If no dynamically evaluated menu-extensions should be added to the
     directories-buffer the function has to return nil.  Therefore the
     default-value of this option is 'ignore'.

     Per default the dynamic user-extensions are added in front of the
     static extensions of 'ecb-directories-menu-user-extension' but the
     whole menu can be re-arranged with 'ecb-directories-menu-sorter'.

 -- User Option: directories-show-node-info
     When to display which node-info in the directories-buffer.  Define
     which node info should be displayed after moving the mouse over a
     node (or after a shift click onto the node) in the
     directories-buffer.

     You can define "when" a node-info should be displayed:
        - always: Node info is displayed by moving with the mouse over a
          node.
        - if-too-long: Node info is only displayed by moving with the
          mouse over a node does not fit into the window-width of the
          tree-buffer window.  In the ECB directories buffer this means
          also if a node is shortend or if the node has an alias (see
          'ecb-source-path').
        - shift-click: Node info is only displayed after a shift click
          with the primary mouse button onto the node.
        - never: Node info is never displayed.

     You can define "which" info should be displayed:
        - name: Only the full node-name is displayed.
        - path: The full-path of the node is displayed.

     Do NOT set this option directly via setq but use always customize!

 -- User Option: display-default-dir-after-start
     Automatically display current default-directory after activating
     ECB.

     If a file-buffer is displayed in the current active edit-window
     then ECB synchronizes its basic tree-buffers to this file-buffer -
     at least if the option 'ecb-basic-buffer-sync' it not nil.  So for
     this situation 'ecb-display-default-dir-after-start' takes no
     effect but this option is for the case if no file-buffer is
     displayed in the edit-window after startup:

     If true then ECB selects autom.  the current default-directory
     after activation even if no file-buffer is displayed in the current
     active edit-window.  This is useful if ECB is autom.  activated
     after startup of Emacs and Emacs is started without a
     file-argument.  So the directory from which the startup has
     performed is auto.  selected in the ECB-directories buffer and the
     ECB-sources buffer displays the contents of this directory.

 -- User Option: excluded-directories-regexps
     Directories that should not be included in the directories list.
     The value of this variable should be a list of regular expression.

 -- User Option: prescan-directories-for-emptyness
     Prescan directories for emptyness.  ECB does this so directories
     are displayed as empty in the directories-buffer even without
     user-interaction (i.e.  in previous ECB-versions the emptyness of a
     directory has been first checked when the user has clicked onto a
     directory).  ECB optimizes this check as best as possible but if a
     directory contains a lot of subdirectories which contain in turn a
     lot of entries, then expanding such a directory or selecting it
     would take of course more time as without this check - at least at
     the first time (all following selects of a directory uses the
     cached information if its subdirectories are empty or not).
     Therefore ECB performs this check stealthy (see
     'ecb-stealthy-tasks-delay') so normally there should no
     performance-decrease or additional waiting-time for the user.
     There is one exception: For remote directories (in the sense of
     tramp, ange-ftp, or efs) this check can descrease performance even
     if performed stealthy and interruptable.  Therefore this option
     offers three possible settings:

        * 't' Switch on this feature

        * 'unless-remote' Switch on this feature but not for remote
          directories.  The term "remote" means here directories which
          are used via tramp, ange-ftp or efs.  So mounted directories
          are counted not as remote directories here even if such a
          directory is maybe hosted on a remote machine.  But normally
          only directories in a LAN are mounted so there should be no
          performance-problems with such mounted directories.

        * 'nil' Switch off this feature completely.

     The option 'ecb-prescan-directories-exclude-regexps' offers are
     more fine granularity to exclude certain directories from this
     prescan.

 -- User Option: host-accessible-check-valid-time
     Time in seconds a cached accessible-state of a remote host is
     valid.  This option is a list where each element specifies how long
     for a certain remote host the cached ping-state (i.e.  if the host
     is accessible or not) should be valid.  During this time-intervall
     ECB pings such a remote host only once, all other checks use the
     cached value of that real check.  But it the cached value is older
     than the value of this option ECB will ping again.

     Per default ECB discards after 1 minute the cached ping-state of
     each remote host.  But if you are sure that a certain remote host
     is always accessible (i.e.  means in consequence that you are
     always online when working with ECB and remote-paths) then add an
     entry to this option with a high valid-interval.

     Examples: An entry (".*sourceforge.*" .  3600) ensures that all
     remote hosts machting the string "sourceforge" will only once
     pinged during one hour.  Or (".*" .  300) would ensure that every
     remote host would be pinged only once during 5 minutes.

 -- User Option: ping-options
     List of options for the ping program.  These options can be used to
     limit how many ICMP packets are emitted.  Ping is used to test if a
     remote host of a remote path (e.g.  a tramp-, ange-ftp- or
     efs-path) is accessible See also 'ecb-ping-program'.

 -- User Option: ping-program
     Program to send network test packets to a host.  See also
     'ecb-ping-options'.

 -- User Option: prescan-directories-exclude-regexps
     Which directories should be excluded from the empty-prescan.  If a
     directory matches any of the regexps of this option it will not be
     prescanned for emptyness - This option takes only effect if
     'ecb-prescan-directories-for-emptyness' is not nil.

 -- User Option: show-sources-in-directories-buffer
     Show source files in directories buffer.

 -- User Option: source-path
     Paths where to find code sources.  Each path can have an optional
     alias that is used as it's display name.  If no alias is set, the
     path is used as display name.

     Lisp-type of tis option: The value must be a list L whereas each
     element of L is either
        - a simple string which has to be the full path of a directory
          (this string is displayed in the directory-browser of ECB) or

        - a 2-elemet list whereas the first element is the full path of
          a directory (string) and the second element is an arbitrary
          alias (string) for this directory which is then displayed
          instead of the underlying directory.

 -- User Option: use-speedbar-instead-native-tree-buffer
     If true then uses speedbar for directories, sources or methods.
     This means that speedbar is integrated in the ECB-frame and is
     displayed in that window normally displaying the standard
     ECB-directories-buffer, ECB-sources-buffer or ECB-methods-buffer.

     This option takes effect in all layouts which contain either a
     directory window, a sources window or a method window.

     This option can have four valid values:
        - 'nil': Do not use speedbar (default)
        - 'dir': Use speedbar instead of the standard directories-buffer
        - 'source': Use speedbar instead of the standard sources-buffer
        - 'method': Use speedbar instead of the standard methods-buffer

     Note: For directories and sources a similar effect and usability is
     available by setting this option to 'nil' (or 'method') and setting
     'ecb-show-sources-in-directories-buffer' to not 'nil', because this
     combination displays also directories and sources in one window.

     'ecb-use-speedbar-instead-native-tree-buffer' is for people who
     like the speedbar way handling directories and source-files or
     methods and want it in conjunction with ECB.


File: ecb.info,  Node: ecb-sources,  Next: ecb-methods,  Prev: ecb-directories,  Up: Customizable options

7.3.4 Group ecb-sources
-----------------------

This group contains settings for the sources-buffer in the ECB:

 -- User Option: read-only-check-exclude-regexps
     Which directories should be excluded from the
     sources-read-only-check.  If a directory matches any of the regexps
     of this option their sources will not be checked if they are
     writable - This option takes only effect if
     'ecb-sources-perform-read-only-check' is not nil.

 -- User Option: show-source-file-extension
     Show the file extension of source files.

 -- User Option: source-file-regexps
     Specifies which files are shown as source files.

     This is done on directory-base, which means for each
     directory-regexp the files to display can be specified.  If more
     than one directory-regexp matches the current selected directory
     then always the first one (and its related
     file-exclude/include-regexps) is used!  If no directory-regexp
     matches then all files are displayed for the currently selected
     directory.

     Important note: It is recommended that the *LAST* element of this
     list should contain an always matching directory-regexp ('".*"')!

     So the value of this option is a list of cons-cells where the car
     is a directory regexp and the cdr is a 2 element list where the
     first element is a list of exclude regexps and the second element
     is a list of include regexps.  A file is displayed in the
     source-buffer of ECB iff: The file does not match any of the
     exclude regexps OR the file matches at least one of the include
     regexps.

     But regardless of the value of this option a file F is never
     displayed in the sources-buffer if the directory matches
     'ecb-sources-exclude-cvsignore' and the directory contains a file
     .cvsignore which contains F as an entry!

     There are three predefined and useful combinations of an exclude
     and include regexp:

        * All files

        * All, but no backup, object, lib or ini-files (except .emacs
          and .gnus).  This means all files except those starting with
          ".", "#" or ending with "~", ".elc", ".obj", ".o", ".lib",
          ".dll", ".a", ".so".  (but including .emacs and .gnus)

        * Common source file types (.c, .java etc.)

     In addition to these predefined values a custom exclude and include
     combination can be defined.

     Tips for the directory- and file-rexexps: '"$^"' matches no
     files/directories, '".*"' matches all files/directories.

 -- User Option: sources-buffer-after-create-hook
     Local hook running after the creation of the sources-buffer.  Every
     function of this hook is called once without arguments direct after
     creating the sources-buffer of ECB and it's local key-map.  So for
     example a function could be added which performs calls of
     'local-set-key' to define new keybindings only for the
     sources-buffer of ECB.

 -- User Option: sources-buffer-name
     Name of the ECB sources buffer.  Because it is not a normal buffer
     for editing you should enclose the name with stars, e.g.  "*ECB
     Sources*".

     If it is necessary for you you can get emacs-lisp access to the
     buffer-object of the ECB-sources-buffer by this name, e.g.  by a
     call of 'set-buffer'.

     Changes for this option at runtime will take affect only after
     deactivating and then activating ECB again!

 -- User Option: sources-exclude-cvsignore
     Specify if files contained in a '.cvsignore' should be excluded.

     Value is a list of regular expressions or nil.  If you want to
     exclude files listed in a '.cvsignore'-file from being displayed in
     the ecb-sources-buffer then specify a regexp for such a directory.

     If you want to exclude the contents of '.cvsignore'-files for every
     directory then you should add one regexp ".*" which matches every
     directory.

     If you never want to exclude the contents of '.cvsignore'-files
     then set this option to nil.

 -- User Option: sources-menu-sorter
     Function which re-sorts the menu-entries of the directories buffer.

     If a function then this function is called to sort the menu-entries
     of the combined menu-entries of the user-menu-extensions of
     'ecb-sources-menu-user-extension' and the built-in-menu
     'ecb-sources-menu'.  If nil then no special sorting will be done
     and the user-extensions are placed in front of the
     built-in-entries.

     For the guidelines for such a sorter-function see
     'ecb-directories-menu-sorter'.

 -- User Option: sources-menu-user-extension
     Static user extensions for the popup-menu of the sources buffer.
     For further explanations see 'ecb-directories-menu-user-extension'.

     The node-argument of a menu-function contains as data the source
     for which the popup-menu has been opened.  Use always
     'ecb-source-get-*' to extract whatever you need from the node-data.
     E.g.  use 'ecb-source-get-filename' to get the full filename of the
     source of the node.

     Per default the static user-extensions are added at the beginning
     of the built-in menu-entries of 'ecb-sources-menu' but the whole
     menu can be re-arranged with 'ecb-sources-menu-sorter'.

 -- User Option: sources-menu-user-extension-function
     Dynamic user extensions for the popup-menu of the sources buffer.
     A function which has to return a list in the same format like the
     option 'ecb-sources-menu-user-extension'.  This function is called
     when the user opens the popup-menu for the sources buffer.

     If no dynamically evaluated menu-extensions should be added to the
     sources-buffer the function has to return nil.  Therefore the
     default-value of this option is 'ignore'.

     Per default the dynamic user-extensions are added in front of the
     static extensions of 'ecb-sources-menu-user-extension' but the
     whole menu can be re-arranged with 'ecb-sources-menu-sorter'.

 -- User Option: sources-perform-read-only-check
     Check if source-items in the tree-buffers are read-only.  If a
     sourcefile is read-only then it will be displayed with that face
     set in the option 'ecb-source-read-only-face'.

     Because this check can be take some time if files are used via a
     mounted net-drive ECB performs this check stealthily (see
     'ecb-stealthy-tasks-delay') so normally the user should not see a
     performance-decrease or additional waiting-time.  But to get sure
     this option offers three choices: 't', 'unless-remote' and 'nil'.
     See 'ecb-prescan-directories-for-emptyness' for an explanation for
     these three choices.

     The option 'ecb-read-only-check-exclude-regexps' offers are more
     fine granularity to exclude the sources of certain directories from
     the read-only state-check.

 -- User Option: sources-show-node-info
     When to display which node-info in the sources-buffer.  Define
     which node info should be displayed after moving the mouse over a
     node (or after a shift click onto the node) in the sources-buffer.

     You can define "when" a node-info should be displayed: See
     'ecb-directories-show-node-info' for the possible choices.

        - name: Only the full node-name is displayed.
        - file-info: File infos for this file are displayed.
        - file-info-full: Fill infos incl.  full path for this file are
          displayed.

     Do NOT set this option directly via setq but use always customize!

 -- User Option: sources-sort-ignore-case
     Ignore case for sorting the source-files of the Sources-buffer.
     See also 'ecb-sources-sort-method'.

 -- User Option: sources-sort-method
     Defines how the source files are sorted.

        - 'name': Sorting by name.
        - 'extension': Sorting first by extension and then by name.
        - 'nil': No sorting, means source files are displayed in the
          sequence returned by 'directory-files' (called without
          sorting).

     See also 'ecb-sources-sort-ignore-case'


File: ecb.info,  Node: ecb-methods,  Next: ecb-history,  Prev: ecb-sources,  Up: Customizable options

7.3.5 Group ecb-methods
-----------------------

This group contains settings for the methods-buffer in the ECB:

 -- User Option: auto-expand-tag-tree
     Expand the methods-tag-tree automatically if node invisible.

     This option has only an effect if option
     'ecb-highlight-tag-with-point' is switched on too.  There are three
     possible choices:
        - 'nil': No auto.  expanding of the method buffer.
        - 'expand-spec': Auto expand the method-buffer nodes if the node
          belonging to current tag under point is invisible because its
          parent-node is collapsed.  But expanding is only done if the
          type of the tag under point in the edit-buffer is contained in
          'ecb-methods-nodes-expand-spec'.
        - 'all': Like expand-spec but expands all tags regardless of the
          setting in 'ecb-methods-nodes-expand-spec'.

     This options takes only effect for semantic-sources - means sources
     supported by semantic!

 -- User Option: auto-expand-tag-tree-collapse-other
     Auto.  expanding the tag-tree collapses all not related nodes.
     There are several choices:

        - Only if on tag: This means collapsing all nodes which have no
          relevance for the currently highlighted node will be
          collapsed, because they are not necessary to make the
          highlighted node visible.  But do this only if point stays
          onto a tag in the selected edit-window.

        - Always: Same as before but collapse also when point doesn't
          stays on a tag (e.g.  between two defuns in elisp) in the
          selected edit-window.  This means in such a situation a full
          collapsing of the methods-buffer.

        - Never: Do not automatically collapse the methods-buffer.

 -- User Option: auto-update-methods-after-save
     Automatically updating the ECB method buffer after saving a source.

 -- User Option: default-tag-filter
     Default tag-filters for certain files.  This option allow to define
     default tag-filters for certain files which are applied
     automatically after loading such a file into a buffer.  The
     possible filters are the same as offered by the command
     'ecb-methods-filter' and they are applied in the same manner - the
     only difference is they are applied automatically.  Please be aware
     that symbol-filters (e.g.  protection-symbols like public or
     private) must not be inserted with quotes whereas a filter-regexp
     has to be inserted with surrounding double-quotes!  In addition
     backslashes in a regexp have to be doubled!

     For each file-spec (a major-mode plus a file-regexp which both
     specify a file for which filters should be applied) there can be as
     much filters as needed - they are layered like with
     'ecb-methods-filter' too.

     Tag-classes which are completely hidden or excluded by the option
     'ecb-show-tags' will never being displayed in the Methods-buffer
     regardless of the filters of this option!

 -- User Option: disable-semantic-threshold-alist
     Threshold for disabling semantic-parsing Define a threshold fpr
     buffer-size.  Exceeding this threshold disables parsing current
     buffer by semantic.

     This functionality is set on a major-mode base, i.e.  for every
     major-mode a different setting can be used.  The value of this
     option is a list of cons-cells:

        - The car is either a major-mode symbol or the special symbol
          'default which means if no setting for a certain major-mode is
          defined then the cdr of the 'default cons-cell is used.
        - The cdr is an integer which defines the threshold for the
          buffer-size for this major-mode.

     Example:

            ((default . 1000000)
              (c-mode . 200000))

     This example whould not parse c-mode buffers exceeding a
     buffer-size of 200000.  And buffers of all other modes would be
     only parsed if smaller than 1000000.

     A setting of '((c-mode . 200000))' would only restrict c-mode
     buffers to a size of 200000 but would parse all other buffer
     regardless their size.

 -- User Option: display-image-icons-for-semantic-tags
     Display nice and pretty icons for semantic-tags in the
     Methods-buffer.  A non nil value takes only effect if Emacs can
     display images and if 'ecb-tree-buffer-style' is set to 'image'.

 -- User Option: exclude-parents-regexp
     Regexps which parent classes should not be shown in the methods
     buffer (see also 'ecb-show-parents').  If nil then all parents will
     be shown if 'ecb-show-parents' is not nil.

     This options takes only effect for semantic-sources - means sources
     supported by semantic!

 -- User Option: expand-methods-switch-off-auto-expand
     Switch off auto expanding in the ECB-method buffer.  If on then
     auto expanding is switched off after explicit expanding or
     collapsing by 'ecb-expand-methods-nodes'.

     This is done with 'ecb-toggle-auto-expand-tag-tree' so after the
     switch off the auto expanding feature can again switched on
     quickly.

     But after explicitly expanding/collapsing the methods-buffer to a
     certain level the auto.  expanding could undo this when the node
     belonging to current tag under point in the current active
     edit-window is invisible after 'ecb-expand-methods-nodes' - then
     the auto.  expand feature would make this node immediately visible
     and destroys the explicitly set expand-level.

 -- User Option: find-external-tag-functions
     Functions used for searching external tags clicked in the methods
     buffer.

     The methods buffer displays for oo-languages the parents of a type
     under a special bucket "Parents".  Languages like C++, CLOS and
     Eieio allow to define the implementation of a method outside of the
     class definition and even in another file.  In the methods-buffer
     of ECB such externaly defined methods are collected and displayed
     under a 'virtual' faux type-tag named as the class-qualifier of the
     methods.  This faux-tag is virtual because it does not extist in
     the parsed buffer.

     If a user clicks either onto such a faux-type-tag or onto a
     parent-tag then ECB tries to find the definition of the underlying
     type on a name-basis, displaying the containing file as buffer in
     the current edit-window and jumping to the start of the
     type-definition in this buffer.

     Finding such external types can be very complex and there are
     several roads to success.  ECB uses per default methods based on
     the semantic-analyzer.  But this option allows to define own
     find-functions and tell ECB to uses them.

     This functionality is set on a 'major-mode' base, i.e.  for every
     'major-mode' a different setting can be used.  The value of this
     option is a list of cons-cells: The car is either a 'major-mode'
     symbol or the special symbol 'default.  The cdr is a list of
     find-functions or nil.

     ECB first performs all find-functions defined for current
     'major-mode' (if any) anf then all find-functions defined for the
     special symbol 'default (if any).

     ECB offers some predefined senseful finding-functions.  Currently
     there are:
        * 'ecb-search-type-tag-by-semantic-analyzer' (most powerful)
        * 'ecb-search-type-tag-by-semanticdb'
        * 'ecb-jde-show-class-source' (for major-mode 'jde-mode' when
          coding in java)

     This function does not only the searching but displays the founded
     tag.  See the documentation of these function for details how they
     work.

     But you can add any arbitrary function if the following conditions
     are fulfilled:

        * The function gets a semantic tag representing the external
          type which should be found.  This is a positionless-tag
          (otherwise it would not be hard to go to it) and it's either a
          faux-tag (for which 'ecb--semantic-faux-tag-p' is not nil; the
          function can use this check if necessary) or a simple tag
          containing only a name an a tag-class.  The tag-class for both
          is 'type.

        * The return value of the function must be one of:
             - 'nil': No tag is found
             - 't': A tag has been found and also be displayed in the
               edit-window (this prevents ECB from running further
               function of this option because the searched tag is
               already displayed.  So a function should only return 't'
               if all is fine and no further actions are needed.
             - A positioned semantic tag (for which
               'ecb--semantic-tag-with-position-p' returns not 'nil')
               which represents the found external type-tag.

     It's strongly recommended for the function not to display the found
     location for itself but to return a positioned semantic tag!  But
     sometimes the displaying is integrated in a third-party
     find-function like 'jde-show-class-source' which is used by
     'ecb-jde-show-class-source'.  In these cases the function has to
     return t if the searched tag has been successfully displayed.

     Precondition for a find-function: Current buffer is the buffer the
     clicked faux- or parent tag belongs to Current point depends on the
     clicked tag:
        * In case of a faux-tag it's the start of the first child of the
          faux-tag.  There must be at least one adopted child-tag
          because otherwise we would not have the faux-tag
        * In case of an external parent-tag its the the start of the
          external tag itself.

 -- User Option: font-lock-tags
     Adds font-locking (means highlighting) to the ECB-method buffer.

     This options takes only effect for semantic-sources - means sources
     supported by semantic!

 -- User Option: highlight-tag-with-point
     How to highlight the method or variable under the cursor.

        - 'highlight-scroll': Always scroll the method buffer, so the
          current method of the edit-window is highlighted in the
          method-window.
        - 'highlight': Only highlight the current method of the edit
          window in the method window if the method is visible in the
          method-window.
        - 'nil': No highlighting is done.

     See also 'ecb-highlight-tag-with-point-delay'.

     This options takes only effect for semantic-sources - means sources
     supported by semantic!

 -- User Option: highlight-tag-with-point-delay
     Time Emacs must be idle before current tag is highlighted.  If nil
     then there is no delay, means current tag is highlighted
     immediately.  A small value of about 0.25 seconds saves CPU
     resources and you get even though almost the same effect as if you
     set no delay.  But such a delay prevents also "jumping
     backward/forward" during scrolling within java-classes if point
     goes out of method-definition into class-definition.  Therefore the
     default value is a delay of 0.25 seconds.

     This options takes only effect for semantic-sources - means sources
     supported by semantic!

 -- User Option: methods-buffer-after-create-hook
     Local hook running after the creation of the methods-buffer.  Every
     function of this hook is called once without arguments direct after
     creating the methods-buffer of ECB and it's local key-map.  So for
     example a function could be added which performs calls of
     'local-set-key' to define new keybindings only for the
     methods-buffer of ECB.

 -- User Option: methods-buffer-name
     Name of the ECB methods buffer.  Because it is not a normal buffer
     for editing you should enclose the name with stars, e.g.  " *ECB
     Methods*".

     If it is necessary for you you can get emacs-lisp access to the
     buffer-object of the ECB-methods-buffer by this name, e.g.  by a
     call of 'set-buffer'.

     Changes for this option at runtime will take affect only after
     deactivating and then activating ECB again!

 -- User Option: methods-filter-replace-existing
     How the methods-filter should be applied to existing filters.
     There are three different choices:

        - 'never': This is the default and means that calling
          'ecb-methods-filter' always adds the new filter on top of
          already existing filters.  So you can combine several filter
          to one combined like this example: 'Display only all public
          methods having the string "test" in its name.'  With this
          setting the filters can only be cleared by calling
          'ecb-methods-filter' and then choosing "nothing".

        - 'always': This means that 'ecb-methods-filter' always clears a
          previous filter before applying the new one.

        - 'ask': ECB asks if the new filter should replace the existing
          ones.

 -- User Option: methods-menu-sorter
     Function which re-sorts the menu-entries of the directories buffer.

     If a function then this function is called to sort the menu-entries
     of the combined menu-entries of the user-menu-extensions of
     'ecb-methods-menu-user-extension' and the built-in-menu
     'ecb-methods-menu'.  If nil then no special sorting will be done
     and the user-extensions are placed in front of the
     built-in-entries.

     For the guidelines for such a sorter-function see
     'ecb-directories-menu-sorter'.

 -- User Option: methods-menu-user-extension
     Static user extensions for the popup-menu of the methods buffer.
     For further explanations see 'ecb-directories-menu-user-extension'.

     The node-argument of a menu-function contains as data the
     semantic-tag of the method/variable/tag for which the popup-menu
     has been opened.

     Per default the static user-extensions are added at the beginning
     of the built-in menu-entries of 'ecb-methods-menu' but the whole
     menu can be re-arranged with 'ecb-methods-menu-sorter'.

 -- User Option: methods-menu-user-extension-function
     Dynamic user extensions for the popup-menu of the methods buffer.
     A function which has to return a list in the same format like the
     option 'ecb-methods-menu-user-extension'.  This function is called
     when the user opens the popup-menu for the methods buffer.  For an
     example how such a function can be programmed see
     'ecb-methods-menu-editwin-entries'.

     If no dynamically evaluated menu-extensions should be added to the
     methods-buffer the function has to return nil.  Therefore the
     default-value of this option is 'ignore'.

     Per default the dynamic user-extensions are added in front of the
     static extensions of 'ecb-methods-menu-user-extension' but the
     whole menu can be re-arranged with 'ecb-methods-menu-sorter'.

 -- User Option: methods-nodes-collapse-spec
     Semantic tag-types collapsed by 'ecb-expand-methods-nodes'.  For
     valid values of this option see 'ecb-methods-nodes-expand-spec'!

     This options takes only effect for semantic-sources - means sources
     supported by semantic!

 -- User Option: methods-nodes-expand-spec
     Semantic tag-types expanded by 'ecb-expand-methods-nodes'.

     The value of this option is either the symbol 'all' (all tags are
     expanded regardless of their type) or a list of symbols where each
     symbol is a valid semantic tag-type.  For a description of semantic
     tag types see option 'ecb-show-tags'.

     But this option also defines if bucket-nodes in the
     ECB-method-buffer (e.g.  "[Variables]") should be expanded.
     Therefore valid symbols for this list are also all cars of the
     variable returned by 'ecb--semantic-symbol->name-assoc-list'.

     If there is a bucket-name (the node-name stripped of the settings
     in 'ecb-bucket-node-display') which is not contained as cdr in the
     value returned by 'ecb--semantic-symbol->name-assoc-list' then the
     symbol with this bucket-name as name is also a valid symbol for
     this list.  Example: In ECB there are buckets "[Parents]".  The
     bucket-name is "Parents" and the valid symbol-name is then
     'Parents'.

     This options takes only effect for semantic-sources - means sources
     supported by semantic!

 -- User Option: methods-separate-prototypes
     Separate function-prototypes from the real functions.  This is for
     example useful for C++ and C because these languages distinct
     between a method-prototype (rsp.  function-prototype for C) and the
     method (rsp.  function for C) itself.  If this option is not nil
     then ECB separates the prototypes from the real function/methods.
     Then with 'ecb-show-tags' the user can define different
     display-settings for each of them.  If this option is nil then the
     prototypes and the real functions are filled in the same bucket and
     displayed plain and there is no sorting between prototypes and
     functions possible.  If this option is switched on then it is
     senseful that 'ecb-show-tags' contains for all modes which distinct
     between prototypes and real functions/methods two entries for the
     tag-type 'function - see the documentation of this option.

 -- User Option: methods-show-node-info
     When to display which node-info in the methods-buffer.  Define
     which node info should displayed after moving the mouse over a node
     (or after a shift click onto the node) in the methods-buffer.

     You can define "when" a node-info should be displayed: See
     'ecb-directories-show-node-info' for the possible choices.

     You can define what info should be displayed:
        - name: Only the full node name is displayed.

        - name+type: The full name + the type of the node (function,
          class, variable) is displayed.

     Do NOT set this option directly via setq but use always customize!

 -- User Option: post-process-semantic-taglist
     Define mode-dependent post-processing for the semantic-taglist.
     This is an alist where the car is a major-mode symbol and the cdr
     is a list of function-symbols of functions which should be used for
     post-processing the taglist (returned by
     'ecb--semantic-bovinate-toplevel') for a buffer in this major-mode.
     The first function in the list is called with current semantic
     taglist of current buffer and must return a valid taglist again.
     All other functions are called with the result-taglist of its
     preceding function and have to return a new taglist again.

     For oo-programming languages where the methods of a class can be
     defined outside the class-definition (e.g.  C++, Eieio) the
     function 'ecb-group-function-tags-with-parents' can be used to get
     a much better method-display in the methods-window of ECB, because
     all method implementations of a class are grouped together.

     Another senseful usage is to filter out certain tags, e.g.
     prototype tags in 'c-mode'.  For this you can set
     'ecb-filter-c-prototyp-tags'.

     This options takes only effect for semantic-sources - means sources
     supported by semantic!

 -- User Option: show-only-positioned-tags
     Show only nodes in the method-buffer which are "jump-able".  If not
     nil then ECB displays in the method-buffer only nodes which are
     "jump-able", i.e.  after selecting it by clicking or with RET then
     ECB jumps to the corresponding location in the edit-window.
     Example: With CLOS or Eieio source-code there can exist some
     position-less nodes like variable-attributes in a 'defclass' form
     which are only displayed if this option is nil.  Displaying such
     nodes can be senseful even if they can not be jumped.

     This options takes only effect for semantic-sources - means sources
     supported by semantic!

 -- User Option: show-tags
     How to show tags in the methods buffer first time after find-file.
     This functionality is set on a major-mode base, i.e.  for every
     major-mode a different setting can be used.  The value of this
     option is a list of cons-cells:

     The car is either a major-mode symbol or the special symbol
     'default which means if no setting for a certain major-mode is
     defined then the cdr of the 'default cons-cell is used.  This
     option should always contain a default-setting!

     The cdr is a list where each element represents a type of tags:

          (<tag type> <display type> <sort method>)

     There can be more than 1 element for a certain <tag type>.  This is
     for example useful for C++ and C because these languages distinct
     between a method-prototype (rsp.  function-prototype for C) and the
     method (rsp.  function for C) itself.  The default value of these
     option contains two entries for <tag type> is 'function' whereas
     the first one is responsible for the "real" methods (rsp.
     functions) and the second one for the prototypes.  So if the
     methods should be flattened and the prototypes collapsed the
     show-tags-list for C++ and C must contain two entries for <tag
     type> 'function', the first one defined as 'flattened' and the
     second one defined as 'collapsed'.

     The tags in the methods buffer are displayed in the order as they
     appear in this list.

     '<tag type>'
          A Semantic tag type symbol (function, variable, rule, include
          etc.)  or one of the following:

             - 't': All tag types not specified anywhere else in the
               list.
             - 'parent': The parents of a type.

     '<display type>'
          A symbol which describes how the tags of this type shall be
          shown:

             - 'expanded': The tags are shown in an expanded node.
             - 'collapsed': The tags are shown in a collapsed node.
             - 'flattened': The tags are added to the parent node.
             - 'hidden': The tags are not shown.

     '<sort method>'
          A symbol describing how to sort the tags of this type:

             - 'name': Sort by the tag name.
             - 'access': Sort by tag access (public, protected, private)
               and then by name.
             - 'nil': Don't sort tags.  They appear in the same order as
               in the source buffer.

     This options takes only effect for semantic-sources - means sources
     supported by semantic!

 -- User Option: tag-display-function
     Function to use for displaying tags in the methods buffer.  This
     functionality is set on major-mode base, i.e.  for every major-mode
     a different function can be used.  The value of this option is a
     list of cons-cells:

        - The car is either a major-mode symbol or the special symbol
          'default which means if no function for a certain major-mode
          is defined then the cdr of the 'default cons-cell is used.
        - The cdr is the function used for displaying a tag in the
          related major-mode.

     Every function is called with 3 arguments:

       1. The tag
       2. The parent-tag of tag (can be nil)
       3. The value of 'ecb-font-lock-tags'.

     Every function must return the display of the tag as string,
     colorized if the third argument is not nil.

     The following functions are predefined:

        * For each element E of 'ecb--semantic-format-function-alist'
          exists a function with name "ecb-<(cdr E)>".  These functions
          are just aliase to the builtin format-functions of semantic.
          See the docstring of these functions to see what they do.
          Example: (semantic-name-nonterminal .
          semantic-format-tag-name) is an element of
          'ecb--semantic-format-function-alist'.  Therefore the
          alias-function for this element is named
          'ecb--semantic-format-tag-name'.

        * For every cdr in 'ecb--semantic-format-function-alist' with
          name "semantic-XYZ" a function with name "ecb-XYC" is
          predefined.  The differences between the semantic- and the
          ECB-version are:

             - The ECB-version displays for type tags only the type-name
               and nothing else (exception: In c++-mode a template
               specifier is appended to the type-name if a template
               instead a normal class).
             - The ECB-version displays type-tags according to the
               setting in 'ecb-type-tag-display'.  This is useful for
               better recognizing different classes, structs etc.  in
               the ECB-method window.

          For all tags which are not types the display of the
          ECB-version is identical to the semantic version.  Example:
          For 'ecb--semantic-format-tag-name' (one of the builtin
          semantic formatters) the pendant is 'ecb-format-tag-name'.

     This functionality also allows the user to display tags as UML. To
     enable this functionality set the function for a major-mode \(e.g.
     'jde-mode') to 'ecb--semantic-format-tag-uml-concise-prototype',
     'ecb--semantic-format-tag-uml-prototype', or
     'ecb--semantic-format-tag-uml-abbreviate' the ECB-versions of these
     functions.

     If the value is 'nil', i.e.  neither a function for a major-mode is
     defined nor the special 'default, then
     'ecb--semantic-format-tag-prototype' is used for displaying the
     tags.

     This options takes only effect for semantic-sources - means sources
     supported by semantic!

 -- User Option: tag-jump-sets-mark
     Set the mark after jumping to a tag from the ECB-method buffer.  If
     set the user can easily jump back.

 -- User Option: tag-visit-post-actions
     Actions to perform after visiting a tag from the Method-buffer.
     With this option actions can be added which will be performed after
     visiting the start of the tag in the source-buffer.

     This functionality is set on a 'major-mode' base, i.e.  for every
     'major-mode' a different setting can be used.  The value of this
     option is a list of cons-cells:
        - The car is either a 'major-mode' symbol or the special symbol
          'default.

        - The cdr is a list of action-functions or nil.

     ECB first performs all actions defined for the special symbol
     'default (if any) and then all actions defined for current
     'major-mode' (if any).

     ECB offers some predefined senseful action-functions.  Currently
     there are: 'ecb-tag-visit-highlight-tag-header'
     'ecb-tag-visit-smart-tag-start' 'ecb-tag-visit-recenter'
     'ecb-tag-visit-recenter-top' 'ecb-tag-visit-goto-doc-start'
     'ecb-tag-visit-narrow-tag' See the documentation of these function
     for details what they do.

     But you can add any arbitrary function if the following conditions
     are fulfilled: The function gets the semantic tag as argument,
     returns the (new) point after finishing its job and the function
     must not put the point outside the tag-boundaries of the
     tag-argument.

 -- User Option: type-tag-display
     How to display semantic type-tags in the methods buffer.  Normally
     all tag displaying, colorizing and facing is done by semantic
     according to the value returned by
     'ecb--semantic-format-face-alist' and the semantic display-function
     (e.g.  one from 'ecb--semantic-format-tag-functions').  But
     sometimes a finer distinction in displaying the different type
     specifiers of type-tags can be useful.  For a description when this
     option is evaluated look at 'ecb-tag-display-function'!

     This functionality is set on a major-mode base, i.e.  for every
     major-mode a different setting can be used.  The value of this
     option is a list of cons-cells:

        * The car is either a major-mode symbol or the special symbol
          'default which means if no setting for a certain major-mode is
          defined then the cdr of the 'default cons-cell is used.

        * The cdr is a list of 3-element-lists:

            1. First entry is a semantic type specifier in string-form.
               Current available type specifiers are for example
               "class", "interface", "struct", "typedef" and "enum".  In
               addition to these ones there is also a special ECB type
               specifier "group" which is related to grouping tags (see
               'ecb-post-process-semantic-taglist' and
               'ecb-group-function-tags-with-parents').  Any arbitrary
               specifier can be set here but if it is not "group" or not
               known by semantic it will be useless.
            2. Second entry is a flag which indicates if the
               type-specifier string from (1.)  itself should be removed
               (if there is any) from the display.
            3. Third entry is the face which is used in the ECB-method
               window to display type-tags with this specifier.  ECB has
               some predefined faces for this
               ('ecb-type-tag-class-face',
               'ecb-type-tag-interface-face',
               'ecb-type-tag-struct-face', 'ecb-type-tag-typedef-face',
               'ecb-type-tag-union-face', 'ecb-type-tag-enum-face' and
               'ecb-type-tag-group-face') but any arbitrary face can be
               set here.  This face is merged with the faces semantic
               already uses to display a tag, i.e.  the result is a
               display where all face-attributes of the ECB-face take
               effect plus all face-attributes of the semantic-faces
               which are not set in the ECB-face (with XEmacs this merge
               doesn't work so here the ECB-face replaces the
               semantic-faces; this may be fixed in future versions).

     The default value is nil means there is no special ECB-displaying
     of type-tags in addition to the displaying and colorizing semantic
     does.  But a value like the following could be a useful setting:

          ((default
             ("class" t ecb-type-tag-class-face)
             ("group" nil ecb-type-tag-group-face))
           (c-mode
            ("struct" nil ecb-type-tag-struct-face)
            ("typedef" nil ecb-type-tag-typedef-face)))

     This means that in 'c-mode' only "struct"s and "typedef"s are
     displayed with special faces (the specifiers itself are not
     removed) and in all other modes "class"s and grouping-tags (see
     'ecb-tag-display-function', 'ecb-group-function-tags-with-parents')
     have special faces and the "class" specifier-string is removed from
     the display.

     This options takes only effect for semantic-sources - means sources
     supported by semantic!

 -- User Option: type-tag-expansion
     Default expansion of semantic type-tags.  Semantic groups type-tags
     in different type-specifiers.  Current available type specifiers
     are for example "class", "interface", "struct", "typedef", "union"
     and "enum".  In addition to these ones there is also a special ECB
     type-specifier "group" which is related to grouping tags (see
     'ecb-post-process-semantic-taglist').

     This option defines which type-specifiers should be expanded at
     file-open-time.  Any arbitrary specifier can be set here but if it
     is not "group" or not known by semantic it will be useless.

     This functionality is set on a major-mode base, i.e.  for every
     major-mode a different setting can be used.  The value of this
     option is a list of cons-cells:

        * The car is either a major-mode symbol or the special symbol
          'default' which means if no setting for a certain major-mode
          is defined then the cdr of the 'default' cons-cell is used.

        * The cdr is either a list of type-specifiers which should be
          expanded at file-open-time or the symbol 'all-specifiers'
          (then a type-tag is always expanded regardless of its
          type-specifier).

     This options takes only effect for semantic-sources - means sources
     supported by semantic!


File: ecb.info,  Node: ecb-history,  Next: ecb-analyse,  Prev: ecb-methods,  Up: Customizable options

7.3.6 Group ecb-history
-----------------------

This group contains settings for the history-buffer in the ECB:

 -- User Option: history-buffer-after-create-hook
     Local hook running after the creation of the history-buffer.  Every
     function of this hook is called once without arguments direct after
     creating the history-buffer of ECB and it's local key-map.  So for
     example a function could be added which performs calls of
     'local-set-key' to define new keybindings only for the
     history-buffer of ECB.

 -- User Option: history-buffer-name
     Name of the ECB history buffer.  Because it is not a normal buffer
     for editing you should enclose the name with stars, e.g.  "*ECB
     History*".

     If it is necessary for you you can get emacs-lisp access to the
     buffer-object of the ECB-history-buffer by this name, e.g.  by a
     call of 'set-buffer'.

     Changes for this option at runtime will take affect only after
     deactivating and then activating ECB again!

 -- User Option: history-exclude-file-regexps
     List of regexps which exclude source-files from being historized.
     Be aware that each always full filenames (ie.  incl.  full path)
     are matched against these regexps!  Therefore be carefore with
     regexps beginning with ^!

 -- User Option: history-item-name
     The name to use for items in the history buffer.

 -- User Option: history-make-buckets
     Bucketize the entries of the history-buffer.

     There are several options how the bucketizing should be done:
        * 'never:

          No bucketizing at all, ie.  all entries of the history-buffer
          we be displayed flat.

        * 'directory:

          All entries with related filesources residing in the same
          directory will be contained in a bucket named with that
          directory.

        * 'directory-with-source-path:

          Same as 'directory but the best matching source-path of the
          directory-window (see 'ecb-source-path') substituts the
          matching part of the directory.  For this a special face is
          used (see 'ecb-history-bucket-node-dir-soure-path-face').

        * 'mode:

          All entries with related buffers have the same major-mode will
          be contained in a bucket named with that major-mode

        * 'extension:

          All entries with related filesources having the same extension
          will be contained in a bucket named with that extension

     If the value is a list of regular expressions then all entries
     where the buffername matches the same regular expression will be
     contained in one bucket.  If the value is nil then this is
     interpreted as an empty list of regular expressions!

     The default value is 'directory.

 -- User Option: history-menu-sorter
     Function which re-sorts the menu-entries of the directories buffer.

     If a function then this function is called to sort the menu-entries
     of the combined menu-entries of the user-menu-extensions of
     'ecb-history-menu-user-extension' and the built-in-menu
     'ecb-history-menu'.  If nil then no special sorting will be done
     and the user-extensions are placed in front of the
     built-in-entries.

     For the guidelines for such a sorter-function see
     'ecb-directories-menu-sorter'.

 -- User Option: history-menu-user-extension
     Static user extensions for the popup-menu of the history buffer.
     For further explanations see 'ecb-directories-menu-user-extension'.

     The node-argument of a menu-function contains as data a cons:

     car is the filename of the source for which the popup-menu has been
     opened.  cdr is the related buffer-name; but be careful, because
     the node can point to a dead buffer (see
     'ecb-kill-buffer-clears-history').  Use always 'ecb-source-get-*'
     to extract whatever you need from the node-data.  E.g.  use
     'ecb-source-get-filename' to get the full filename of the source of
     the node and use 'ecb-source-get-buffername' or
     'ecb-source-get-buffer' to get the buffername rsp.  the
     buffer-object.

     Per default the static user-extensions are added at the beginning
     of the built-in menu-entries of 'ecb-history-menu' but the whole
     menu can be re-arranged with 'ecb-history-menu-sorter'.

 -- User Option: history-menu-user-extension-function
     Dynamic user extensions for the popup-menu of the history buffer.
     A function which has to return a list in the same format like the
     option 'ecb-history-menu-user-extension'.  This function is called
     when the user opens the popup-menu for the history buffer.

     If no dynamically evaluated menu-extensions should be added to the
     history-buffer the function has to return nil.  Therefore the
     default-value of this option is 'ignore'.

     Per default the dynamic user-extensions are added in front of the
     static extensions of 'ecb-history-menu-user-extension' but the
     whole menu can be re-arranged with 'ecb-history-menu-sorter'.

 -- User Option: history-show-node-info
     When to display which node-info in the history-buffer.  Define
     which node info should be displayed after moving the mouse over a
     node (or after a shift click onto the node) in the history-buffer.

     You can define "when" a node-info should be displayed: See
     'ecb-directories-show-node-info' for the possible choices.

     You can define "which" info should be displayed:
        * name: Only the full node-name is displayed.
        * path: The full-path of the node is displayed.
        * name-path: The full node-name and the full-path is displayed.

     Do NOT set this option directly via setq but use always customize!

 -- User Option: history-sort-ignore-case
     Ignore case for sorting the history-entries.  See also
     'ecb-history-sort-method'.

 -- User Option: history-sort-method
     Defines how the entries in the history-buffer are sorted.
        - 'name': Sorting by name (default).
        - 'extension': Sorting first by extension and then by name.
        - 'nil': No sorting, means the most recently used buffers are on
          the top of the history and the seldom used buffers at the
          bottom.

     See also 'ecb-history-sort-ignore-case'.

     If the history is bucketized (see 'ecb-history-make-buckets') then
     this sorting applies to the sorting within each bucket.

 -- User Option: history-stick-indirect-buffers-to-basebuffer
     Stick all indirect-buffers as subnodes to their base-buffer.

     If nil then indirect-buffers are treated as non-indirect-buffers
     and sorted into the history-buffer-sequence according to the
     setting of 'ecb-history-sort-method'.

     If not nil then indirect-buffers are always sticked to their
     base-buffer, ie.  the base-buffer is displayed as expandable node
     with all its indirect-buffers as children-nodes, so the history
     looks like:

          [-] <base-buffer BB>
           |  <indirect-buffer 1 of BB>
           `- <indirect-buffer 2 of BB>

 -- User Option: kill-buffer-clears-history
     Define if 'kill-buffer' should also clear the history.  There are
     three options:

        - 'auto': Removes automatically the corresponding history-entry
          after the buffer has been killed.
        - 'ask': Asks, if the history-entry should be removed after the
          kill.
        - 'nil': 'kill-buffer' does not affect the history (this is the
          default).


File: ecb.info,  Node: ecb-analyse,  Next: ecb-symboldef,  Prev: ecb-history,  Up: Customizable options

7.3.7 Group ecb-analyse
-----------------------

 -- User Option: analyse-bucket-element-face
     Basic face for displaying elements of buckets in the
     ECB-analyse-buffer.  This defines the basic face for the elements
     of category-buckets like Context, Prefix, Completions etc.  in the
     ECB-analyse-buffer.

     Changes take first effect after finishing and reactivating ECB!

 -- User Option: analyse-bucket-node-face
     Basic face for displaying a bucket-node in the ECB-analyse-buffer.
     This defines the basic face for the bucket-nodes like Context,
     Prefix, Completions etc.  in the ECB-analyse-buffer.

     Changes take first effect after finishing and reactivating ECB!

 -- User Option: analyse-buffer-after-create-hook
     Local hook running after the creation of the analyse-buffer.  Every
     function of this hook is called once without arguments direct after
     creating the analyse-buffer of ECB and it's local key-map.  So for
     example a function could be added which performs calls of
     'local-set-key' to define new key-bindings only for the
     analyse-buffer of ECB.

 -- User Option: analyse-buffer-name
     Name of the ECB analyse buffer.  Because it is not a normal buffer
     for editing you should enclose the name with stars, e.g.  "*ECB
     Analyse*".

     If it is necessary for you you can get emacs-lisp access to the
     buffer-object of the ECB-analyse-buffer by this name, e.g.  by a
     call of 'set-buffer'.

     Changes for this option at runtime will take affect only after
     deactivating and then activating ECB again!

 -- User Option: analyse-buffer-sync
     Synchronize the analyse buffer automatically with current edit
     buffer.

     If 'always then the synchronization takes place always a buffer
     changes in the edit window, if nil then never.  If a list of
     major-modes then only if the 'major-mode' of the new buffer belongs
     NOT to this list.

     Normally it's not necessary to exclude some major-modes because
     with not-semantic supported major-modes simply nothing happens.
     But maybe it can be helpful for certain situations...

     If the special value 'basic is set then ECB uses the setting of the
     option 'ecb-basic-buffer-sync'.

     IMPORTANT NOTE: Every time the synchronization is done the hook
     'ecb-analyse-buffer-sync-hook' is evaluated.

 -- User Option: analyse-buffer-sync-delay
     Time Emacs must be idle before the analyse-buffer is synchronized.
     Synchronizing is done with the current source displayed in the edit
     window.  If nil then there is no delay, means synchronization takes
     place immediately.

     CAUTION: With analysing a value not too small is strongly
     recommended because it can be very annoying if more or less after
     each typing the current context is analysed.  If set to nil then
     *each* keyboard hit refreshes the analyse-buffer which will make
     ECB quite unusable!

     If the special value 'basic is set then ECB uses the setting of the
     option 'ecb-basic-buffer-sync-delay'

 -- User Option: analyse-buffer-sync-hook
     ook run at the end of 'ecb-analyse-buffer-sync'.  See documentation
     of 'ecb-analyse-buffer-sync' for conditions when synchronization
     takes place and so in turn these hooks are evaluated.

     Preconditions for such a hook:

        * Current buffer is the buffer of the currently selected
          edit-window.

        * The analyse-buffer is displayed in a visible window of the
          ecb-frame (so no check for visibilty of the analyse-buffer in
          the ecb-frame is necessary in a hook function)

     Postcondition for such a hook: Point must stay in the same
     edit-window as before evaluating the hook.

     Important note: If the option 'ecb-analyse-buffer-sync' is not nil
     the function 'ecb-analyse-buffer-sync' is running either every time
     Emacs is idle or even after every command (see
     'ecb-analyse-buffer-sync-delay').  So if the anaylse-buffer is
     displayed in a window of the ecb-frame (see preconditions above)
     these hooks can be really called very often!  Therefore each
     function of this hook should/must check in an efficient way at
     beginning if its task have to be really performed and then do them
     only if really necessary!  Otherwise performance of Emacs could
     slow down dramatically!

 -- User Option: analyse-collapsed-buckets
     Buckets collapsed when displaying the current semantic analysis.
     The semantic analyse-modul offers several categories of analysis
     which are called buckets here.  These are for example:

     Context: The current context, which is the current function/method,
     variable, class etc.  (what exactly depends on the programming
     language) point is in.  This means not the current
     function/method/variable/class-name point stand on but the current
     surrounding context.  Example: If point stays somewhere within a
     defun-definition in emacs-lisp or within a java-method then this
     defun rsp.  method is the context.  In object oriented languages
     this can be the full hierachy, i.e.  not only the current method,
     but the current method, the class of this method, the superclass of
     this class and so on!

     Arguments: The arguments of the context if the context is a
     function/method.

     Local Variables: All accessible and bound local variables visible
     at current point.

     Prefix: The currently parsed prefix, which is mostly the current
     identifier point stands on.

     Assignee: See the semantic user-manual

     Function: Current function-name point stands on.

     Argument #: When point is located within a function-call then this
     is the number of the argument point stands on.

     Completions: All possible completions for current prefix (see
     above).  This is probably the most helpful bucket.

     If one of these categories/buckets are not needed per default then
     add the bucket-name (s.a.)  to this option and ECB will per default
     collapse this bucket.  So most needed buckets are better visible in
     the analyse-buffer.

 -- User Option: analyse-face
     Face used for highlighting current entry in the analyse buffer.  If
     the face 'ecb-default-highlight-face' is used then the display of
     all ECB-tree-buffers can be changed by modifying only the face
     'ecb-default-highlight-face'.

     Changes take first effect after finishing and reactivating ECB!

 -- User Option: analyse-fontified-buckets
     Buckets whose elements should be fontified as in the
     methods-buffer.  If the name of a category/bucket is contained in
     this option then all elements of this bucket will be displayed as
     in the methods-buffer - at least if an element is a semantic-tag.
     This means if 'ecb-font-lock-tags' is not nil these elements will
     be fontified and also displayed with an appropriate icon if
     possible.  The default value does this only for the Context-bucket
     because for most of the other buckets this makes not really much
     sense.

     For available buckets see 'ecb-analyse-collapsed-buckets'.

     For the faces used to display a bucket-node itself or
     bucket-elements not fontified see the options
     'ecb-analyse-bucket-node-face' rsp.
     'ecb-analyse-bucket-element-face'.

 -- User Option: analyse-gen-tag-info-fn
     Which info should be displayed for a tag of the analyse-buffer.  If
     nil then the default information about a tag will be displayed.  If
     a function then this function gets as argument the tag for which
     tag-information should be displayed.  This function has to return a
     string which will be then display as tag-info.  This string has to
     be fully formatted (e.g.  must already include line-breaks if the
     tag-info should be displayed in several lines).

     See 'ecb-analyse-show-tag-info-fn' how the tag-info is displayed.

 -- User Option: analyse-general-face
     Basic face for the ECB analyse buffer.  This defines the basic face
     the whole history buffer should displayed with.  If the face
     'ecb-default-general-face' is used then the display of all
     ECB-tree-buffers can be changed by modifying only the face
     'ecb-default-general-face'.

     Changes take first effect after finishing and reactivating ECB!

 -- User Option: analyse-show-node-info
     When to display which node-info in the history-buffer.  Define
     which node info should displayed after moving the mouse over a node
     (or after a shift click onto the node) in the history-buffer.

     You can define "when" a node-info should be displayed: See
     'ecb-directories-show-node-info' for the possible choices.

     You can define what info should be displayed:

        - name: The full name of the node
        - full-info: All infos available to a node.

     Do NOT set this option directly via setq but use always customize!

 -- User Option: analyse-show-tag-info-fn
     How to display the tag-info for a tag of the analyse-buffer.  The
     value of this option is a function which will be called with the
     info-string generated for the current tag of the analyse-buffer.
     This function must do all things necessary for displaying this
     info.  When this function is called the window stored in
     'ecb-last-edit-window-with-point' is the selected window!

     ECB offers two builtin ways: Display the info in the echo-area (via
     the function 'message') or in a temp-buffer in the edit-area (via
     the function 'ecb-analyse-show-tag-info-in-temp-buffer').  Default
     is echo-area-display.

     See also 'ecb-analyse-gen-tag-info-fn'.


File: ecb.info,  Node: ecb-symboldef,  Next: ecb-layout,  Prev: ecb-analyse,  Up: Customizable options

7.3.8 Group ecb-analyse
-----------------------

 -- User Option: symboldef-buffer-name
     Name of the ECB-symbol-definition buffer.  Because it is not a
     normal buffer for editing you should enclose the name with stars,
     e.g.  "*ECB Symboldefinition*".

     If it is necessary for you you can get emacs-lisp access to the
     buffer-object of the ECB-symbol-definition-buffer by this name,
     e.g.  by a call of 'set-buffer'.

     Changes for this option at runtime will take affect only after
     deactivating and then activating ECB again!

 -- User Option: symboldef-buffer-sync
     Synchronize the symboldef buffer automatically with current edit
     buffer.

     If 'always' then the synchronization takes place always a buffer
     changes in the edit window, if nil then never.  If a list of
     major-modes then only if the 'major-mode' of the new buffer belongs
     NOT to this list.

     If the special value 'basic' is set then ECB uses the setting of
     the option 'ecb-basic-buffer-sync'.

     IMPORTANT NOTE: Every time the synchronization is done the hook
     'ecb-symboldef-buffer-sync-hook' is evaluated.

 -- User Option: symboldef-buffer-sync-delay
     Time Emacs must be idle before the symboldef-buffer is
     synchronized.  Synchronizing is done with the current source
     displayed in the edit window.  If nil then there is no delay, means
     synchronization takes place immediately.  A small value of about
     0.25 seconds saves CPU resources and you get even though almost the
     same effect as if you set no delay.

     If the special value 'basic is set then ECB uses the setting of the
     option 'ecb-basic-buffer-sync-delay'.

 -- User Option: symboldef-buffer-sync-hook
     ook run at the end of the function 'ecb-symboldef-buffer-sync'.
     See documentation of 'ecb-symboldef-buffer-sync' for conditions
     when synchronization takes place and so in turn these hooks are
     evaluated.

     Preconditions for such a hook:

        * Current buffer is the buffer of the currently selected
          edit-window.
        * The symboldef-buffer is displayed in a visible window of the
          ecb-frame (so no check for visibilty of the symboldef-buffer
          in the ecb-frame is necessary in a hook function)

     Postcondition for such a hook: Point must stay in the same
     edit-window as before evaluating the hook.

     Important note: If the option 'ecb-symboldef-buffer-sync' is not
     nil the function 'ecb-symboldef-buffer-sync' is running either
     every time Emacs is idle or even after every command (see
     'ecb-symboldef-buffer-sync-delay').  So if the symboldef-buffer is
     displayed in a window of the ecb-frame (see preconditions above)
     these hooks can be really called very often!  Therefore each
     function of this hook should/must check in an efficient way at
     beginning if its task have to be really performed and then do them
     only if really necessary!  Otherwise performance of Emacs could
     slow down dramatically!

 -- User Option: symboldef-find-functions
     Funtions to find the definition for current symbol under point.
     This functionality is set on a major-mode base, i.e.  for every
     major-mode a different setting can be used.  The value of this
     option is a list of cons-cells:

        * The car is either a major-mode symbol or the special symbol
          'default which means if no setting for a certain major-mode is
          defined then the cdr of the 'default cons-cell is used.

        * The car is a function intended to find the definition of a
          certain symbol for files of this major-mode.  Such a function
          will be called with two arguments, the first is the
          symbol-name as string for which the definition should be
          displayed and the second the current edit-buffer as
          buffer-object, i.e.  the current buffer of the current
          edit-window.  The function will be called with the special
          ecb-symbol-definition-buffer as current buffer whereas this
          buffer is empty.  The function has to insert everything
          necessary to display the symbol-definition and is also
          responsible to format the displayed text.  The buffer-local
          variable 'fill-column is already preset to the window-width of
          the special ecb-window minus 1. The function is responsible to
          set the buffer-local variable `truncate-lines' appropriate.
          The function can either return nil or a string which will be
          integrated in the modeline-display of this ecb-window.

     There are two prefined functions 'ecb-symboldef-find-lisp-doc' and
     'ecb-symboldef-find-definition' whereas the latter on is used a
     default find-function.

 -- User Option: symboldef-minimum-symbol-length
     Minimum length a symbol must have so its definition or doc is
     displayed.


File: ecb.info,  Node: ecb-layout,  Next: ecb-compilation,  Prev: ecb-symboldef,  Up: Customizable options

7.3.9 Group ecb-layout
----------------------

This group contains settings for the screen-layout of the ECB:

 -- User Option: activate-before-new-frame-created-hook
     Normal hook run before the new ECB-frame is created if
     'ecb-new-ecb-frame' is not nil (otherwise this hook is not
     evaluated).

 -- User Option: advice-window-functions-signal-error
     Signal an error if an adviced function can not do its job.  If not
     nil then an error is signaled if one of the adviced user-commands
     can not do its job.  So for example if the user tries to split the
     compile-window or an ecb-tree-window or if one tries to switch to
     another buffer in one of the ecb-tree-windows.  For details see the
     documentation of each of the adviced functions to get info when an
     error is signaled.

     If this option is nil then no error is signaled but the called
     adviced function does simply nothing.

     Default is nil but it can also be useful to signal errors - so you
     see when call a function in a situation which is not supported by
     this function.

 -- User Option: fix-window-size
     Fix size of the ECB-windows/buffers even after frame-resizing.  The
     fix type (valid values are nil, t, width and height) can either be
     set on a layout-basis (means a different value for each layout) or
     one value can be set for all layouts.  For the latter case there is
     an additional value 'auto' which choose autom.  the senseful
     fix-type depending on the current layout-type: For top-layouts the
     fix-type 'height' and for all other layout-types the fix-type
     'width'.

     For a detailed description of the valid values see documentation of
     'window-size-fixed' which is newly introduced in GNU Emacs 21 and
     is only available there.  Therefore this option takes only effect
     with GNU Emacs >= 21.  This option has no effect with XEmacs
     because it does not support the feature 'window-size-fixed'.

     Note1: Manually resizing the ECB-windows via 'enlarge-window',
     'shrink-window', 'mouse-drag-vertical-line' and
     'mouse-drag-mode-line' is still possible even if the window-sizes
     are fixed for frame-resizing!

     Note2: The description of 'window-size-fixed' in the
     elisp-info-manual is more detailed than the description offered by
     'C-h v'!

     Note3: With Emacs < 22 there seems to be no distinction between
     'width, 'height and t.  Therefore this option takes no effect
     (means all ecb-windows have always unfixed sizes) with Emacs < 22
     if 'ecb-compile-window-height' is not nil.

     Per default no window-size fixing has been done.

 -- User Option: hide-ecb-windows-after-hook
     Hooks run direct after the ECB windows have been hidden.  Hiding
     was done either by 'ecb-toggle-ecb-windows' or
     'ecb-hide-ecb-windows'.

     IMPORTANT: Hiding the ECB-windows is internally done by calling
     'ecb-redraw-layout' and therefore also the hooks
     'ecb-redraw-layout-before-hook' and 'ecb-redraw-layout-after-hook'
     are evaluated.  The hook-sequence is analogous to that described in
     'ecb-show-ecb-windows-after-hook'.

 -- User Option: hide-ecb-windows-before-hook
     Hook run direct before the ECB windows will be hidden.  Hiding is
     done either by 'ecb-toggle-ecb-windows' or 'ecb-hide-ecb-windows'.
     This means that at runtime of this hook all the ECB-tree-windows of
     current layout are visible.

     IMPORTANT: Hiding the ECB-windows is internally done by calling
     'ecb-redraw-layout' and therefore also the hooks
     'ecb-redraw-layout-before-hook' and 'ecb-redraw-layout-after-hook'
     are evaluated.  The hook-sequence is analogous to that described in
     'ecb-show-ecb-windows-before-hook'.

 -- User Option: ignore-display-buffer-function
     Adviced 'display-buffer' ignores 'display-buffer-function'.  This
     means, that the adviced version of 'display-buffer' ignores the
     value of 'display-buffer-function' when called for the 'ecb-frame'.
     If this variable should not be ignored then the function of
     'display-buffer-function' is completely responsible which window is
     used for the buffer to display - no smart ECB-logic will help to
     deal best with the ECB-window-layout!  You can define if and when
     'display-buffer-function' should be ignored:

        - only when persistent compile window is used - i.e.  if
          'ecb-compile-window-height' is not nil

        - always when ECB is active - that means ignore when ECB is
          active otherwise not - this is the default value

        - never, the adviced version of 'display-buffer' always uses the
          value of 'display-buffer-function' if the value is a function.

 -- User Option: ignore-pop-up-frames
     Ignore setting of option 'pop-up-frames'.  This means, that a value
     of not nil for 'pop-up-frames' is ignored:
        * 'compile-window: only when persistent compile window is used -
          i.e.  if 'ecb-compile-window-height' is not nil - this is the
          default value.
        * 'always: always when ECB is active - that means no
          pop-up-frames when ECB is active
        * 'nil': pop-up-frames is fully active when set

 -- User Option: ignore-special-display
     Ignore special-display-handling.  This means, that all values of
     'special-display-function', 'special-display-buffer-names' and
     'special-display-regexps' are ignored

        * only when persistent compile window is used - i.e.  if
          'ecb-compile-window-height' is not nil - this is the default
          value.

        * always when ECB is active - that means no
          special-display-handling of buffers when ECB is active

        * never, i.e.  special-dislay-handling depends on the values of
          the options 'special-display-function',
          'special-display-buffer-names' and 'special-display-regexps'.

 -- User Option: layout-always-operate-in-edit-window
     Adviced window functions work always in the edit-window.  If we are
     in an ECB special buffer (methods, directories, etc), and any of
     the adviced windowing functions is called interactively, we will
     select first an edit-window according to the value of
     'ecb-mouse-click-destination'.  This is useful if you have any
     functions that use such functions and you don't want them to fail
     with an error complaining that the current buffer can not be split,
     or something similar.

     Because this may not be desirable in all situations and for all
     adviced functions this can be enabled separately for function where
     it is senseful.  If the symbol of an adviced function is contained
     in the value of this option, then the edit-window is first selected
     otherwise either an error is reported or some other special
     reaction (depends on 'ecb-advice-window-functions-signal-error');
     see the documentation of the adviced functions for this.

     Per default this is only enabled for 'switch-to-buffer'.

 -- User Option: layout-debug-mode
     Write debug-information about layout-operations in the
     Messages-buffer.  Normally there should be no need to set this
     option to true but if there are problems to display buffers in the
     compile-window of ECB (e.g.  buffers which should be displayed
     there aren't or the temporally enlarging-mechanism does not do what
     you think it should do etc...)  then please do the following steps:

       1. Set 'ecb-layout-debug-mode' to not nil

       2. Reproduce the wrong behavior exactly by repeating all the
          operations which lead to the problem.

       3. Now send immediately a bug report with
          'ecb-submit-problem-report'.

       4. Set 'ecb-layout-debug-mode' back to nil if you do not want
          further debugging output in the *Messages* buffer

 -- User Option: layout-name
     Select a window layout of ECB. Value is any arbitrary string.
     There are four different types of layouts: left, right, top and
     left-right, which means the location of the ECB-tree-windows in the
     ECB-frame.  Currently there are 20 predefined layouts; names see
     below.  You can savely try out any of them by changing this value
     and saving it only for the current session.  If you are sure which
     layout you want you can save it for future sessions.  To get a
     picture of the layout for name <name> call 'ecb-show-layout-help'.
     'ecb-layout-function-9'.

     Currently available layouts:

        * Left layouts: left1 left2 left3 left4 left5 left6 left7 left8
          left9 left10 left11 left12 left13 left14 left15

        * Right layouts: right1

        * Top layouts: top1 top2

        * Left-right layouts: leftright1 leftright2

     Regardless of the settings you define here: If you have destroyed
     or changed the ECB-screen-layout by any action you can always go
     back to this layout with 'ecb-redraw-layout'

 -- User Option: layout-window-sizes
     Specifies the sizes of the ECB windows for each layout.  The
     easiest way (and also the very strongly recommended way) to set
     this option is to change the window sizes by dragging the window
     borders using the mouse and then store the window sizes by calling
     the command 'ecb-store-window-sizes'.  Next time the layout is
     redrawn the values stored in this option will be used.

     If 'ecb-store-window-sizes' is used then the windows sizes are
     stored per default as fractions of current frame-width and -height
     of the ecb-frame, so the stored values will "work" for other frame
     sizes too.  But if you call 'ecb-store-window-sizes' with a
     prefix-argument then the fixed values of current width and height
     are stored!

     If this option is set "by hand" (i.e.  not by
     'ecb-store-window-sizes') then the following is important:
        * Use always 'customize-option', never 'setq'!
        * It is recommended to use fractions of frame-width and
          -height!.
        * It is also recommended to use buffer-name-symbols instead of
          plain buffer-names (e.g.  ecb-history-buffer-name instead of "
          *ECB History*")
        * There must be an entry for each special ecb-buffer of that
          layout for which the sizes are stored.
        * The order of the sequence of the inserted window sizes doesn't
          matter because each size-pair is assigned to a buffer-name the
          sizes belong to.

 -- User Option: maximize-ecb-window-after-selection
     If not nil maximize current tree-window after selection.  When
     selecting another not-tree-window after such an automatic
     maximizing all tree-windows of current layout are displayed again.
     But a tree-window is not maximized if either a node has been
     selected via primary- oder secondarc mouse-button or the popup-menu
     of that tree-buffer has been opened.

 -- User Option: maximize-next-after-maximized-select
     Maximizes the next logical tree-window after a maximized
     node-selection.  Selecting a node in a maximized tree-window is
     handled very smart by ECB:

     If a tree-buffer-name is not contained in this option then
     selecting a node in this maximized tree-buffer automatically
     "minimizes" that tree-window (i.e.  displays all windows of the
     current layout) so the user can perform the next logical step (e.g.
     the next logical step after selecting a directory in the
     directories-buffer is to select a source-file - therefore the
     sources-buffer of current layout has to be displayed - if the
     current layout contains one; the next logical step of selecting a
     source-file is probably to jump to a certain tag via the
     methods-buffer).

     If a tree-buffer-name is contained in this option then selecting a
     node in this tree-buffer automatically maximizes the next logical
     tree-window (e.g.  directories -> sources, sources/history ->
     methods).  But if the current maximized tree-buffer is also
     contained in the option 'ecb-tree-do-not-leave-window-after-select'
     (see also the tree-buffer-command
     'ecb-toggle-do-not-leave-window-after-select' which is bound to
     'C-t' in each tree-buffer) then ECB does *not* maximize the next
     logical tree-window but point stays in the currently maximized
     tree-buffer so for example the user can select more than one node
     (e.g.  more than one source-file from the sources-buffer.

     The tree-buffer-name can either be defined as plain string or with
     a symbol which contains the buffer-name as value.  The latter one
     is recommended for the builtin ECB-tree-buffers because then simply
     the related option-symbol can be used (e.g.
     'ecb-directories-buffer-name', 'ecb-sources-buffer-name' or
     'ecb-history-buffer-name').

     In future versions this option will probably also allow to define
     the next logical tree-buffer for a tree-buffer - currently this is
     hard-coded as follows:
        - directories -next-logical-> sources
        - sources -next-logical-> methods
        - history -next-logical-> methods.

 -- User Option: maximize-next-after-maximized-select
     Maximizes the next logical tree-window after a maximized
     node-selection.  Selecting a node in a maximized tree-window is
     handled very smart by ECB:

     If this option is nil then selecting a node in a maximized
     directories- sources- or history-tree-buffer automatically
     "minimizes" that tree-window (i.e.  displays all windows of the
     current layout) so the user can perform the next logical step (e.g.
     the next logical step after selecting a directory in the
     directories-buffer is to select a source-file - therefore the
     sources-buffer of current layout has to be displayed - if the
     current layout contains one; the next logical step of selecting a
     source-file is probably to jump to a certain tag via the
     methods-buffer).

     If this option is not nil then selecting a node in a maximized
     directories- sources- or history-tree-buffer automatically
     maximizes the next logical tree-window (directories -> sources,
     sources/history -> methods).  But if the current maximized
     tree-buffer is contained in the option
     'ecb-tree-do-not-leave-window-after-select' (see also the
     tree-buffer-command 'ecb-toggle-do-not-leave-window-after-select'
     which is bound to 'C-t' in each tree-buffer) then ECB does *not*
     maximize the next logical tree-window but point stays in the
     currently maximized tree-buffer so for example the user can select
     more than one source-file from the sources-buffer.

 -- User Option: new-ecb-frame
     Create a new frame at activation time of ECB.

 -- User Option: other-window-behavior
     The behavior of ECB concerning getting an "other window".  The
     following settings are possible:

     'all':

     ECB will cycle through all windows of the ECB-frame or scroll
     simply the next window in the ECB-frame, means it behaves like the
     original 'other-window' rsp.  the original
     'other-window-for-scrolling'.

     'only-edit':

     ECB will only cycle through the edit-windows of ECB or only scroll
     another edit-window.  If the selected window is not an edit-window
     then it behaves like with value 'all'.

     'edit-and-compile':

     Like 'only-edit' plus the compile window if any.  If the selected
     window is neither an edit-window nor the compile-window then it
     behaves like with value 'all'.

     'smart':

     With this setting ECB tries to choose the
     'other-window'-destination or the "other window" to scroll in a
     smart and intuitive way: If point is in one of the edit-windows and
     if the edit-area is splitted then always the "next" edit-window is
     choosen (whereas the next edit-window of the last edit-window is
     the first edit-window)- if the edit-area is unsplitted then the
     compile-window is used if there is one.  In the context of an
     'other-window'-call the ARG of 'other-window' will be taken into
     account.

     If one of the special ecb-windows is selected then always the
     "next" ecb-window is choosen (whereas the next ecb-window of the
     last ecb-window is the first ecb-window).  In the context of an
     'other-window'-call the ARG of 'other-window' will be taken into
     account.  If there is only one ecb-window then ECB considers also
     the edit-windows

     If the compile-window is selected then always the last edit-window
     which had the point will be used unless 'other-window' has been
     called with a prefix-argument unequal 1.

     If there is an active minibuffer:

     Regardless of the allowed values above ECB handles the situation of
     an active minibuffer during a call to 'other-window' or
     'scroll-other-window' like follows:

     If the minibuffer-window is selected then ECB always chooses the
     window 'minibuffer-scroll-window' points to (when this variable is
     set, otherwise the compile-window or the last selected edit-window
     is choosen) when the called command is called to choose the 1.
     next window (always true for scrolling another window or true when
     'other-window' called without prefix-arg or with prefix-arg equal
     1).  Otherwise the window ARG steps away is choosen (in case of
     'other-window').

     If there is an active minibuffer but the minibuffer-window is not
     selected then 'other-window' and 'scroll-other-window' behave like
     the original version.

     In addition to the allowed values above the value of this option
     can also be a function:

     A function:

     This function gets seven arguments:
       1. A canonical list of all currently visible windows of the
          'ecb-frame'
       2. A canonical list of all currently visible edit-windows
       3. A canonical list of all currently visible ecb-windows
       4. The window-object of the compile-window if there is any.
       5. The minibuffer-window of the ECB-frame if there is an active
          minibuffer.
       6. The result of the function 'ecb-where-is-point' - see the
          documentation of this function for details.
       7. An integer which indicates how many steps away from the
          current selected window the "other-window" is.  Is nil when
          this function is called in another context then for
          'other-window'.

     The function has to return a window-object which is then used as
     "other window" for the command 'other-window' or for scrolling
     another window (e.g.  with 'scroll-other-window').  Such a function
     has to handle properly all situation for itself.
     'ecb-get-other-window-smart' is an example for such a function.

 -- User Option: redraw-layout-after-hook
     Hooks run direct before the ECB windows will be shown either by
     'ecb-toggle-ecb-windows' or 'ecb-show-ecb-windows'.  This means
     that at runtime of this hook the ECB-windows are already visible.

 -- User Option: redraw-layout-before-hook
     Hooks run direct before the ECB-layout will be redrawn by either
     'ecb-redraw-layout'.

 -- User Option: redraw-layout-quickly
     If non-nil, we will attempt to redraw the layout quickly.  Please
     read also carefully the documentation of 'ecb-redraw-layout'.

 -- User Option: select-edit-window-on-redraw
     Select the first edit window on 'ecb-redraw-layout'.

 -- User Option: show-ecb-windows-after-hook
     Hooks run direct before the ECB windows will be shown either by
     'ecb-toggle-ecb-windows' or 'ecb-show-ecb-windows'.  This means
     that at runtime of this hook the ECB-windows are already visible.

     IMPORTANT: Showing the hidden ECB-windows is internally done by
     calling 'ecb-redraw-layout' and therefore also the hooks
     'ecb-redraw-layout-before-hook' and 'ecb-redraw-layout-after-hook'
     are evaluated.  So there is the following sequence of hooks during
     the process of showing the hidden ECB-windows:
       1. 'ecb-show-ecb-windows-before-hook'
       2. 'ecb-redraw-layout-before-hook'
       3. <redrawing the layout to show the hidden ECB-windows>
       4. 'ecb-redraw-layout-after-hook'
       5. 'ecb-show-ecb-windows-after-hook'
     So be aware which code you add to which hook!

 -- User Option: show-ecb-windows-before-hook
     Hooks run direct before the ECB windows will be shown either by
     'ecb-toggle-ecb-windows' or 'ecb-show-ecb-windows'.  This means
     that at runtime of this hook the ECB-windows are still hidden.

     IMPORTANT: Showing the hidden ECB-windows is internally done by
     calling 'ecb-redraw-layout' and therefore also the hooks
     'ecb-redraw-layout-before-hook' and 'ecb-redraw-layout-after-hook'
     are evaluated.  So there is the following sequence of hooks during
     the process of showing the hidden ECB-windows:
       1. 'ecb-show-ecb-windows-before-hook'
       2. 'ecb-redraw-layout-before-hook'
       3. <redrawing the layout to show the hidden ECB-windows>
       4. 'ecb-redraw-layout-after-hook'
       5. 'ecb-show-ecb-windows-after-hook'
     So be aware which code you add to which hook!

 -- User Option: split-edit-window-after-start
     Sets if and how the edit window should be splitted after ECB-start.
     But be aware: This option determines only if and how the
     edit-window should be splitted at start-time of ECB. There are five
     different values allowed for this option:

        - 'nil': Do not split the edit-area of ECB after activation,
          i.e.  there will be only one edit-window after starting ECB.

        - 'horizontal': Split the edit-area in 2 edit-windows side by
          side.

        - 'vertical': Split the edit-area in 2 edit-windows, one above
          the other.

        - 'before-activation': Split the edit-area as before the
          ECB-start, i.e.  the edit-area will have after start a
          window-layout as the whole frame had before the start of ECB.

        - 'before-deactivation': Split the edit-area into a
          window-layout ECB had in its edit-area direct before the
          ECB-deactivation.  This value preserves the full state between
          activations of ECB, i.e.  the visibility of the ECB-windows,
          the visibility of a compile-window and also the full
          split-state of the edit-area.  But this can only be done if
          important layout-options have not been changed in the
          meanwhile.  These are the options 'ecb-layout-name',
          'ecb-compile-window-height', 'ecb-compile-window-width',
          'ecb-windows-width' and 'ecb-windows-height'.

     Default value is 'before-deactivation'.

     Some remarks to the value 'before-activation': If this value has
     been set then ECB needs three permanent adivces even when ECB is
     deactivated: 'split-window', 'delete-window' and
     'delete-other-windows'.  But these advices do not change any
     behavior of these functions but only storing in an internal
     ECB-variable the facts that a window has been splitted or deleted.
     In addition to this these advices are 100% error-save, means the
     functionality of the original functions will be performed in
     every(!)  case even if within the advice an error occurs (but
     normally there can no errors occur in these advices because they
     are very simple).  Conclusion: If you want really all ECB-advices
     being disabled after deactivating ECB then you have to set this
     option to other values then 'before-activation'.  But setting this
     variable to this value is really completely save.

 -- User Option: toggle-layout-sequence
     Toggle sequence for layout toggling with 'ecb-toggle-layout'.
     Every element of this list has to be a valid layout-name i.e.
     either one of the predefined layouts or one of the user-defined
     layouts.

     You can add here as many layouts as you want but to use this option
     most effective you should not add more than 2 or 3 layouts so every
     layout can be accessed very fast by toggling with
     'ecb-toggle-layout'.  It is also senseful to add layouts which have
     the same principal outline, i.e.  all their tree-buffers are on the
     same side of the frame and the tree-buffer-"column" (or -"row") has
     identical size for the layouts.

     Recommended values are for example:

        - ("left10" "left15"), toggles between methods and
          directories/history
        - ("left10" "left13"), toggles between methods and directories
        - ("left10" "left14"), toggles between methods and history
        - ("left10" "left13" "left14"), toggles between methods, history
          and directories

     See also option 'ecb-show-sources-in-directories-buffer'.

     This option makes only sense if the value is a list with more than
     1 element!

 -- User Option: windows-height
     The height of the ECB windows in lines for top-layouts.  If the
     number is less than 1.0 the width is a fraction of the frame
     height.

 -- User Option: windows-width
     The width of the ECB windows in columns for left- and right
     layouts.  If the number is less than 1.0 the width is a fraction of
     the frame width.


File: ecb.info,  Node: ecb-compilation,  Next: ecb-create-layout,  Prev: ecb-layout,  Up: Customizable options

7.3.10 Group ecb-compilation
----------------------------

This group contains settings for the compile window of ECB:

 -- User Option: compilation-buffer-names
     Additional buffer names that should be displayed in the
     compile-window.  Buffer names can either be defined as strings or
     as regexps.  If the buffer-name of a buffer matches one of the
     defined string or regexp then it will be displayed in the
     compile-window of ECB even if 'compilation-buffer-p' says nil for
     this buffer.

     It is not recommended to add the eshell-buffer-names to this list
     because ECB already handles the eshell-integration as best as
     possible (*note Using eshell::).

     See also the options 'ecb-compilation-major-modes' and
     'ecb-compilation-predicates'.

 -- User Option: compilation-major-modes
     Additional major-mode that should be displayed in the
     compile-window.  All buffers of a major-mode contained in this list
     are displayed in the compile-window even if 'compilation-buffer-p'
     says nil for such a buffer.

     It is not recommended to add 'eshell-mode' to this list because ECB
     already handles the eshell-integration as best as possible (*note
     Using eshell::).

 -- User Option: compilation-predicates
     Predicates when a buffer should be treated as compilation-buffer.
     Every element of this list has to be a function or
     lambda-expression which gets as argument a buffer-object and which
     has to return not nil when this buffer should be treated as
     compilation-buffer (even if 'compilation-buffer-p' says nil) and
     therefore be displayed in the compile-window of ECB (if there is
     any).

     In combination with the values of 'ecb-compilation-buffer-names'
     and 'ecb-compilation-major-modes' ECB decides when a buffer is
     displayed in the compile-window.

     Default value is the function 'comint-check-proc' which returns not
     nil when the buffer is related to a living process.

 -- User Option: compile-window-height
     Height of the persistent compilation-window of ECB. If you want a
     compilation window shown at the bottom of the ECB-layout then set
     here the height of it (Default is a height of 5).  If you redraw
     the current layout with 'ecb-redraw-layout' then the compilation
     window (if any) has the height you set here.  If the number is less
     than 1.0 the height is a fraction of the frame height.

     If you do not set a persistent compilation window then doing a
     compilation or displaying temp-buffers (e.g.  *Help*-buffers)
     splits temporally the edit window vertically if the edit window is
     not splitted already or uses another edit window temporally for
     compilation output if the edit window is already splitted.  This is
     the recommended value for this option because this is the
     standard-behavior of Emacs.

     Beware: If you set a persistent compilation window then ECB
     displays all buffers for which 'ecb-compilation-buffer-p' returns
     not nil in that persistent compilation window.  If a buffer which
     should being displayed there is not displayed there then try to
     modify the options 'ecb-compilation-buffer-names',
     'ecb-compilation-major-modes' or 'ecb-compilation-predicates' (in
     this sequence).

     See also the options 'ecb-compile-window-temporally-enlarge' and
     'ecb-enlarged-compilation-window-max-height' and also the command
     'ecb-toggle-compile-window-height'!

     ECB offers the functionality of such a persistent compile-window
     regardless if the special ECB-windows are visible or not (see the
     command 'ecb-toggle-ecb-windows').

     Regardless of the settings you define here: If you have destroyed
     or changed the ECB-screen-layout by any action you can always go
     back to this layout with 'ecb-redraw-layout'

 -- User Option: compile-window-prevent-shrink-below-height
     Allow the compile-window to be shrunken below its height.  A non
     nil value means ECB prevents the compile-window from being shrunken
     below the threshold of 'ecb-compile-window-height' by displaying
     temp-buffers (e.g.  *Help* etc.)  or after running compilations or
     greps.  But interactively it is always allowed to shrink it to
     every height!

     If nil then ECB does nothing to prevent being shrunken below the
     value of 'ecb-compile-window-height'.

     Default is t.

 -- User Option: compile-window-temporally-enlarge
     Let Emacs temporally enlarge the compile-window of the ECB-layout.
     This option has only an effect if 'ecb-compile-window-height' is
     not nil!

     The following values are possible:
        - 'after-display': After displaying a "compilation-buffer" (in
          the sense of 'ecb-compilation-buffer-p'!)  in the
          compile-window of ECB. For the max.  height of the enlarged
          compile-window see the option
          'ecb-enlarged-compilation-window-max-height'.

        - 'after-selection': Selecting the 'ecb-compile-window' auto.
          enlarges it and de-selecting (means leaving
          'ecb-compile-window') auto.  shrinks it.  Enlarging and
          shrinking the 'ecb-compile-window' is done with
          'ecb-toggle-compile-window-height'.  See also the
          documentation of this function!

        - 'both': The combination of 'after-display and
          'after-selection.

        - 'nil': ECB fixes always the height of the 'ecb-compile-window'
          at the value of 'ecb-compile-window-height'.

     To restore the ECB-layout after such a buffer-enlarge just call
     'ecb-toggle-compile-window-height' or 'ecb-redraw-layout'.

 -- User Option: compile-window-width
     Width of the compile-window.

     Possible values are 'frame' and 'edit-window'.  With 'frame' the
     compile-window looks like:

             -------------------------------------------------------
             |              |                                      |
             |  Directories |                                      |
             |              |                                      |
             |--------------|            edit-window(s)            |
             |              |                                      |
             |  Methods     |                                      |
             |              |                                      |
             -------------------------------------------------------
             |                                                     |
             |                    Compilation                      |
             |                                                     |
             -------------------------------------------------------

     With 'edit-window' the compile-window looks like:

             -------------------------------------------------------
             |              |                                      |
             |  Directories |                                      |
             |              |                                      |
             |--------------|            edit-window(s)            |
             |              |                                      |
             |  Methods     |                                      |
             |              |                                      |
             |              |---------------------------------------
             |              |                                      |
             |              |            Compilation               |
             |              |                                      |
             -------------------------------------------------------

     This option takes only effect if 'ecb-compile-window-height' is not
     nil!

 -- User Option: change-layout-preserves-compwin-state
     Changing the layout preserves the state of the compile-window.
     This is for example useful if the user toggles between several
     layouts (see 'ecb-toggle-layout') and wants to preserve the
     hidden-state of the compile-window.

 -- User Option: enlarged-compilation-window-max-height
     The max height of the compile-window after enlarging it.  The max
     height of the compilation window after enlarged by
     'ecb-toggle-compile-window-height'.  The following values are
     allowed:

     'best':

     ECB fits the height of the compile-window exactly to the size of
     its current contents but never shrinks below the value of
     'ecb-compile-window-height' or enlarges over the half of the
     frame-height of the ECB-frame.  The values of the options
     'compilation-window-height' and 'temp-buffer-max-height' are taken
     into account dependent of the current 'major-mode' of the buffer in
     the compile-window: If 'compilation-mode' then
     'compilation-window-height' is used otherwise
     'temp-buffer-max-height'.

     'half':

     1/2 the frame-height of the ECB-frame

     Any number:

     Max height in lines.  If the number is less than 1.0 the height is
     a fraction of the frame height (e.g.  0.33 results in a max-height
     of 1/3 the frame-height).

 -- User Option: scroll-other-window-scrolls-compile-window
     'scroll-other-window' scrolls always the compile-window.  For all
     details about the scroll-behavior of 'scroll-other-window' see the
     advice documentation of 'other-window-for-scrolling'.


File: ecb.info,  Node: ecb-create-layout,  Next: ecb-face-options,  Prev: ecb-compilation,  Up: Customizable options

7.3.11 Group ecb-create-layout
------------------------------

This group contains settings for creating new ECB-layouts:

 -- User Option: create-layout-file
     File where all layouts created by 'ecb-create-new-layout' are
     stored.

 -- User Option: ecb-create-layout-frame-height
     Frame height of the layout creation frame.

 -- User Option: ecb-create-layout-frame-width
     Frame width of the layout creation frame.


File: ecb.info,  Node: ecb-face-options,  Next: ecb-faces,  Prev: ecb-create-layout,  Up: Customizable options

7.3.12 Group ecb-face-options
-----------------------------

This group contains settings for all faces used in ECB:

 -- User Option: directories-general-face
     Basic face for the ECB directories buffer.  This defines the basic
     face the whole directory buffer should displayed with.  If the face
     'ecb-default-general-face' is used then the display of all
     ECB-tree-buffers can be changed by modifying only the face
     'ecb-default-general-face'.

     Changes take first effect after finishing and reactivating ECB!

 -- User Option: directory-face
     Face used for highlighting current directory in the directories
     buffer.  If the face 'ecb-default-highlight-face' is used then the
     display of all ECB-tree-buffers can be changed by modifying only
     the face 'ecb-default-highlight-face'.

     Changes take first effect after finishing and reactivating ECB!

 -- User Option: directory-not-accessible-face
     Face for not accessible dirs in the directories buffer.

 -- User Option: history-bucket-node-dir-soure-path-face
     Basic face for displaying the source-path part in a directory
     bucket.  This defines the face for the source-path part in a
     bucket-node of the history-buffer if 'ecb-history-make-buckets' is
     set to 'directory-with-source-path.  For all other values of
     'ecb-history-make-buckets' this option takes no effect.

     Changes take first effect after finishing and reactivating ECB!

 -- User Option: history-bucket-node-face
     Basic face for displaying a bucket-node in the ECB-history-buffer.
     This defines the basic face for the bucket-nodes used to bucketize
     the history-entries as defined with the option
     'ecb-history-make-buckets'.

     Changes take first effect after finishing and reactivating ECB!

 -- User Option: history-dead-buffer-face
     Face for history entries pointing to dead buffers.

     Changes take first effect after finishing and reactivating ECB!

 -- User Option: history-face
     Face used for highlighting current history-entry in the history
     buffer.  If the face 'ecb-default-highlight-face' is used then the
     display of all ECB-tree-buffers can be changed by modifying only
     the face 'ecb-default-highlight-face'.

     Changes take first effect after finishing and reactivating ECB!

 -- User Option: history-general-face
     Basic face for the ECB directory buffer.  This defines the basic
     face the whole history buffer should displayed with.  If the face
     'ecb-default-general-face' is used then the display of all
     ECB-tree-buffers can be changed by modifying only the face
     'ecb-default-general-face'.

     Changes take first effect after finishing and reactivating ECB!

 -- User Option: history-indirect-buffer-face
     Face for indirect buffers in the history buffer.

     Changes take first effect after finishing and reactivating ECB!

 -- User Option: method-face
     Face used for highlighting current method, class or variable in the
     methods buffer.  If the face 'ecb-default-highlight-face' is used
     then the display of all ECB-tree-buffers can be changed by
     modifying only the face 'ecb-default-highlight-face'.

     Changes take first effect after finishing and reactivating ECB!

 -- User Option: method-non-semantic-face
     Face used for for displaying tags of sources not supported by
     semantic.

     Changes take first effect after finishing and reactivating ECB!

 -- User Option: methods-general-face
     Basic face for the ECB methods buffer.  This defines the basic face
     the whole methods buffer should displayed with.  If the face
     'ecb-default-general-face' is used then the display of all
     ECB-tree-buffers can be changed by modifying only the face
     'ecb-default-general-face'.

     Changes take first effect after finishing and reactivating ECB!

 -- User Option: source-face
     Face used for highlighting current source in the sources buffer.
     If the face 'ecb-default-highlight-face' is used then the display
     of all ECB-tree-buffers can be changed by modifying only the face
     'ecb-default-highlight-face'.

     Changes take first effect after finishing and reactivating ECB!

 -- User Option: source-in-directories-buffer-face
     Face for source files in the directories buffer.

 -- User Option: sources-general-face
     Basic face for the ECB sources buffer.  This defines the basic face
     the whole sources buffer should displayed with.  If the face
     'ecb-default-general-face' is used then the display of all
     ECB-tree-buffers can be changed by modifying only the face
     'ecb-default-general-face'.

     Changes take first effect after finishing and reactivating ECB!

 -- User Option: source-read-only-face
     Face for read-only sources.

 -- User Option: symboldef-prototype-face
     Which face should be used for the symbol prototype in the
     symboldef-buffer.

     The prototype can be the function prototype in case of a function
     or method or - in case of a variable - the type of the variable (in
     case of a typed language).

 -- User Option: symboldef-symbol-face
     Which face should be used for the symbol itself in the
     symboldef-buffer.

     There are two choices: Either a face or the special symbol
     'use-font-lock-face whereas the latter one means that ECB uses that
     face font-lock uses for fontifying the symbol (e.g.
     font-lock-function-name-face for a function symbol or
     font-lock-variable-name-face for a variable symbol).

 -- User Option: tag-header-face
     Face used for highlighting the tag header after jumping to it by
     clicking onto a node in the methods buffer.


File: ecb.info,  Node: ecb-faces,  Next: ecb-help,  Prev: ecb-face-options,  Up: Customizable options

7.3.13 Group ecb-faces
----------------------

This group contains all faces used in ECB:

'ecb-bucket-node-face:'
     Face which can be used for displaying bucket tags in the methods
     buffer.  See also 'ecb-bucket-node-display'.

'ecb-default-general-face:'
     Basic face for all ECB tree-buffers.  It's recommended to define
     here the font-family, the font-size, the basic color etc.

     In GNU Emacs 21.X all faces (even the face
     'ecb-default-highlight-face') used in the ECB tree-buffers inherit
     from this face.  Therefore the default attributes like font etc.
     of a face used in a tree-buffer can be very easily changed with
     face 'ecb-default-general-face'.

     With XEmacs there is no inheritance-feature but the options
     'ecb-directories-general-face', 'ecb-sources-general-face',
     'ecb-methods-general-face' and 'ecb-history-general-face' offer the
     choice to use the face 'ecb-default-general-face' so also with
     XEmacs the basic face-settings can be easily changed just by
     customizing the face 'ecb-default-general-face'!

'ecb-default-highlight-face:'
     Define basic face for highlighting the selected node in an ECB
     tree-buffer.

     In GNU Emacs 21.X all highlighting faces in the ECB tree-buffers
     inherit from this face.  Therefore the default attributes like font
     etc.  of a face used in a tree-buffer for highlighting the current
     tag can be very easily changed with face
     'ecb-default-highlight-face'.

     With XEmacs there is no inheritance-feature but the options
     'ecb-directory-face', 'ecb-source-face', 'ecb-method-face' and
     'ecb-history-face' offer the choice to use the face
     'ecb-default-highlight-face' so also with XEmacs the basic
     face-settings can be easily changed just by customizing the face
     'ecb-default-highlight-face'!

'ecb-directories-general-face:'
     Basic face for the ECB directories buffer.  Itﾴs recommended to
     define here the font-family, the font-size, the basic color etc.

'ecb-directory-face:'
     Define face used for highlighting current directory in the
     directories buffer.

'ecb-directory-not-accessible-face'
     Define a face for not accessible dirs in the directories buffer.

'ecb-history-bucket-node-dir-soure-path-face:'
     Face used for displaying the source-path part in a
     directory-bucket.

     In GNU Emacs 21.X this face inherits from the face
     'ecb-history-bucket-node-face'.

     With XEmacs and GNU Emacs 20.X there is no inheritance-feature so
     if the buckets in the ECB-history-buffer should be displayed with
     the same basic attributes set by 'ecb-history-bucket-node-face'
     this set of basic attributes have to be set in
     'ecb-history-bucket-node-dir-soure-path-face' too!

'ecb-history-bucket-node-face:'
     Face used for displaying a bucket-node in the ECB-history-buffer.

     In GNU Emacs 21.X this face inherits from the face
     'ecb-bucket-node-face'.  With XEmacs and GNU Emacs 20.X there is no
     inheritance-feature so if the buckets in the ECB-history-buffer
     should be displayed with the same basic attributes set by
     'ecb-bucket-node-face' this set of basic attributes have to be set
     in 'ecb-history-bucket-node-face' too!

'ecb-history-dead-buffer-face:'
     Face used for history entries pointing to dead buffers.

     In GNU Emacs 21.X this face inherits from the face
     'ecb-history-general-face'.  With XEmacs and GNU Emacs 20.X there
     is no inheritance-feature so if the buckets in the
     ECB-history-buffer should be displayed with the same basic
     attributes set by 'ecb-history-general-face' this set of basic
     attributes have to be set in 'ecb-history-dead-buffer-face' too!

'ecb-history-face:'
     Define face used for highlighting current history-entry in the
     history buffer.

'ecb-history-general-face:'
     Basic face for the ECB history buffer.  Itﾴs recommended to define
     here the font-family, the font-size, the basic color etc.

'ecb-history-indirect-buffer-face:'
     Face used for history entries pointing to dead buffers.

     In GNU Emacs 21.X this face inherits from the face
     'ecb-history-general-face'.  With XEmacs and GNU Emacs 20.X there
     is no inheritance-feature so if the buckets in the
     ECB-history-buffer should be displayed with the same basic
     attributes set by 'ecb-history-general-face' this set of basic
     attributes have to be set in 'ecb-history-indirect-buffer-face'
     too!

'ecb-method-face:'
     Define face used for highlighting current method, class or variable
     in the methods buffer.

'ecb-methods-general-face:'
     Basic face for the ECB methods buffer.  Itﾴs recommended to define
     here the font-family, the font-size, the basic color etc.

'ecb-method-non-semantic-face:'
     Define face used for displaying tags of sources not supported by
     semantic.

'ecb-mode-line-data-face'
     Define face for the data in the mode-line.  See
     'ecb-mode-line-data'.

'ecb-mode-line-prefix-face'
     Define face for the prefix in the mode-line.  See
     'ecb-mode-line-prefixes'.

'ecb-mode-line-win-nr-face'
     Define face for the window-number in the mode-line.  See
     'ecb-mode-line-display-window-number'.

'ecb-source-face:'
     Define face used for highlighting current source in the sources
     buffer.

'ecb-source-in-directories-buffer-face:'
     Define a face for displaying sources in the directories buffer.

'ecb-sources-general-face:'
     Basic face for the ECB sources buffer.  Itﾴs recommended to define
     here the font-family, the font-size, the basic color etc.

'ecb-source-read-only-face'
     Define a face for read-only sources

'ecb-symboldef-prototype-face'
     Define face used for the prototype of symbol in the
     symboldef-buffer.

'ecb-symboldef-symbol-face'
     Define a face used for the symbol itself in the symboldef-buffer

'ecb-tag-header-face:'
     Define face used for highlighting the tag header after jumping to
     it by clicking onto a node in the methods buffer.

'ecb-tree-guide-line-face:'
     Define face for the guide-lines in the tree-buffers.  See the
     option 'ecb-tree-buffer-style' for a explanation of guide-lines.

'ecb-type-tag-class-face:'
     Define face used with option 'ecb-type-tag-display'.

'ecb-type-tag-enum-face:'
     Define face used with option 'ecb-type-tag-display'.

'ecb-type-tag-group-face:'
     Define face used with option 'ecb-type-tag-display'.

'ecb-type-tag-interface-face:'
     Define face used with option 'ecb-type-tag-display'.

'ecb-type-tag-struct-face:'
     Define face used with option 'ecb-type-tag-display'.

'ecb-type-tag-typedef-face:'
     Define face used with option 'ecb-type-tag-display'.

'ecb-type-tag-union-face:'
     Define face used with option 'ecb-type-tag-display'.

Just call 'customize-face <face-name>' to customize these faces for your
personal taste.  Or customize the related option in the group *note
ecb-face-options::.


File: ecb.info,  Node: ecb-help,  Next: ecb-eshell,  Prev: ecb-faces,  Up: Customizable options

7.3.14 Group ecb-help
---------------------

This group contains settings for the ECB online help:

 -- User Option: help-html-path
     Path where the ECB online help in HTML format resides.  This must
     be the location of the 'ecb.html' which comes with the ECB
     distribution.  If is installed by unpacking the archive available
     on the ECB website then this is the subdir 'ecb-help-html-subdir'
     of the installation directory of ECB. If it is installed as
     XEmacs-package (e.g.  via the package manager of XEmacs) then this
     is probably either the directory "../../html/" or
     "../../etc/ecb/html/" (both relative to the Elisp directory of
     ECB).

     The path can either be an absolute path or a path relative to the
     directory where the Elisp files of ECB are.

     Normally there should be no need to change this option!

 -- User Option: help-info-path
     Path where the ECB online help in info format resides.  This must
     be the location of the 'ecb.info' which comes with the ECB
     distribution.  If is installed by unpacking the archive available
     on the ECB website then this is the subdir 'ecb-help-info-subdir'
     of the installation directory of ECB. If it is installed as
     XEmacs-package (e.g.  via the package manager of XEmacs) then this
     is probably the directory "../../info/" (relative to the Elisp
     directory of ECB).

     The path can either be an absolute path or a path relative to the
     directory where the Elisp files of ECB are.

     Normally there should be no need to change this option!

 -- User Option: show-help-format
     The format 'ecb-show-help' shows its online help.  Allowed values
     are 'info (for the Info format) and 'html (for HTML format).  If
     the value is 'html then 'browse-url-browser-function' says which
     browser is used.

     Note: If you got ECB as a standard XEmacs-package maybe the
     HTML-online-documentation is not included.


File: ecb.info,  Node: ecb-eshell,  Next: ecb-speedbar,  Prev: ecb-help,  Up: Customizable options

7.3.15 Group ecb-eshell
-----------------------

This group contains settings for eshell integration within the ECB:

 -- User Option: eshell-auto-activate
     Startup the eshell and display it in the compile-window.  If
     current layout does not display a compile-window (see
     'ecb-compile-window-height') then nothing is done.

 -- User Option: eshell-buffer-sync
     Synchronize eshell with the default-directory of current
     source-buffer.

     This option takes only effect if a permanant compile-window is used
     in the current layout.

     If 'always then the synchronization takes place always a buffer
     changes in the edit window and if after this the default-directory
     of the new edit-buffer is different from the default-directory of
     the current eshell-buffer.  If value is nil then never a
     synchronization will take place.  If a list of major-modes then
     only if the 'major-mode' of the new buffer belongs NOT to this
     list.

     If the special value 'basic is set then ECB uses the setting of the
     option 'ecb-basic-buffer-sync'.

 -- User Option: eshell-buffer-sync-delay
     Time Emacs must be idle before the eshell-buffer of ECB is
     synchronized.  Synchronizing is done with the current source
     displayed in the edit window.  If nil then there is no delay, means
     synchronization takes place immediately.  A small value of about
     0.25 seconds saves CPU resources and you get even though almost the
     same effect as if you set no delay.

     If the special value 'basic is set then ECB uses the setting of the
     option 'ecb-basic-buffer-sync-delay'.

 -- User Option: eshell-enlarge-when-eshell
     Enlarge the compile-window if it is selected by 'eshell'.  This
     takes only effect if the command 'eshell' is called!

 -- User Option: eshell-fit-window-to-command-output
     Fit the compile-window after an eshell-command to the output.  This
     is done by the function 'ecb-eshell-fit-window-to-output' which is
     added to 'eshell-post-command-hook' ie.  which is running autom.
     after each eshell-command.


File: ecb.info,  Node: ecb-speedbar,  Next: ecb-non-semantic,  Prev: ecb-eshell,  Up: Customizable options

7.3.16 Group ecb-speedbar
-------------------------

 -- User Option: speedbar-before-activate-hook
     Hook running directly before ECB activates the integrated speedbar.

     For example this hook can be used to change the expansion-mode of
     the integrated speedbar via
     'speedbar-change-initial-expansion-list'.  Example:
     (speedbar-change-initial-expansion-list "buffers").

 -- User Option: speedbar-buffer-sync
     Synchronize the speedbar-buffer of ECB automatically with current
     edit buffer.

     If 'always then the synchronization takes place always a buffer
     changes in the edit window, if nil then never.  If a list of
     major-modes then only if the 'major-mode' of the new buffer belongs
     NOT to this list.

     If the special value 'basic is set then ECB uses the setting of the
     option 'ecb-basic-buffer-sync'.

     IMPORTANT NOTE: Every time the synchronization is done the hook
     'ecb-speedbar-buffer-sync-hook' is evaluated.

 -- User Option: speedbar-buffer-sync-delay
     Time Emacs must be idle before the speedbar-buffer of ECB is
     synchronized.  Synchronizing is done with the current source
     displayed in the edit window.  If nil then there is no delay, means
     synchronization takes place immediately.  A small value of about
     0.25 seconds saves CPU resources and you get even though almost the
     same effect as if you set no delay.

     If the special value 'basic is set then ECB uses the setting of the
     option 'ecb-basic-buffer-sync-delay'.

 -- User Option: speedbar-buffer-sync-hook
     ook run at the end of 'ecb-speedbar-buffer-sync'.  See
     documentation of 'ecb-speedbar-buffer-sync' for conditions when
     synchronization takes place and so in turn these hooks are
     evaluated.

     Preconditions for such a hook:

        * Current buffer is the buffer of the currently selected
          edit-window.

        * The speedbar-buffer is displayed in a visible window of the
          ecb-frame (so no check for visibilty of the speedbar-buffer in
          the ecb-frame is necessary in a hook function)

     Postcondition for such a hook: Point must stay in the same
     edit-window as before evaluating the hook.

     Important note: If the option 'ecb-speedbar-buffer-sync' is not nil
     the function 'ecb-speedbar-buffer-sync' is running either every
     time Emacs is idle or even after every command (see
     'ecb-speedbar-buffer-sync-delay').  So if the speedbar-buffer is
     displayed in a window of the ecb-frame (see preconditions above)
     these hooks can be really called very often!  Therefore each
     function of this hook should/must check in an efficient way at
     beginning if its task have to be really performed and then do them
     only if really necessary!  Otherwise performance of Emacs could
     slow down dramatically!


File: ecb.info,  Node: ecb-non-semantic,  Next: ecb-winman,  Prev: ecb-speedbar,  Up: Customizable options

7.3.17 Group ecb-non-semantic
-----------------------------

This group contains settings for parsing and displaying non-semantic
files:

 -- User Option: auto-save-before-etags-methods-rebuild
     Automatic saving of current buffer before rebuilding its methods.

     This option is only relevant for sources which are supported and
     parsed by etags (see 'ecb-process-non-semantic-files').  Because
     etags is an external tool a source-buffer can only be reparsed if
     the buffer is saved to disk.  So the command
     'ecb-rebuild-methods-buffer' checks for sources which are not
     supported by semantic or imenu if either this option is t or if the
     major-mode of the source-buffer is contained in this list: In both
     cases ECB saves the current source-buffer before it re-runs etags
     for reparsing the source.  If nil or if the major-mode is not
     contained then no automatic saving will be done!

     For all source supported by semantic or by imenu this option takes
     no effect.

 -- User Option: non-semantic-exclude-modes
     Exclude modes from parsing with imenu or etags.  Per default, ECB
     tries to parse all file-types not supported by semantic with imenu
     or etags or some other method (for details see the option
     'ecb-non-semantic-parsing-function').  If a file-type can not be
     parsed by semantic, imenu or etags than this simply results in an
     empty method-buffer for this file.  But nevertheless you will get a
     message "Sorry, no support for a file of that extension" which
     comes from the speedbar-library and can not switched off.
     Therefore if a 'major-mode' is known as not parse-able by semantic,
     imenu or etags it can be added to this option and then it will be
     excluded from being tried to parsed.

 -- User Option: non-semantic-methods-initial-expand
     Initially expand all tags for not by semantic supported sources.
     This option can be customized on a major-mode basis, i.e.  if a
     'major-mode' is contained in this option then all tags for this
     modes will be initially expanded - otherwise not.

 -- User Option: non-semantic-parsing-function
     Define mode-dependent parsing functions for non-semantic files.
     This is an alist where the car is a major-mode symbol and the cdr
     is a function-symbol of a function which should be used for parsing
     a non-semantic buffer, i.h.  a buffer for which no semantic grammar
     exists.  Such a function gets one argument - the filename of
     current buffer - and has to generate and return a tag/tag list
     which is understandable by 'speedbar-insert-generic-list'.
     speedbar has already included two functions
     'speedbar-fetch-dynamic-imenu' and 'speedbar-fetch-dynamic-etags'
     which can be used for parsing buffers with imenu rsp.  etags.

     This option takes only effect if 'ecb-process-non-semantic-files'
     is not nil: Then ECB checks for non-semantic buffers if current
     'major-mode' is contained in this option and if yes, then the
     specified parsing function is called; if not then the cars of the
     elements of 'speedbar-dynamic-tags-function-list' are called in
     that sequence they are listed in this variable.  See option
     'speedbar-dynamic-tags-function-list' for further details.

     In most cases imenu-parsing is preferable over etags-parsing
     because imenu operates on Emacs-buffers and needs no external tool
     and therefore parsing works also if current contents of a buffer
     are not saved to disk.  But maybe sometimes etags may return better
     parsing results

     IMPORTANT: if imenu-parsing should be used then the option
     'speedbar-use-imenu-flag' must be set to not nil!

 -- User Option: process-non-semantic-files
     Display content of non-semantic-files in the ECB-methods-buffer.
     See also 'ecb-non-semantic-parsing-function'.

 -- User Option: rebuild-non-semantic-methods-before-hook
     Hook running at beginning of the function
     'ecb-rebuild-methods-buffer-for-non-semantic'.  This function is
     always called by the command 'ecb-rebuild-methods-buffer' for not
     semantic supported source-types.

     Every function of this hook gets one argument: The complete
     filename of the current source-buffer in the edit-window.  The
     Method-buffer is only rebuild by
     'ecb-rebuild-methods-buffer-for-non-semantic' if either the hook
     contains no function (the default) or if no function of this hook
     returns nil!  See 'run-hook-with-args-until-failure' for
     description how these function are processed.


File: ecb.info,  Node: ecb-winman,  Next: ecb-mode-line,  Prev: ecb-non-semantic,  Up: Customizable options

7.3.18 Group ecb-winman
-----------------------

This group contains settings for supporting several window-managers:

 -- User Option: winman-escreen-number
     Number of the escreen which is reserved for ECB. If you go to the
     escreen with this number you go always to the escreen with
     activated ECB. All other escreen-numbers are escreens with
     deactivated ECB!

 -- User Option: winman-winring-name
     Name of the winring-window-configuration reserved for ECB. If you
     go to the window-configuration with this name you go always to the
     window-configuration with activated ECB. All other
     window-configuration are configurations with deactivated ECB!


File: ecb.info,  Node: ecb-mode-line,  Next: ecb-version-control,  Prev: ecb-winman,  Up: Customizable options

7.3.19 Group ecb-mode-line
--------------------------

This group contains settings for the modelines of the ECB-tree-buffers:

 -- User Option: mode-line-data
     Data shown in the modelines of the special ECB-buffers.  Everey
     element of this list is a cons-cell where the car is used to define
     a buffer-name and the cdr to define the modeline-data for that
     buffer.  For details about how to defining a buffer-name see
     'ecb-mode-line-prefixes' - its completely the same.

     The cdr is the data for ths modeline and can either be the symbol
     'sel-dir' or 'sel-source' whereas the former one displays the
     current selected directory as modeline-data and the latter one the
     current selected source-file (without path).

     In addition to these two predefined values for every special
     ECB-buffer a plain string (which is displayed) or a function can be
     specified which gets three args (name of the buffer, current
     selected directory and current selected source-file) and must
     return a string which will be displayed in the modeline (or nil if
     no data should be displayed).  Such a function can add the
     text-property 'help-echo' to the result-string.  Then this
     help-string will be displayed when the user moves the mouse over
     this section of the modeline.

     If a special ECB-buffer should not display special data in its
     modeline then this buffer-name should either not being added to
     this option or added with "No data" (= nil as cdr).

     The whole modeline of the special ECB-buffer consists of the prefix
     of 'ecb-mode-line-prefixes' and the data of 'ecb-mode-line-data' -
     eventually prepended by the window-number, see
     'ecb-mode-line-display-window-number'.

 -- User Option: mode-line-data-face
     Face used for the data in the mode-line.  See 'ecb-mode-line-data'.
     For XEmacs the face should inherit from the face 'modeline' (see
     'set-face-parent')!

 -- User Option: mode-line-display-window-number
     Display in the modeline of every special ECB-window the
     window-number.  The left-top-most window in a frame has the
     window-number 0 and all other windows are numbered with increasing
     numbers in the sequence, functions like 'other-window' or
     'next-window' would walk through the frame.

     This can be used to jump to windows by number with commands like:

            (defun my-switch-to-window-number (number)
              ``Switch to the nth window''
              (interactive ``P'')
              (if (integerp number)
                  (select-window (nth number (window-list)))))

     Currently this feature is only available for GNU Emacs 21.X,
     because neither GNU Emacs < 21 nor XEmacs can evaluate dynamically
     forms in the mode-line.

 -- User Option: mode-line-prefixes
     Prefixes shown in the modelines of the special ECB-buffers.  The
     displayed prefix then looks like: "[ <PREFIX>[: ]]", means if a
     prefix is defined for an special ECB-buffer then a single space is
     prepended and if there is additional text to display (e.g.  the
     current directory in the sources buffer, see 'ecb-mode-line-data')
     then also the string ": " is appended.

     Everey element of this list is a cons-cell where the car is used to
     define a buffer-name and the cdr to define the modeline-prefix for
     that buffer.

     The buffer-name can either be defined as plain string or with a
     symbol which contains the buffer-name as value.  The latter one is
     recommended to define a prefix for one of the builtin
     ECB-tree-buffers because then simply the related option-symbol can
     be used.  To add a prefix for the builtin directories tree-buffer
     just set the symbol 'ecb-directories-buffer-name' as car.

     The cdr is the prefix for a buffer and can either be a string which
     used as it is or a function-symbol which is called with three
     argument (the buffer-name, the current selected directory and the
     current selected source-file) and must return either nil (for no
     prefix) or a string which is then used a prefix.  Such a function
     can add the text-property 'help-echo' to the result-string.  Then
     this help-string will be displayed when the user moves the mouse
     over this section of the modeline.

     If a special ECB-buffer should not have a prefix in its modeline
     then this buffer-name should either not being added to this option
     or added with "No prefix" (= nil as cdr).

 -- User Option: mode-line-prefix-face
     Face used for the prefix in the mode-line.  See
     'ecb-mode-line-prefixes'.  For XEmacs the face should inherit from
     the face 'modeline' (see 'set-face-parent')!

 -- User Option: mode-line-win-nr-face
     Face used for the window-number in the mode-line.  See
     'ecb-mode-line-display-window-number'.  For XEmacs the face should
     inherit from the face 'modeline' (see 'set-face-parent')!


File: ecb.info,  Node: ecb-version-control,  Prev: ecb-mode-line,  Up: Customizable options

7.3.20 Group ecb-version-control
--------------------------------

This group contains settings for the version-control-support of ECB:

 -- User Option: vc-directory-exclude-regexps
     Which directories should be excluded from VC-state-check.  If a
     directory matches any of the regexps of this option the VC-state of
     its sources will not be checked - This option takes only effect if
     'ecb-vc-enable-support' is not nil.

 -- User Option: vc-enable-support
     Enable support for version-control (VC) systems.  If on then in the
     directories-buffer (if the value of the option
     'ecb-show-sources-in-directories-buffer' is on for current layout),
     the sources-buffer and the history-buffer all file-items are
     displayed with an appropriate icon in front of the item-name to
     indicate the VC-state of this item.  If off then no
     version-control-state checking is done.

     Because this check can be take some time if files are managed by a
     not local Version-control-server ECB performs this check stealthy
     (see 'ecb-stealthy-tasks-delay') so normally there should no
     performance-decrease or additional waiting-time for the user.  But
     to get sure this option offers three choices: 't', 'unless-remote'
     and 'nil'.  See the option 'ecb-prescan-directories-for-emptyness'
     for an explanation for these three choices.

     The option 'ecb-vc-directory-exclude-regexps' offers are more fine
     granularity to exclude the sources of certain directories from the
     VC-state-check.

     See 'ecb-vc-supported-backends' and 'ecb-vc-state-mapping' how to
     customize the VC-support itself.

 -- User Option: vc-state-mapping
     Mapping between VC-states from the backends and ECB-known
     VC-states.  ECB understands the following state-values:

     'up-to-date'
          The working file is unmodified with respect to the latest
          version on the current branch, and not locked.

     'edited'
          The working file has been edited by the user.  If locking is
          used for the file, this state means that the current version
          is locked by the calling user.

     'needs-patch'
          The file has not been edited by the user, but there is a more
          recent version on the current branch stored in the master
          file.

     'needs-merge'
          The file has been edited by the user, and there is also a more
          recent version on the current branch stored in the master
          file.  This state can only occur if locking is not used for
          the file.

     'added'
          The working file has already been added/registered to the
          VC-system but not yet commited.

     'unlocked-changes'
          The current version of the working file is not locked, but the
          working file has been changed with respect to that version.
          This state can only occur for files with locking; it
          represents an erroneous condition that should be resolved by
          the user.

     'ignored'
          The version-control-system ignores this file (e.g.  because
          included in a .cvsignore-file in case of CVS).

     'unknown'
          The state of the file can not be retrieved; probably the file
          is not under a version-control-system.

     All state-values a check-vc-state-function of
     'ecb-vc-supported-backends' can return must have a mapping to one
     of the ECB-state-values listed above.  If for a certain
     backend-VC-state no mapping can be found then per default 'edited
     is assumed!

     The default value of this option maps already the possible returned
     state-values of 'vc-state' and 'vc-recompute-state' (both GNU
     Emacs) and 'vc-cvs-status' (Xemacs) to the ECB-VC-state-values.

 -- User Option: vc-supported-backends
     Define how to to identify the VC-backend and how to check the
     state.  The value of this option is a list containing cons-cells
     where the car is a function which is called to identify the
     VC-backend for a DIRECTORY and the cdr is a function which is
     called to check the VC-state of the FILEs contained in DIRECTORY.

     Identify-backend-function: It gets a full directory-name as
     argument - always without ending slash (rsp.  backslash for native
     Windows-XEmacs) - and has to return a unique symbol for the
     VC-backend which manages that directory (e.g.  'CVS for the
     CVS-system or 'RCS for the RCS-system) or nil if the file is not
     managed by a version-control-system.

     Check-vc-state-function: It gets a full filename (ie.  incl.  the
     complete directory-part) and has to return a symbol which indicates
     the VC-state of that file.  The possible returned values of such a
     check-vc-state-function have to be mapped with
     'ecb-vc-state-mapping' to the allowed ECB-VC-state values.

     ECB runs for a certain DIRECTORY all identify-backend-functions in
     that order they are listed in this option.  For the first which
     returns a value unequal nil the associated check-state-function is
     used to retrieve the VC-state of all sourcefiles in that DIRECTORY.

     There is no need for the identify-backend-function or the
     check-vc-state-function to cache any state because ECB
     automatically caches internally all necessary informations for
     directories and files for best possible performance.

     To prepend ECB from checking the VC-state for any file set
     'ecb-vc-enable-support' to nil.

     Default value: Support for CVS, RCS, SCCS, Subversion, Git, Bazaar,
     Monotone and Mercurial.  To identify the VC-backend the functions
     'ecb-vc-dir-managed-by-CVS', 'ecb-vc-dir-managed-by-RCS' rsp.
     'ecb-vc-dir-managed-by-SCCS' rsp.  'ecb-vc-dir-managed-by-SVN' rsp.
     'ecb-vc--dir-managed-by-GIT' rsp.  'ecb-vc-dir-managed-by-BZR' rsp.
     'ecb-vc-dir-managed-by-MTN' rsp.  'ecb-vc-dir-managed-by-HG'are
     used.

     For all eight backends the function 'ecb-vc-state' of the
     VC-package is used by default (which uses a heuristic and therefore
     faster but less accurate approach), but there is also
     'ecb-vc-recompute-state' available which is an alias for
     'vc-recompute-state' (which returns accurate state-values by
     calling the backend which can be slow especialy for remote
     root-repositories!)

     Example: If 'ecb-vc-recompute-state' (to get real state-values not
     only heuristic ones) should be used to check the state for
     CVS-managed files and 'ecb-vc-state' for all other backends then an
     element (ecb-vc-dir-managed-by-CVS .  ecb-vc-recompute-state)
     should be added at the beginning of this option.


File: ecb.info,  Node: Submitting problem report,  Next: Upgrading,  Prev: Customizing,  Up: Top

8 Submitting a problem report
*****************************

If you run into problems with ECB you should first take a look into

   - *note FAQ:: or
   - *note Conflicts and bugs:: or
   - *note Common use-cases:: or
   - the appropriate section of this online-manual.

If your problem(s) still remain you can/should send a problem report to
the ECB mailing list <ecb-list@lists.sourceforge.net>.  ECB offers you a
command which does all necessary for you to send a problem report.  Just
call 'ecb-submit-problem-report'!  Please read the documentation of this
command, see *note Interactive ECB commands::.

*IMPORTANT*: Cause of extra appearance of SPAM in the mailing-lists,
SourceForge has changed its policy: Now it is only possible to post to
the mailing-list for users who have subscribed this mailing-list.  So
please be aware you will not be able to send comments, bug reports and
improvement suggestions before you have subscribed the ECB-mailing-list.
See the section "Mailing-list" at the ECB-website at
<http://ecb.sourceforge.net> how to do this.

If you think there are problems concerning parsing-results for certain
sources supported by semantic then you should call
'ecb-dump-semantic-toplevel' for the problematic source-buffer *BEFORE*
you call 'ecb-submit-problem-report' because this "dump"-command
generates for the current-buffer a new buffer with name "*ecb-tag-dump*"
which contains all semantic-tags for this source.  The contents of this
"*ecb-tag-dump*" will then autom.  be added to the problem-report
generated by 'ecb-submit-problem-report'!

This command creates a problem-report buffer for you.  After that you
get a menu "Mail" (dependent on the mail-package used, the menu can have
a different name) with commands to send the problem report.  But for
this the variable 'mail-user-agent' must be configured right for your
system.  If you canﾴt get working this mechanism you can simply copy the
whole problem-report buffer after filling it out and sending it with
your standard mail-client to <ecb-list@lists.sourceforge.net>!

Please read also the documentation of the option 'ecb-debug-mode' and
switch on the debug mode of ECB (also available in the Help-menu of
ECB!) before submitting a problem-report!


File: ecb.info,  Node: Upgrading,  Next: Common use-cases,  Prev: Submitting problem report,  Up: Top

9 Upgrading and downloading packages
************************************

This chapter describes all aspects of upgrading to a newer version of
ECB.

The first section describes how to download and install a new package
from the web, where "package" means either ECB itself or the required
library CEDET

After installing a new ECB-version ECB checks if the values of the
customized ECB-options are still compatible.  If not ECB does some smart
things.  This is the topic of the second section.

* Menu:

* Downloading new versions::    How to download newer versions of packages
* Auto. option-upgrading::      ECB can auto. upgrade your options


File: ecb.info,  Node: Downloading new versions,  Next: Auto. option-upgrading,  Prev: Upgrading,  Up: Upgrading

9.1 Downloading new versions of ECB and/or CEDET
================================================

*Please note*: THE PACKAGE-DOWNLOAD-FEATURE OF ECB IS COMPLETELY
DEACTIVATED SINCE VERSION 2.33!  Please got to the website of ECB and
download and install "by hand":

  1. Download ECB

     Go to <http://ecb.sourceforge.net> and download the latest release
     (or if you are brave and tough the latest CVS-snapshot) from the
     download section.

     Save the archive (either *.tar.gz or *.zip) in a suitable location
     of your disk.

  2. Extract the downloaded ECB-archive

     Extract the archive with a suitable extraction-tool.  The archive
     will extract into a new directory 'ecb-<version>' whereas <version>
     is either the version number of the downloaded release or "latest"
     in case of the CVS-snapshot.  (example for a release: The archive
     extracts into a new subdirectory 'ecb-2.33'.

     The newly created subdirectory contains all files of ECB in the
     needed subdirectory structure.

     *Note*: Do not change the subdirectory structure of the extracted
     archive - this will prevent ECB from working correctly!

  3. Install and setup ECB

     See *note Installation::.

  4. Start ECB

     ECB will perform some requirements checks, especially for CEDET.
     *Remark*: By setting the option 'ecb-version-check' to 'nil' you
     can prevent ECB from checking correct versions of CEDET but it's
     strongly recommended not to do this!

  5. (Optional) Download and install a newer version of CEDET

     If the version-check in (4) fails then you have to install a newer
     version of CEDET which fulfill the version-number ECB reports to
     you after its version check.

     See the instruction of CEDET how to do this.  You will find CEDET
     at <http://cedet.sourceforge.net>

     For setting up CEDET see *note Setting up CEDET/semantic::.

     If you have installed a new CEDET-version you *MUST*
     re-byte-compile ECB unless you run ECB not byte-compiled!


File: ecb.info,  Node: Auto. option-upgrading,  Prev: Downloading new versions,  Up: Upgrading

9.2 Automatic upgrading of options
==================================

* Menu:

* User interface::              Options and commands you should know
* Background information::      Maybe some interesting informations


File: ecb.info,  Node: User interface,  Next: Background information,  Prev: Auto. option-upgrading,  Up: Auto. option-upgrading

9.2.1 User interface for option-upgrading
-----------------------------------------

There are two interactive commands (*note Interactive ECB commands::):

   - 'ecb-upgrade-options': Does all necessary beginning with a
     incompatibility-check for all options, upgrading/resetting
     incompatible options and ending with the display of all upgraded or
     reset options.

   - 'ecb-display-upgraded-options': Displays an information-buffer
     which options have been upgraded or reset.  Offers two buttons
     where the user can decide if the upgraded options should also being
     saved by ECB for future settings or if the buffer should be killed.

If the option 'ecb-auto-compatibility-check' has a non-nil value (which
is the default) then ECB does all this stuff automatically at startup.
This is very recommended!

If you are interested in some background information, read *note
Background information::!


File: ecb.info,  Node: Background information,  Prev: User interface,  Up: Auto. option-upgrading

9.2.2 Background information
----------------------------

Big packages like ECB will be enhanced and developed continuously so
sometimes a new version must be released.  Such packages offer in
general a lot of customizable options so probably some of these options
change the type or are renamed because the old type and/or name of the
option makes no sense in the new release.

Especially options which have changed the type of their value are now a
problem for the user which want to upgrade to the latest ECB-version: If
the user has saved a certain value for option X in its file '.emacs' but
the type of this saved value doesn't match the new defined type in the
defcustom-form after an ECB-upgrade then there can occur serious
problems like ECB can not be started anymore or even Emacs can not be
started without errors.

Until now there was only one way to fix these problems: The user must
manually edit his file '.emacs' and remove all entries for options which
have now another type.  After this and after restarting Emacs the new
default-values of the type-changed options in the new ECB-release are
active and the user can go on using Emacs and ECB. But this approach to
fix the incompatible-option-problem has two serious drawbacks:

  1. The user must manually edit the customize-section in his file
     '.emacs'.  This should normally not be done and if then only by
     old-handed Emacs-users.

  2. The customized value of the option X in the old-release (with the
     old type) is lost because after removing the related entry from the
     file '.emacs' the new default-value is active, so the user must
     re-customize the option X.

OK, this is one half of the option-upgrade-problem but a new ECB-release
can also rename a option from name X to name Y because the new name Y
makes much more sense and/or is more mnemonic.  If only the name has
changed but not the type this is not a serious problem like above but
also annoying because the customized value of the old-option X takes no
effect in the new release but instead the default-value of the
new-option Y is now active.  But nevertheless this problem has the
drawback number 2 (see above).

The last category of upgrade-problems is a renamed option which has also
changed its type.

ECB has a solution for all these problems:

   * It checks all customized values of all ECB-options if they are
     still type-compatible.  If not then it tries to upgrade the
     old-value to the new value-type and if this is not possible then it
     resets the option to the new default value and offers then to store
     it via customize in the .emacs-file (or in any file which is used
     for customized options).  But ECB does not touch any
     customization-file without asking the user!

   * It offers a special constant 'ecb-upgradable-option-alist' which
     allows the ECB-maintainers to define special transformings for
     renamed options so even the value of an old-option X can be savely
     transformed to the new-option Y and the old setting is not lost.

All these checks and transformings are done at beginning of activating
ECB - if the option 'ecb-auto-compatibility-check' is not nil.  If ECB
has recognized incompatible or renamed options it does its
upgrading/reseting-job so all ECB-options have correct types so ECB can
start correct.  After ECB is started it displays a list of all upgraded
or reseted option with their old and new values.


File: ecb.info,  Node: Common use-cases,  Next: Elisp programming,  Prev: Upgrading,  Up: Top

10 Handling of common use-cases
*******************************

This chapter lists some common (and also some non-common) use-cases of
ECB and gives a detailed description for each one.  This contains also
some tips and tricks how to deal best with some situations.

* Menu:

* Changing faces::              Changing faces in the ECB tree-buffers
* Small screens::               Working with small screens
* Big screens::                 Working with big screens
* Simulating speedbar::         Simulating speedbar without an extra frame
* Integrating speedbar::        Integrating speedbar in the ECB-frame
* Large directories::           Working with large directories
* Remote directories::          Working with remote directories
* Version-control support::     Supporting Version control systems
* Using eshell::                Optimal using of eshell in ECB
* Grepping directories::        Grepping directories with ECB
* Working with JDEE::           Working best with ECB and JDEE
* Compile-window on demand::    Displaying the compile-window on demand
* Non-semantic sources::        Parsing and displaying non-semantic sources
* Hide-show::                   Using hide-show from the methods-buffer-menu
* Window-managers and ECB::     Support of several Emacs-window-managers
* Virtual folders in History::  Simulating something like virtual folders


File: ecb.info,  Node: Changing faces,  Next: Small screens,  Prev: Common use-cases,  Up: Common use-cases

10.1 Changing faces in the ECB tree-buffers
===========================================

There are two basic faces:

   * 'ecb-default-general-face': Basic face for displaying an
     ECB-tree-buffer.

     Itﾴs recommended to define the font-family, the font-size, the
     basic color etc.  with this face.

     In GNU Emacs 21.X all faces (even the face
     'ecb-default-highlight-face') used in the ECB tree-buffers inherit
     from this face.  Therefore the default attributes like font etc.
     of a face used in a tree-buffer can be very easily changed with
     face 'ecb-default-general-face'.

     With XEmacs there is no inheritance-feature but the options
     'ecb-directories-general-face', 'ecb-sources-general-face',
     'ecb-methods-general-face' and 'ecb-history-general-face' offer the
     choice to use the face 'ecb-default-general-face' so also with
     XEmacs the basic face-settings can be easily changed just by
     customizing the face 'ecb-default-general-face'.

   * 'ecb-default-highlight-face': Basic face for highlighting the
     current node in an ECB-tree-buffer.

     In GNU Emacs 21.X all highlighting faces used in the ECB
     tree-buffers inherit from this face.  Therefore the default
     attributes like font etc.  of a highlighting face used in a
     tree-buffer can be very easily changed with face
     'ecb-default-highlight-face'.

     With XEmacs there is no inheritance-feature but the options
     'ecb-directory-face', 'ecb-source-face', 'ecb-method-face' and
     'ecb-history-face' offer the choice to use the face
     'ecb-default-highlight-face' so also with XEmacs the basic
     face-settings can be easily changed just by customizing the face
     'ecb-default-highlight-face'.

With these faces you can change the basic attributes easily and fast for
ALL ECB-tree-buffers.  But you are also able to display each
ECB-tree-buffer with different faces, see the different options for
every tree-buffer mentioned above.

*Please note* (only for XEmacs users): Cause of the lack of the
font-inheritance feature using ONE other font for the ECB-methods buffer
can NOT be achieved just by setting 'ecb-methods-general-face' to
'ecb-default-general-face' and changing the font of this default face.
In addition you have to set the same font also for the face
'ecb-bucket-node-face' like in the following example:

     (defconst my-ecb-font
               "-outline-Courier-normal-normal-13-97-96-96-c-*-iso8859-1")
     (set-face-font 'ecb-default-general-face my-ecb-font)
     (set-face-font 'ecb-bucket-node-face my-ecb-font)

This code sets the new defined font 'my-ecb-font' as font for all(1)
ECB-tree-buffers (incl.  the methods buffer).

   ---------- Footnotes ----------

   (1) Of course 'ecb-directories-general-face',
'ecb-sources-general-face', 'ecb-methods-general-face' and
'ecb-history-general-face' must be set to 'ecb-default-general-face'!


File: ecb.info,  Node: Small screens,  Next: Big screens,  Prev: Changing faces,  Up: Common use-cases

10.2 Working with small screens
===============================

If your screen is very small so you need every square-centimeter for
displaying the buffer which you want to edit, ECB offers you a special
layouts, where only the ECB-methods buffer is displayed on top or on
left-side.  Here comes what you should/can do to work best with ECB in
such a situation:

   * First customize your ECB:

       1. Customize 'ecb-layout-name' to layout-name "top2" (on top) or
          "left9" (on left-side)

       2. Ensure that 'ecb-compile-window-height' is nil.

       3. Optional: Adjust the 'ecb-windows-height' rsp.
          'ecb-windows-width'.

       4. Save your changes.

   * To edit your buffers: Call 'ecb-toggle-ecb-windows' (also available
     via the menu "ECB" and by 'C-c . lw') or 'ecb-hide-ecb-windows' to
     hide the ECB-method buffer so you get all the place of your screen
     for editing.

   * To browse and select functions: Call 'ecb-toggle-ecb-windows' or
     'ecb-show-ecb-windows' to make the ECB-method buffer visible if not
     already.  If you want select a method/variable with the keyboard
     instead with the mouse you should read the section *note Using the
     keyboard:: in this online help!

The possibility of hiding temporally the ECB windows like described
above is also useful for all the other layouts.


File: ecb.info,  Node: Big screens,  Next: Simulating speedbar,  Prev: Small screens,  Up: Common use-cases

10.3 Working with big screens
=============================

ECB offers a layout type "left-right" with special ECB-tree-windows on
the left and right side of the edit-area.  The layouts "leftright1" and
"leftright2"are examples for this layout type.  See *note Creating a new
ECB-layout:: and *note The layout-engine:: for details about how to
create or program more layouts of this type.

Such a layout is eventually the best choice for big screens because the
several ECB-tree-windows are bigger and can display more informations
without scrolling.

With such a layout it can could be senseful to reduce the value of the
option 'ecb-windows-width' compared to layouts of type left or right.  A
value of max.  0.25 should be enough.


File: ecb.info,  Node: Simulating speedbar,  Next: Integrating speedbar,  Prev: Big screens,  Up: Common use-cases

10.4 Simulating speedbar without an extra frame
===============================================

You can simulate a speedbar-like layout within ONE frame by doing the
following:

  1. Customize 'ecb-layout-name' to layout name "left9", "left12",
     "left13" or "left14" dependent to what you like.

  2. Optional: Ensure that 'ecb-compile-window-height' is nil.

  3. Optional: Adjust the 'ecb-windows-width'.

  4. Optional: Customize 'ecb-toggle-layout-sequence' and toggle very
     fast between several layouts by 'ecb-toggle-layout'.  See the
     doc-strings!

  5. Optional: Customize 'ecb-show-sources-in-directories-buffer' to not
     nil if the chosen layout (see 1.  and 4.)  contains a
     directories-tree-buffer.

  6. Save your changes.

But not only simulating speedbar is possible but also full integrating
it into the ECB and the ECB-frame, *Note Integrating speedbar::.


File: ecb.info,  Node: Integrating speedbar,  Next: Large directories,  Prev: Simulating speedbar,  Up: Common use-cases

10.5 Integrating speedbar in the ECB-frame
==========================================

It is very easy to integrate speedbar into ECB. There are two different
ways to do this:

  1. You can either use speedbar in the directories-, sources- or
     methods-window of ECB instead of the built-in directory-, sources-
     or methods-browser of ECB. This can be done via the option
     'ecb-use-speedbar-instead-native-tree-buffer'.

  2. Or you can integrate an extra speedbar-window into a layout
     independent of the existence of a directory-, sources- or
     methods-window.  For this you can either use the built-in layout
     "left-dir-plus-speedbar" or you have to create your own layout
     interactively with the command 'ecb-create-new-layout'.  This way
     is not described in more details because there is nothing more to
     describe - just create your layout.

In general integrating speedbar into the ECB-frame makes sense for
people...

   * ...who like the speedbar way of handling directories and
     source-files but also like the ECB-way of displaying the
     buffer-contents (like methods and variables in a source-file).
     This people should use the option
     'ecb-use-speedbar-instead-native-tree-buffer' and set it to 'dir'.

   * ...who like the speedbar way of browsing things like directories,
     files, file-contents etc.  but who dislike the extra
     speedbar-frame.

Note: It is not necessary to integrate speedbar if you only want parsing
sources not supported by semantic.  From version 1.94 on ECB supports
native parsing and displaying of such sources (*note Non-semantic
sources::)!

Regardless the group you belong, with the speedbar-integration feature
of ECB you can combine both worlds, the speedbar- and the ECB-world:

  1. Choose a layout which either contains a directories- or a
     sources-window but not both of them(1).

     Because speedbar has also display-modes for buffers and info-nodes
     and some other useful things (which can be changed by the
     speedbar-command 'speedbar-change-initial-expansion-list' we
     recommend layouts like "left15" or "leftright3" for using with
     speedbar.

  2. Set the option 'ecb-use-speedbar-instead-native-tree-buffer' to not
     nil.  After this the chosen window of ECB will contain a full
     featured speedbar (the only difference to standard speedbar is not
     residing in an extra frame).

Note: If you belong to the first group of people (s.a.)  a similar
effect and usability is available by setting
'ecb-use-speedbar-instead-native-tree-buffer' to nil and setting
'ecb-show-sources-in-directories-buffer' to not nil, because this
combination displays also directories and sources in one window.

So with the option 'ecb-use-speedbar-instead-native-tree-buffer' you
have the choice which way of displaying and handling "things"
(directories, sources, methods...)  you want (the speedbar- or the
ECB-way).

During speedbar is running within ECB (i.e.
'ecb-use-speedbar-instead-native-tree-buffer' is not nil) the
speedbar-command 'speedbar' is disabled and the speedbar-command
'speedbar-get-focus' switches between the speedbar-window and the
edit-window(2).

*IMPORTANT*: ECB can only integrate speedbar-versions >= 0.14beta1!  If
you use lower versions of speedbar
'ecb-use-speedbar-instead-native-tree-buffer' has no effect.

   ---------- Footnotes ----------

   (1) Only one of them is needed if you use speedbar because speedbar
displays directories and sources in one window.  But if you like wasting
space then you can also use a layout with both windows...

   (2) The standard behavior is switching between the speedbar-frame and
the attached frame, but this make obviously no sense during running
speedbar with ECB.


File: ecb.info,  Node: Large directories,  Next: Remote directories,  Prev: Integrating speedbar,  Up: Common use-cases

10.6 Working with large directories
===================================

If 'ecb-source-path' contains directories with many files and subdirs,
especially if these directories are mounted net-drives ("many" means
here something > 500, dependent on the speed of the net-connection and
the machine), actualizing the sources- and/or directories- buffer of ECB
(if displayed in current layout!)  can slow down dramatically.  If this
is a problem the contents of certain directories and also the contents
of the sources-buffer can be cached which increases the speed a lot.
See the option 'ecb-cache-directory-contents'.

IMPORTANT: The full speed-advantage of this cache-mechanism is only
available if 'ecb-show-sources-in-directories-buffer' is 'nil', i.e.
sources of a directory are displayed in the ECB-sources-window.  The
reason is that only with a sources window the tree-buffer contents for
the sources can be cached (i.e.  the buffer-content of the
ECB-sources-window) whereas with sources displayed in the directories
buffer only the disk-contents of a directory are cached - which
increases speed too but not so much as with sources displayed in the
extra window ECB-sources.

The cache of a directory can be only refreshed by a POWER-click (with
mouse or keyboard) onto the related directory-node in the
directories-buffer of ECB (*note Using the mouse::).

See also the option 'ecb-cache-directory-contents-not'.  Here are some
useful settings for both of these options:

   * Cache all directories with more than 500 entries: Set
     'ecb-cache-directory-contents' to ((".*" .  500)) and set
     'ecb-cache-directory-contents-not' to nil.

   * Cache only all directories > 200 beginning with /usr/ Set
     'ecb-cache-directory-contents' to (("^/usr/.*" .  200)) and set
     'ecb-cache-directory-contents-not' to nil.

   * Cache all directories > 500 but NOT these beginning with /usr/: Set
     'ecb-cache-directory-contents' to ((".*" .  500)) and set
     'ecb-cache-directory-contents-not' to ("^/usr/.*").

Another way for getting a faster overlook for large directories with
many source-entries is to apply an online-filter to the sources-buffer.
This can be done via the command 'ecb-sources-filter' or via the
popup-menu of the sources-buffer.


File: ecb.info,  Node: Remote directories,  Next: Version-control support,  Prev: Large directories,  Up: Common use-cases

10.7 Working with remote directories
====================================

The term "remote" means directories which are remote in the sense of
TRAMP(1), ANGE-FTP(2) or EFS(3). Each of these Emacs-addons is intended
to make editing directories and files on remote machines as transparent
as possible.

10.7.1 General remarks
----------------------

ECB supports such remote directoires out of the box and completely
transparently, i.e.  you can add remote directories to the option
'ecb-source-path' without any restriction.  ECB will handle these
directories transparently with the appropriate tool - either TRAMP,
ANGE-FTP or EFS. So when working with such a remote directory is
possible without ECB it will be possible too with active ECB - at least
as long you are "connected"!

*Caution*: Suppose you have added a remote dir (e.g.
"user@host.at.a.server:/dir/") to 'ecb-source-path' and you start ECB
when you are offline, means there can be no connection established to
the remote computer (e.g.  "host.at.a.server").  Each time ECB has to
process a remote path ECB pings via the ping-program the remote host (in
the example above it would ping the host "host.at.a.server") to test if
it is accessible.  If not then this path will be ignored by ECB(4).
Ensure that ECB calls your ping-program (see 'ecb-ping-program') with
the right options (see 'ecb-ping-options').  To avoid to many pings to
the same host ECB caches the ping result so there should be no
performance decrease.  But to ensure still correct accessible-results
and to avoid using outdated cache-results ECB discards the cached value
of the accessible-state of a certain host after a customizable
time-interval (please read the documentation of
'ecb-host-accessible-check-valid-time'!).

10.7.2 Excluding remote directories from time-consuming tasks
-------------------------------------------------------------

ECB performs some tasks stealthily and interruptable by the user (see
the option 'ecb-stealthy-tasks-delay' for additional explanations)
because these tasks are time-consuming and could otherwise ECB block.
Especially for remote directories these special tasks can cause annoying
blocks of Emacs (*note Stealthy background tasks::).

Therefore it is probably the best to switch on each of the stealthy
tasks with the 'unless-remote' which is the default activation (*note
Stealthy background tasks::).  So a certain stealthy task will be
swtiched on for all local directories (and also for all mounted drives
in the LAN) but not for real remote directories used via TRAMP, ANGE-FTP
or EFS.

10.7.3 Caching the contents of remote directories
-------------------------------------------------

ECB caches per default the contents of remote directories to avoid
annoying delays.  The cache is done via the option
'ecb-cache-directory-contents' which contains an entry which covers the
syntax of remote directories.  If you do not want this caching (which is
strongly recommened) you have to remove this entry from this option.

   ---------- Footnotes ----------

   (1) TRAMP stands for 'Transparent Remote (file) Access, Multiple
Protocol'.  This package provides remote file editing, similar to
ANGE-FTP.

   (2) This package attempts to make accessing files and directories
using FTP from within Emacs as simple and transparent as possible.

   (3) A system for transparent file-transfer between remote hosts using
the FTP protocol within Emacs

   (4) This avoids long lasting and annoying blocking of ECB when a
remote-path is not accessible: Without a ping ECB would always try to
open this directory through the appropriate library (e.g.  TRAMP) and it
would depend on the timeout-mechanism of this library (e.g.  TRAMP has
60 seconds) how long ECB would be blocked.  First after this timeout ECB
could start working!  A fast "pre"-ping avoids this problem!


File: ecb.info,  Node: Version-control support,  Next: Using eshell,  Prev: Remote directories,  Up: Common use-cases

10.8 Supporting Version control systems
=======================================

Beginning with version 2.30 ECB supports Version-control systems (in the
following named VC-systems).  This means the special tree-buffers of ECB
display files managed by a VC-system with an appropriate image-icon(1)
in front of the filename.

The following four options allow full control over this feature (see
also *note ecb-version-control:::

'ecb-vc-enable-support'
     Enable or disable this feature.
'ecb-vc-supported-backends'
     The most important option for this feature.  Allows to specify how
     ECB should test if a directory is managed by a VC-system (how to
     identify the VC-backend of a directory) and - if yes - how it
     should check the VC-state of a certain file.  The former ones are
     called "identify-backend-functions" and the latter ones
     "check-state-functions".
'ecb-vc-directory-exclude-regexps'
     Allows excluding certain directories (on a regexp-basis) from the
     VC-support even if they are managed by a VC-system.
'ecb-vc-state-mapping'
     Defines the mapping between the state-values returned by a
     check-state-function (a function set in 'ecb-vc-supported-backends'
     and used for getting the VC-state of a file, e.g.  'vc-state') and
     the allowed state-values ECB can understand.

Probably the default settings will fit your needs but to get sure you
should carefully read the documentation of these options!

The following subsection give you important informations about
identify-backend-functions, check-state-functions, about working with
remote repositories.

* Menu:

* Identifying backends::        How ECB identifies the VC-backend of a dir
* Checking the state::          How ECB checks the VC-state of a file
* Remote repositories::         What you should know about this
* Refreshing the VC-state::     How to refresh when state changed outside
* Adding new backends::         Necessary steps for adding new backends
* Known VC-problems::           Currently known problems of the VC-support

   ---------- Footnotes ----------

   (1) Of course only when Emacs is capable to display images; otherwise
a suitable ascii-icon will be displayed.


File: ecb.info,  Node: Identifying backends,  Next: Checking the state,  Prev: Version-control support,  Up: Version-control support

10.8.1 How ECB identifies the VC-backend of a dir
-------------------------------------------------

ECB tries all functions added as identify-backend-funtions to the option
'ecb-vc-supported-backends' until one of them returns not 'nil' but a
symbol which identifies the backend (e.g.  'CVS').  After this check ECB
stores the result of this check (i.e.  either the identified backend or
the fact that the directory is not managed by a VC-system) for that
directory in a special cache, so the identify-backend-process will be
performed only once per directory.  If for a directory a VC-backend
could be identified ECB stores not only the backend itself for that
directory but also the associated check-state-function defined in
'ecb-vc-supported-backends' (*note Checking the state::).

You can add arbitrary functions to this options as long as they get one
directory-argument and return either nil or a backend-symbol.  Per
default ECB offers the following functions to identify the VC-backend
CVS, RCS, SCCS, Git, Monotone or Subversion(1):

'ecb-vc-dir-managed-by-CVS DIRECTORY'
     Return 'CVS' if DIRECTORY is managed by CVS. nil if not.

'ecb-vc-dir-managed-by-RCS DIRECTORY'
     Return 'RCS' if DIRECTORY is managed by RCS. nil if not.

'ecb-vc-dir-managed-by-SCCS DIRECTORY'
     Return 'SCCS' if DIRECTORY is managed by SCCS. nil if not.

'ecb-vc-dir-managed-by-MTN DIRECTORY'
     return 'MTN' if directory is managed by Monotone.  nil if not.

'ecb-vc-dir-managed-by-BZR DIRECTORY'
     return 'BZR' if directory is managed by Bazaar.  nil if not.

'ecb-vc-dir-managed-by-GIT DIRECTORY'
     Return 'GIT' if directory is managed by Git.  nil if not.  Because
     with Git only the top-most directory of a source-tree has a subdir
     .git this function tries recursively upwards if there is a
     .git-subdir.

'ecb-vc-dir-managed-by-SVN DIRECTORY'
     Return 'SVN' if DIRECTORY is managed by Subversion.  nil if not.
     Returns always nil if the library vc-svn.el can not be found.

If ECB should support another VC-backend than CVS, RCS, SCCS, Monotone,
Git or Subversion you have to write your own identify-backend-funtion
for the used VC-backend (e.g.  Clearcase)!

   ---------- Footnotes ----------

   (1) For this the most recent version of the VC-package (incl.  the
libraries vc-git.el, vc-mono.el and vc-svn.el) is needed - as contained
in Emacs >= 22 and XEmacs >= 21.4.22


File: ecb.info,  Node: Checking the state,  Next: Remote repositories,  Prev: Identifying backends,  Up: Version-control support

10.8.2 How ECB checks the VC-state of a file
--------------------------------------------

After ECB has identified the VC-backend of a directory it will display
the VC-state (e.g.  up-to-date, edited, needs-mergs etc...)  with a
suitable image-icon in the tree-windows of the ECB-file-browser.  To get
this state for a certain file ECB uses that check-state-function stored
in the cache for the directory of that file (*note Identifying
backends::).

You can add any arbitrary functions as check-state-function to
'ecb-vc-supported-backends' as long as they get one filename-argument
and return a state-symbol (e.g.  'up-to-date'.  ECB can understand a
certain set of state-values which are then mapped to suitable
image-icons which will in turn be displayed in front of the filename in
the file-browser.  Because the values a check-state-function return can
differ from that state-values ECB understands, ECB offers an option to
define a appropriate state-mapping.  The name of this option is
'ecb-vc-state-mapping'.  See the documentation of this option to get a
list of all state-value ECB understands.

Per default ECB uses the function 'vc-state' of the VC-package(1) to
check the state for the backends CVS, RCS, SCCS, Subversion, Git and
Monotone.  So the default-value of 'ecb-vc-state-mapping' contains a
mapping between these values 'ecb-vc-state' can return and that
state-values ECB understands.

If ECB should support other VC-backends than CVS, RCS, SCCS, Monotone,
Git and Subversion (e.g.  Clearcase) you should add that new backend to
the VC-package (see the initial comments of vc.el how to do this) then
ECB will automatically support that new backend.  Alternatively it may
be sufficient if you write your own check-state-function for this
backend and add the needed mapping to 'ecb-vc-state-mapping' if
necessary.

10.8.2.1 Getting heuristic state-values or real ones for a backend
..................................................................

The interface of Emacs' VC-package offers two different ways to get the
VC-state of a file:

   * The real, fresh and expensive approach

     VC has a function 'vc-recompute-state' which always performs a real
     backend command (e.g.  "cvs status" for CVS) to get a fresh and
     real state for a file.  As you can imagine this operation can be
     very expensive and long lasting depending on the location of the
     repository.  But for CVS the CVS-backend of VC offers with the
     option 'vc-cvs-stay-local' a way to tell Emacs to stay local even
     for the sake of getting a real state(2).

     ECB offers 'ecb-vc-recompute-state' for this approach which is an
     alias for 'vc-recompute-state'.

   * The heuristic approach:

     The function 'vc-state' always returns a "heuristic" state which
     should be used when a fresh and real state is not necessary.  With
     'vc-state' the option 'vc-cvs-stay-local' will never take effect.

     ECB offers 'ecb-vc-state' for this approach - see below for the
     difference between 'vc-state' and 'ecb-vc-state'.

Example CVS:

VC/CVS actually does it this way (regardless if ECB is active or not):
When you visit a file, it always uses just the heuristic to get the
state (comparing file times), regardless of the setting of
'vc-cvs-stay-local'.  This is because the "fresh-but-slow" state is
determined by calling "cvs status" on the file, and this was deemed
unacceptably slow if done at visiting time under any conditions.

The state is updated by calling 'vc-recompute-state' prior to
'vc-next-action' (C-x v v) which either checks a file in or out.  IF
'vc-cvs-stay-local' is nil, then this does in fact call "cvs status" to
get the "fresh-but-slow-state", but if 'vc-cvs-stay-local' is t, then it
just compares the file times again.

But under certain conditions (e.g.  if called for files not already
visited or for files their VC-state has been changed from outside Emacs,
e.g.  by checking in the file via command line) 'vc-state' does not
compute a new heuristic state but returns a cached one (cached by the
VC-package itself not by ECB) which does not reflect the current
VC-state.  Example: if you have edited a file within Emacs and then
checked in from outside Emacs 'vc-state' returns a wrong state until you
call 'revert-buffer' for this file.  Therefore ECB offers the
check-state-function 'ecb-vc-state' which does the same as 'vc-state'
but it clears the internal caches of the VC-package for that file before
calling 'vc-state'.

The bottom line for you is this: If you use 'ecb-vc-state' in
'ecb-vc-supported-backends' to get the version control state, then you
get the same policy that VC uses and you get always a "correct"
heuristic state (as correct as possible a heuristic state can be).
There should no harm if you use 'ecb-vc-recompute-state' (which is an
alias for 'vc-recompute-state') as a replacement function if you want to
get fresh and real state-values, but then (a) you must make sure to set
'vc-cvs-stay-local' to nil, and (b) fetching the state over the network
under all conditions was deemed unacceptably slow in VC.

   ---------- Footnotes ----------

   (1) The VC-package of Emacs offers a standardised and uniform
interface for several backends; per default CVS, RCS, SCCS, Subversion,
Git and Monotone are supported by the VC-package.

   (2) For other backends you have to check the VC-manual if there is
equivalent option


File: ecb.info,  Node: Remote repositories,  Next: Refreshing the VC-state,  Prev: Checking the state,  Up: Version-control support

10.8.3 Important informations about remote repositories
-------------------------------------------------------

At least CVS can be used in a mode called "Client/Server" which means
the root repository is located on a remote machine.  We call a
repository which can not being mounted by the client-machine (which
contains the working directory) a "remote repository".  In most cases
getting the fresh and real VC-state for such repositories will be
unacceptable slow or often users will work offline means with no
connection available to the remote host.  To avoid problems like these
ECB offers first an option 'ecb-vc-directory-exclude-regexps' to exclude
such directories with a remote repository from the VC-support of ECB and
secondary the identify-backend-funtion 'ecb-vc-dir-managed-by-CVS'
behaves smart with that respect (*note Identifying backends::).  See
also 'ecb-vc-xemacs-exclude-remote-cvs-repository'!

10.8.3.1 Remote paths and the VC-support of ECB
...............................................

ECB supports working with remote directories like TRAMP- or
EFS-directories (*note Remote directories::).  Do not confuse remote
directories with remote repositories.  A local directory located on your
disk and set in 'ecb-source-path' can have a remote repository if
managed by a VC-system.  A remote directory means a path in the format
of TRAMP, ANGE-FTP or EFS set in 'ecb-source-path'.  Its very likely
that getting the VC-state of files contained in such a remote directory
would be extremly expensive and therefore ECB would be blocked quite
long even if the VC-check is performed stealthy (*note Stealthy
background tasks::).

To avoid problems with such remote directories ECB prevents per default
such directories from being processed by the VC-support of ECB. But if a
user is dying to having the VC-state being displayed in the tree-buffers
ECB offers two ways to switch on the VC-support - see the option
'ecb-vc-enable-support': This option is set per default to the value
'unless-remote' which means remote paths will not be processed but it
can be set to 't' which means process all directories regardless if
remote or not.  It's strongly recommended to use 'unless-remote'!


File: ecb.info,  Node: Refreshing the VC-state,  Next: Adding new backends,  Prev: Remote repositories,  Up: Version-control support

10.8.4 How to refresh ECB-state-display when changed outside
------------------------------------------------------------

If all actions concerning version controlling of a file are performed
within Emacs with commands offeres by VC then the displayed state for
such a file in the tree-buffers of ECB will be always correct - in that
sense that ECB will always display that state which the
check-state-function for the file will return.  At least with GNU Emacs
for the backends CVS, RCS, SCCS and Subversion this will be true.  With
XEmacs only for CVS. For other backends see *note Adding new backends::.

But if the VC-state of a file will be changed outside of Emacs
(unfortunately PCL-CVS must be called "outside" too because PCL-CVS
doesn't use the functions of the VC-package of Emacs for checking-in or
-out) then ECB can not automatically recognize this and therefore it can
not aurtomatically update the displayed state-image-icon.  You have to
tell ECB for which files in the tree-buffers the VC-state should be
recomputed.  This can be done via the popup-menus of the
ECB-tree-buffers - The following popup-commands are offered in the
submenu "Version Control":

ECB-directories-buffer (if sources are displayed within):
     "Recompute state for file" and "Recompute state for dir" whereas
     the latter one recomputes the VC-state for all files of that
     directory the file belongs.
ECB-sources-buffer
     "Recompute state for file" and "Recompute state for dir" whereas
     the latter one recomputes the VC-state for all files currently
     displayed in the sources-buffer.
ECB-history-buffer
     "Recompute state for file" and "Recompute state for whole history"
     whereas the latter one recomputes the VC-state for all file-entries
     currently displayed in the history-buffer.

*Caution*: The state will only recomputed right under all situations if
you use either 'ecb-vc-state' or 'vc-recompute-state' as
check-state-function in 'ecb-vc-supported-backends' (*note Checking the
state::).

Of course all these commands update the VC-state in all visible
tree-buffers the file is currently displayed (e.g.  often a file is
displayed in the sources- and the history-buffer)!

For general informations about the usage of popup-menus in ECB see *note
Using the mouse:: (subsection "The right mouse button").

In addition to these popup-commands using the POWER- rsp.  Shift-click
(*note Using the mouse::) onto a directory in the directory-window of
ECB refreshes the VC-state-values of all files contained in this
directory too.


File: ecb.info,  Node: Adding new backends,  Next: Known VC-problems,  Prev: Refreshing the VC-state,  Up: Version-control support

10.8.5 Necessary steps and informations for adding new backends
---------------------------------------------------------------

There are mainly three necessary steps for adding a new(1) backend BE
which should be supported by ECB:

  1. Adding an identify-backend-function to 'ecb-vc-supported-backends'
     ECB needs a function how to identify the new backend BE for a
     certain directory.  If there exists already a library (other then
     VC) supporting this backend then this library propably contains
     already such a function which can be used or can be used at least
     with a small elisp-wrapper.  If no elisp-library for backend BE
     exists then you have probably write the full
     identify-backend-function for your self.  This function has to be
     added to 'ecb-vc-supported-backends'.

  2. Adding an check-state-function to 'ecb-vc-supported-backends'
     Associated to the new identify-backend-function mentioned in step 1
     a new check-state-function is needed which can be used by ECB to
     get the VC-state for a file.  See *note Checking the state:: for a
     description about the needed interface of such a function.  In
     combinatio with the identify-backend-function from step 1 this
     function has to be added to 'ecb-vc-supported-backends'.

  3. Enabling automatic state-update after checkin/out

     This step is not essential if you do not need the displayed
     VC-state automatically updated after a checkin/out of a file via
     the commands available for backend BE (e.g.  clearcase.el offers
     for the backend Clearcase elisp-commands to checkin and checkout a
     file which then should also update the displayed state in the
     ECB-tree-buffers.  All you need is a way to tell these commands
     that they should clear the ECB-VC-cache for the file and then
     restart the ECB-VC-check-mechanism.  This should be done after
     these commands have finished their original job.

     ECB enables this per default for all backends supported by the
     VC-package with the following code.  Maybe this is a good starting
     point.

          (defvar ecb-checkedin-file nil
            "Stored the filename of the most recent checked-in file. Is only set by the
          after-advice of `vc-checkin' and `ecb-vc-checkin-hook' \(resets it to nil).
          Evaluated only by `ecb-vc-checkin-hook'.

          This is the communication-channel between `vc-checkin' and
          `ecb-vc-checkin-hook' so this hook-function gets the filename of the
          checked-in file.")

          (defadvice vc-checkin (after ecb)
            "Simply stores the filename of the checked-in file in `ecb-checkedin-file'
          so it is available in the `vc-checkin-hook'."
            (setq ecb-checkedin-file (ecb-fix-filename (ad-get-arg 0))))

          (defun ecb-vc-checkin-hook ()
            "Ensures that the ECB-cache is reset and the entry for the most recent
          checkedin file is cleared. Uses `ecb-checkedin-file' as last checked-in file."
            (when ecb-checkedin-file
              (ecb-vc-cache-remove ecb-checkedin-file)
              (ecb-vc-reset-vc-stealthy-checks)
              (setq ecb-checkedin-file nil)))

   ---------- Footnotes ----------

   (1) i.e.  not already supported by the VC-package because all these
backends are automatically supported by ECB too!


File: ecb.info,  Node: Known VC-problems,  Prev: Adding new backends,  Up: Version-control support

10.8.6 Currently known problems with the VC-support
---------------------------------------------------

There are no reported problems concerning the Version Control support of
ECB.


File: ecb.info,  Node: Using eshell,  Next: Grepping directories,  Prev: Version-control support,  Up: Common use-cases

10.9 Optimal using of eshell in ECB
===================================

ECB offers a very smart integration of the "eshell" if you are using a
compile window (*note Temp- and compile-buffers::)(1)

Here is a short summary of provided features:

   * Ability to jump to the eshell buffer within the compilation window
     by simply call 'eshell' (bound to 'C-c . e').  If the eshell isn't
     running it will be started.

   * Expands the compilation window when you run commands.  So for
     example it allows you to view the eshell in minimized mode and then
     when you run "ls" the window automatically expands (but always
     depending on the output of the command you run).

   * Synchronizes the current directory of the eshell with the current
     buffer in the current active edit-window of ECB.

   * Provides smart window layout of the eshell buffer.  This makes sure
     that the eshell is taking up the exact amount of space and that
     nothing is hidden.

Here comes a detailed explanation of these features and how to use it
(all these features are only available if you use a persistent
compile-window, i.e.  if 'ecb-compile-window-height' is not nil):

You do not have to learn a new command for the eshell-start - just call
'eshell' (for convenience also bound to 'C-c . e') and the eshell will
displayed in the compile-window of ECB (if eshell is not already alive
then it will be started automatically).

ECB tries to display the contents of the eshell-buffer as best as
possible, means ECB can autom.  enlarge and shrink the compile-window so
the contents of the eshell are fitting the window.  See option
'ecb-eshell-enlarge-when-eshell' and
'ecb-eshell-fit-window-to-command-output'.  Normally this is done autom.
but you can also you the standard compile-window enlarging-command of
ECB: 'ecb-toggle-compile-window-height'.

ECB tries also to recenter the eshell-buffer as best as possible.
Normally this is done autom.  but you can do it on demand with the
command 'ecb-eshell-recenter'.

If option 'ecb-eshell-buffer-sync' is true then ECB always synchronizes
the command prompt of eshell with the directory of current source-buffer
of the current active edit-window.

With the option 'ecb-eshell-auto-activate' you can start eshell autom.
in the compile-window when ECB is started but of course if a
compile-window exists.

   ---------- Footnotes ----------

   (1) Of course you can use eshell also if there is no compile-window.
Then it is just displayed in the edit-area and there is no special
integration.


File: ecb.info,  Node: Grepping directories,  Next: Working with JDEE,  Prev: Using eshell,  Up: Common use-cases

10.10 Grepping directories with ECB
===================================

ECB offers in the popup-menus in the directories- and
sources-tree-buffer commands for easy (recursive) grepping the current
directory under point (directory-buffer) rsp.  the current-directory
(sources-buffer).  In every case just the function of the options
'ecb-grep-function' rsp.  'ecb-grep-find-function' is called and the
'default-directory' is tempor.  set to the chosen directory so the grep
will performed in this directory regardless of the 'default-directory'
of current buffer in the edit-window.

Other smart things beyond that are not done by ECB, see also
'ecb-grep-function'!

So, how to exclude some subdirectories or files from the grep?

Basically this has to be done with the "-prune" option of the
find-utility: If the standard-grep facility of Emacs is used then this
is not easy but with the command 'igrep.el' there is a convenient way to
exclude things like CVS- or RCS-directories from the find-call: See the
variable 'igrep-find-prune-clause' of the library 'igrep.el'.


File: ecb.info,  Node: Working with JDEE,  Next: Compile-window on demand,  Prev: Grepping directories,  Up: Common use-cases

10.11 Working best with ECB and JDEE
====================================

ECB is completely language independent, i.e.  it works with any language
supported by semantic (e.g.  C, C++, Java, Elisp etc.).

But there are some special integrations for the great
Java-Development-Environment JDEE:

   * Displaying contents of class under point

     With the command 'ecb-jde-display-class-at-point' you can display
     the contents of the class which contains the definition of the
     "thing" at point (which can be a method, variable etc.).

   * Creating new source-files

     The popup-menus in the directories- and the sources-buffer offer a
     command "Create Source" which allows easy creating new java-sources
     by calling the command 'jde-gen-class-buffer'.

   * Adding user-extensions to the popup-menus

     The options 'ecb-directories-menu-user-extension' and
     'ecb-sources-menu-user-extension'(1) allow adding often used
     JDEE-commands to the popup-menus of the directories- or
     sources-buffer.  One example is to add building the project of
     current directory.  Here is a function which could be added to
     'ecb-directories-menu-user-extension':

          (defun ecb-dir-popup-jde-build (node)
            "Build project in directory."
            (let ((project-file
          	 (expand-file-name jde-ant-buildfile (tree-node-get-data node))))
              (jde-ant-build project-file "build")))

     Of course you can add entries to the option
     'ecb-methods-menu-user-extension' and
     'ecb-methods-menu-user-extension' too.

   ---------- Footnotes ----------

   (1) If you need a dynamic way of menu-extension then you should have
a look at the options 'ecb-directories-menu-user-extension-function' and
'ecb-sources-menu-user-extension-function'.


File: ecb.info,  Node: Compile-window on demand,  Next: Non-semantic sources,  Prev: Working with JDEE,  Up: Common use-cases

10.12 Displaying the compile-window on demand
=============================================

If you like displaying all output of compile/grep/etc.  an all
temp-buffers like *Help*-buffers in an extra compile-window (*note Temp-
and compile-buffers::) but you dislike wasting the space of this
compile-window if you are just editing then you can get a compile-window
"on demand".  Just do the following:

  1. Customize 'ecb-compile-window-height' to not nil and save it for
     future sessions.  This gives you an extra compile-window at the
     bottom.

  2. Add the following to your .emacs:

          (add-hook 'ecb-activate-hook
                    (lambda ()
                      (let ((compwin-buffer (ecb-get-compile-window-buffer)))
                      (if (not (and compwin-buffer
                                    (ecb-compilation-buffer-p compwin-buffer)))
                          (ecb-toggle-compile-window -1)))))

     This hides the extra compile-window directly after the start of ECB
     because there is no need for a compile-window at this moment.  But
     the hiding will not be done if there is a compile-window and if a
     "compile-buffer" in the sense of 'ecb-compilation-buffer-p' is
     displayed in this compile-window.  Without this additional check
     the compile-window would always be hidden after the ECB-start even
     when ECB is reactivated after a deactivation by the
     window-manager-support of ECB (*note Window-managers and ECB::);
     but in these cases we want to preserve the state before
     deactivation as good as possible (see also option
     'ecb-split-edit-window-after-start').

This is all you have to do.  Now if you run 'compile' (or 'grep' or
other compile-modes) or display temp-buffers like *Help*-buffers then
ECB autom.  displays the compile-window at the bottom and display the
output there.

If you have finished with using the compile- or temp-output (e.g.
fixing errors) then you can throw away the compile-window just by
'ecb-toggle-compile-window' - ECB will reactivate it autom.  before next
compilation or help-buffer-display.!


File: ecb.info,  Node: Non-semantic sources,  Next: Hide-show,  Prev: Compile-window on demand,  Up: Common use-cases

10.13 Parsing and displaying non-semantic sources
=================================================

ECB is mostly designed to display parsing information for files
supported by semantic.  But beginning with version 1.94 it also supports
other parsing engines like imenu and etags, so also files not supported
by semantic but by imenu/etags can be displayed in the Method-buffer of
ECB. See *note Definition of semantic- and non-semantic-sources:: for a
description of "semantic-sources" and "non-semantic-sources".

If support of non-semantic-sources is enabled then ECB will display the
contents of all sources which can be displayed by speedbar too.  This
comes from the fact that ECB uses speedbar-logic to parse sources with
imenu or etags.

In most cases imenu-parsing is preferable over etags-parsing because
imenu operates on Emacs-buffers and needs no external tool and therefore
parsing works also if current contents of a buffer are not saved to
disk.

This section describes all important aspects about parsing and
displaying file-contents of file-types not supported by semantic but by
imenu and/or etags.

10.13.1 Enabling parsing and displaying of non-semantic-sources
---------------------------------------------------------------

Enabling is simply done with the option
'ecb-process-non-semantic-files'.

ECB offers an option 'ecb-non-semantic-parsing-function' to specify on a
major-mode basis which parsing-method should be used: imenu or etags.
Normally there should be no need to change this option but read the
documentation of this option (*note ecb-non-semantic::) for further
details.

IMPORTANT:

   * If imenu-parsing should be used then the option
     'speedbar-use-imenu-flag' must be set to not 'nil'!

   * If some non-semantic-sources are not parsed (i.e.  there is an
     empty Methods-buffer) and you think that they should then maybe
     they are neither supported by imenu nor by etags or you have to
     check the options 'ecb-non-semantic-parsing-function' and
     'speedbar-dynamic-tags-function-list' and - especially for etags -
     'speedbar-fetch-etags-parse-list', 'speedbar-fetch-etags-arguments'
     and 'speedbar-fetch-etags-command'.

   * Even with support for semantic-, imenu- and etags-parsing there
     will remain some file-types rsp.  'major-modes' which are not
     parse-able, neither by semantic, imenu nor etags.  This is no
     problem because these files simply have an empty Methods-buffer.
     But nevertheless you will get a message "Sorry, no support for a
     file of that extension" which comes from the speedbar-library and
     can not switched off.  Therefore if a 'major-mode' is known as not
     parse-able by semantic, imenu or etags it can be added to the
     option 'ecb-non-semantic-exclude-modes' and then it will be
     excluded from being tried to parsed and this (annoying) message
     will not occur.

10.13.2 Automatic rescanning/reparsing of non-semantic-sources
--------------------------------------------------------------

In contrast to semantic (see 'global-semantic-idle-scheduler-mode')
there is no built-in mechanism for autom.  reparsing
non-semantic-sources and then updating the contents of the
Methods-buffer.

For non-semantic-sources you have always at least to call
'ecb-rebuild-methods-buffer' (bound to 'C-c . r') or saving the
source-file (if 'ecb-auto-update-methods-after-save' is true) to update
the Method-buffer(1).

Depending on the parsing-mechanism the following options have to be
switched on so ECB can rebuild the methods-buffer for
non-semantic-sources:

   * imenu:

     The imenu-option 'imenu-auto-rescan' must be enabled and
     'imenu-auto-rescan-maxout' has to be set big enough to auto-parse
     big files too!  But this results not directly in an autom.  updated
     Method-buffer.  This is first done after calling the command
     'ecb-rebuild-methods-buffer' or saving the source-file (if
     'ecb-auto-update-methods-after-save' is true).

   * etags:

     Only if 'ecb-auto-save-before-etags-methods-rebuild' is switched on
     the command 'ecb-rebuild-methods-buffer' rebuilds the method-buffer
     with current source-contents.  See description of this option for
     an explanation.

Tip: If you want to program your own real.  automatic
rescan/reparse/rebuild mechanism for non-semantic-sources you can do:

Adding to 'after-change-functions' a function F which either runs itself
'ecb-rebuild-methods-buffer-for-non-semantic' or which adds only another
function FF to an idle-timer and the function FF runs
'ecb-rebuild-methods-buffer-for-non-semantic'.  The latter approach has
the advantage that the reparse/rebuild is not performed immediately
after every change but first after Emacs is idle for a senseful interval
(e.g.  4 seconds) after last change.  Of course the function FF has to
cancel its own idle-timer at the end, so the next idle-timer is first
started again after the next change (i.e.  by function F which is still
contained in 'after-change-functions'.

10.13.3 Customizing the display of the tags
-------------------------------------------

For non-semantic-sources ECB uses does no special organizing of tags in
groups and sub-tags but it completely uses the tag-hierarchy the imenu-
and etags-parsers of speedbar return.  So the displayed tag hierarchy
can only be customized with some options speedbar offers for this:

'speedbar-tag-hierarchy-method',
'speedbar-tag-group-name-minimum-length',
'speedbar-tag-split-minimum-length' and
'speedbar-tag-regroup-maximum-length'.  See the speedbar documentation
for details about these options.

With the option 'ecb-method-non-semantic-face' you can define the face
used for displaying the tags in the Method-buffer for
non-semantic-sources.

'ecb-non-semantic-methods-initial-expand' can be useful too.

   ---------- Footnotes ----------

   (1) Maybe future versions of ECB (> 1.94) will offer an autom.
mechanism for this.


File: ecb.info,  Node: Hide-show,  Next: Window-managers and ECB,  Prev: Non-semantic sources,  Up: Common use-cases

10.14 Using hide-show from the methods-buffer-menu
==================================================

The popup-menu of the Methods-buffer offer two entries for either hiding
or showing the block which is related to the selected tag (that tag for
which the popup-menu was opened):

   * "Jump to tag and hide block": Jumps to the tag and calls
     'hs-hide-block' from the hideshow-library which is shipped with
     (X)Emacs.  After that the block is hidden, i.e.  only the
     header-line of that tag (method, variable etc.)  is visible, the
     rest is hidden behind the "...".

   * "Jump to tag and show block": Jumps to the tag and calls
     'hs-show-block'.  This shows the related hidden block if the block
     was hidden via 'hs-hide-block' or the menu-entry "Jump to tag and
     hide block" (s.a.).

For this feature the library 'hideshow.el' is used which should normally
being included in the (X)Emacs-distribution.  If this library is not
loaded into Emacs, ECB does this automatically before the first call to
one of these menu-entries.

IMPORTANT: If in some 'major-mode' hiding and showing does not work as
you expect it to work then you must probably add an entry for this
'major-mode' to the hideshow-variable 'hs-special-modes-alist'.  See the
documentation of this variable for further details.  One example of such
a 'major-mode' is 'jde-mode' of the Java Development Environment JDEE;
just add an entry for it like the already contained entries for
'c++-mode' or 'java-mode' and hiding and showing will work for you with
JDEE too.


File: ecb.info,  Node: Window-managers and ECB,  Next: Virtual folders in History,  Prev: Hide-show,  Up: Common use-cases

10.15 Support of several Emacs-window-managers
==============================================

There are several window-managers available which offer an easy
interface to jump between different window-configurations within the
same frame.  A window configuration is the layout of windows and
associated buffers within a frame.  There is always at least one
configuration, the current configuration.  You can create new
configurations and cycle through the layouts in either direction.
Window configurations are often named or numbered, and you can jump to
and delete named rsp.  numbered configurations.

Without special support by ECB these window-managers would not work in
combination with ECB!

ECB currently supports the following managers:

   * winring.el: Written by Barry A. Warsaw <bwarsaw@python.org>,
     available at <http://www.python.org/emacs/winring>

   * escreen.el: Written by Noah Friedman <friedman@splode.com>,
     available at
     <http://www.splode.com/~friedman/software/emacs-lisp/#ui>

*IMPORTANT*: With one of these window-managers installed and active you
can run applications like Gnus, VM or BBDB in the same frame as ECB!
Just use different window-configurations (winring.el) or escreens
(escreen.el) for ECB and the other applications.  Especially with
winring.el you can give every configuration a descriptive name like
"ECB" or "Gnus"; afterwards you can jump to a window-configuration by
name!

When you go back to the ECB-window-configuration (winring.el) or the
ECB-escreen (escreen.el) with any of the special window-manager-commands
then the state of ECB will be restored exactly as you have left it when
going to another window-configuration rsp.  escreen.  This includes the
whole splitting state of the edit-area and the visibilty of the
ecb-windows and of the compile-window!

The rest of this section describes how to enable the special ECB-support
for these window-managers and how to use them.

10.15.1 Enabling of the support
-------------------------------

Every support must be enabled explicitly:
   * winring: Call 'ecb-winman-winring-enable-support'.  This *MUST* be
     done *BEFORE* the first call to any winring-command, so also before
     calling 'winring-initialize'!

   * escreen: Call 'ecb-winman-escreen-enable-support'.  This *MUST* be
     done *BEFORE* the first call to any escreen-command, so also before
     calling 'escreen-install'!

If a window-manager-support should be enabled autom.  after Emacs-start
just put the following into your '.emacs':

     (ecb-winman-winring-enable-support)
     (winring-initialize)

     ;; or - if you like escreen more

     (ecb-winman-escreen-enable-support)
     (escreen-install)

10.15.2 Usage of a window-manager in combination with ECB
---------------------------------------------------------

After enabling the support of one of the supported window-managers just
go on as described in the commentary or introduction of the respective
library-file(s) of the window-manager.  Here is a short description:

   * winring: First you have to define how to identify the
     ECB-window-configuration, i.e.  the configuration with activated
     ECB. This done with the option 'ecb-winman-winring-name'.  There is
     always only one window-configurations with name
     'ecb-winman-winring-name'!

     Then run 'winring-initialize'.  If ECB is active then the resulting
     window-configuration is the ECB-window-configuration.  Otherwise
     you can create the ECB-window-configuration when you first time
     call 'winring-new-configuration' with name equal to
     'ecb-winman-winring-name'.  In general you can run all commands of
     the winring-library.  If you jump to the ECB-window-configuration
     then ECB will be autom.  activated and if you leave the
     ECB-window-configuration then ECB will autom.  deactivated.

   * escreen: First you have to define how to identify the ECB-escreen
     i.e.  that escreen with activated ECB. This done with the option
     'ecb-winman-escreen-number'.  There is always only one escreen with
     number 'ecb-winman-escreen-number'!

     Then run 'escreen-install' (deactivates ECB if currently running).
     After that you can call 'escreen-create-screen' and
     'escreen-goto-screen'(1).  These commands autom.  activate ECB if
     creating or selecting the escreen with number 'ecb-escreen-number'
     (default = 1) and autom.  deactivate ECB if leaving the
     ECB-escreen.

10.15.3 Disabling the support
-----------------------------

There is normally no need to do this but nevertheless it can be done by
'ecb-winman-escreen-disable-support' rsp.
'ecb-winman-winring-disable-support'.

   ---------- Footnotes ----------

   (1) And of course all other 'escreen-goto-*' commands!


File: ecb.info,  Node: Virtual folders in History,  Prev: Window-managers and ECB,  Up: Common use-cases

10.16 Something like virtual folders with the ECB-history
=========================================================

For example, there is a large project with a huge number of files, and
there are various tasks in this project (e.g.  several different
bug-fixing tasks).  So it could be convenient to group buffers according
to various tasks, or with other words: something like virtual folders
for the buffers.  It can be fulfiled through using indirect buffers.

See the following example:

     task_1-aaa.pl
     task_1-bbb.c
     task_1-ccc.sh
     task_2-aaa.pl
     task_2-eee.c
     task_2-ccc.sh
     task_3-xxx.java
     task_3-ccc.sh

This means create indirect buffers(1) with a name-part which can be used
for grouping together buffers with same name-part (here e.g.  task_1-
...  task_3-).  In the example above you would create three indirect
buffers for the filebuffer ccc.sh because this source is needed in all
three tasks, two indirect buffers for aaa.pl because it is needed in the
task-1 and task-2 and so on for the rest of the buffers.  Make all this
indirect buffers with the command 'clone-indirect-buffer'(2), which
creates real clones means the indirect buffers have the same major-mode
etc.  as the base-buffer (see the manual of Emas).

Now remember to the option 'ecb-history-make-buckets' which allows a.o.
to define a list of regular expressions to bucketize the buffers of the
history.  Use this to make one bucket for each task.  So in our example
a value

     ("^task_1-.+" "^task_2-.+" "^task_3-.+")

for 'ecb-history-make-buckets' would satiesfy our needs.

This option allows to define several criterias for building buckets in
the history-buffer all the history entries are sorted in (e.g.  by
major-mode, directory, file-extension or regular expressions).

After that the history-window would display something like the
following:

     [-] [^task_1-.+]
      |  task_1-aaa.pl
      |  task_1-bbb.c
      `- task_1-ccc.sh
     [-] [^task_2-.+]
      |  task_2-aaa.pl
      |  task_2-eee.c
      `- task_2-ccc.sh
     [-] [^task_3-.+]
      |  task_3-xxx.java
      `- task_3-ccc.sh

Hopefully this example could give an impression how the combination of
usage of indirect buffers and bucketizing the history-window can be used
for using one sources for different sake and grouping together what
belongs together.

   ---------- Footnotes ----------

   (1) Remember the most important feature of indirect buffers: Changes
made in one of them will immediately take effect in all others with the
same base-buffer

   (2) Currently only available with GNU Emacs


File: ecb.info,  Node: Elisp programming,  Next: Conflicts and bugs,  Prev: Common use-cases,  Up: Top

11 Entry points for Elisp programmers
*************************************

This chapter describes how ECB can be used/programmed/driven by an
Elisp-program.  This contains:

* Menu:

* List of variables::           Which variables an Elisp-program can use
* List of hooks::               All available hooks
* tree-buffer::                 Full description of the tree-buffer-library
* Adviced functions::           How to deal with the adviced functions
* The layout-engine::           Programming new layouts and special windows


File: ecb.info,  Node: List of variables,  Next: List of hooks,  Prev: Elisp programming,  Up: Elisp programming

11.1 Variables for Elisp-programs
=================================

Variables an Elisp-program can use beyond those ones mentioned in *note
The layout-engine:::

   * 'ecb-source-path-functions'

Look at the documentation of these variables to get a description.


File: ecb.info,  Node: List of hooks,  Next: tree-buffer,  Prev: List of variables,  Up: Elisp programming

11.2 Available hooks of ECB
===========================

The following hooks are available:

   * 'ecb-activate-before-new-frame-created-hook'
   * 'ecb-activate-before-layout-draw-hook'
   * 'ecb-activate-hook'
   * 'ecb-after-directory-change-hook'
   * 'ecb-before-activate-hook'
   * 'ecb-before-deactivate-hook'
   * 'ecb-common-tree-buffer-after-create-hook'
   * 'ecb-basic-buffer-sync-hook'
   * 'ecb-analyse-buffer-sync-hook'
   * 'ecb-symboldef-buffer-sync-hook'
   * 'ecb-speedbar-buffer-sync-hook'
   * 'ecb-eshell-buffer-sync-hook'
   * 'ecb-deactivate-hook'
   * 'ecb-directories-buffer-after-create-hook'
   * 'ecb-hide-ecb-windows-after-hook'
   * 'ecb-hide-ecb-windows-before-hook'
   * 'ecb-history-buffer-after-create-hook'
   * 'ecb-methods-buffer-after-create-hook'
   * 'ecb-redraw-layout-after-hook'
   * 'ecb-redraw-layout-before-hook'
   * 'ecb-show-ecb-windows-after-hook'
   * 'ecb-show-ecb-windows-before-hook'
   * 'ecb-sources-buffer-after-create-hook'

Look at the documentation of these hooks to get a detailed description.


File: ecb.info,  Node: tree-buffer,  Next: Adviced functions,  Prev: List of hooks,  Up: Elisp programming

11.3 The library tree-buffer.el
===============================

The library tree-buffer.el is an ECB-independent library written
completely in emacs lisp and can be used also by other applications than
ECB. But the main purpose of tree-buffer.el is to offer a small but
powerful API to create new tree-buffers for ECB, add new tree-nodes to a
tree-buffer and thus use such a tree-buffer to display arbitrary
information structured by a tree.

This chapter is for emacs-lisp-programmers and describes how to create a
new tree-buffer, how to add new tree-nodes to a tree-buffer (includes
removing and updating already existing tree-nodes) and how to use the
offered tree-buffer- and tree-node-APIs.

* Menu:

* Introduction::                General description of tree-buffers
* A new tree-buffer::           How to create a new tree-buffer
* A new tree-node::             How to add new tree-nodes to a tree-buffer
* Updating a tree-buffer::      How to update a tree-buffer after changes
* Tree-buffer keybindings::     Default and customizable keybindings
* The tree-buffer-API::         All functions for tree-buffers and -nodes
* Do not with tree-buffer::     Things which are strictly forbidden
* Tree-buffer How to::          Dealing with special situations


File: ecb.info,  Node: Introduction,  Next: A new tree-buffer,  Prev: tree-buffer,  Up: tree-buffer

11.3.1 General description of tree-buffers
------------------------------------------

This subchapter is a general introduction in the main concepts of a
tree-buffer.

11.3.1.1 What is a tree-buffer?
...............................

A "tree-buffer" is meant to display certain informations (e.g.  a
directory-tree) in a tree-structure consisting of "tree-nodes".  Every
line in a tree-buffer displays exactly one tree-node.  Each node has
exactly one parent-node and can have any arbitrary number of
"children"-nodes.  If a tree-node has no children then it is called a
"leaf".  A tree-node contains several "slots" wheras the most important
ones are the "name", "displayed-name" and "data".  See *note A new
tree-node:: for a detailed explanation.

The difference between a natural tree like a fir and a tree-buffer is
that the root(-node) of a tree-buffer is not visible but only its
children.  In the example below the nodes parent-node-1 and
parent-node-2 are the children of the invisible root-node.  Each
tree-buffer has exactly one root-node which is created automatically by
'tree-buffer-create'.

If a tree-node contains at least one child it is displayed with a
special expand/collapse-symbol (see the example below).  This symbol
allows expanding (rsp.  collapsing) the tree-node wheras expanding means
to display the children-nodes and collapsing means to hide the childrens
of a tree-node.

Here is an example of a tree-buffer:

     <root-node>  ------------------------[root-node (invisible)]
         [+] <parent-node-1>  -------.
         [-] <parent-node-2>  -------|
             [-] <expanded>  --------|
                 <leaf-node-1>  -----|
                 <leaf-node-2>  -----|-----[tree-nodes]
                 <leaf-node-3>  -----|
                 <leaf-node-4>  -----|
             [+] <collapsed>  -------ﾴ
              |
              `-----------------[expand/collapse-symbol]

In most cases an action is triggered when clicking with the mouse onto a
tree-node(1) (e.g.  clicking onto "leaf-node-1" or "parent-node-1" in
the example above).  Which action is triggered by which key depends on
what you specify at creation-time of the tree-buffer - see *note A new
tree-buffer:: for details.

The creation-interface of a tree-buffer allows defining special
popup-menus when clicking with the right mouse-button (of course also
possible via keyboard, see *note Tree-buffer keybindings::) onto a
tree-node (e.g.  some senseful actions possible for directory-nodes like
grepping this directory or performing version-control actions for this
directory or something else).

11.3.1.2 General recipe for a tree-buffer
.........................................

The following sequence of tasks is the general recipe for a tree-buffer
beginning from creation and ending with the display.

  1. Create the tree-buffer Creating a new tree-buffer has to be done
     with 'tree-buffer-create' for non ECB-tree-buffers and with the
     macro 'defecb-tree-buffer-creator' when the tree-buffer should be
     used as an ECB-tree-buffer, so it is an ECB-window.  See *note A
     new tree-buffer:: for all details.

  2. Add tree-nodes to the tree-buffer Adding nodes to the new
     tree-buffer (means make the new tree-buffer the current buffer and
     call 'tree-node-new' for a new tree-node (note that a root-node for
     this tree-buffer has been autom.  created by
     'tree-buffer-create'!).  The first tree-node you add to a
     tree-buffer must have always the root-node (avaliable via
     'tree-buffer-get-root') as parent-node.  The next nodes can have
     either one of the fromerly added nodes or the root-node too.  All
     tree-nodes haveing the root-node as parent will be displayed at the
     toplevel of the tree-buffer.  See *note A new tree-node:: for all
     details.

  3. Display the tree-buffer with current nodes and state When you are
     finished building up the tree-node-structure call
     'tree-buffer-update' to display the current tree-structure (again
     after making the tree-buffer the current-buffer).  See *note
     Updating a tree-buffer:: for all details.

*IMPORTANT*: First a call of 'tree-buffer-update' updates the *display*
of a tree-buffer, means shows all the tree-nodes in an emacs-buffer!
Neither creating a tree-buffer nor adding tree-nodes display anything;
this just builds the internal tree-structure.

*IMPORTANT*: See *note Programming special windows:: for details about
programming ECB-windows (special windows) regardless if they were build
as tree or not.  There you can find a.o.  how to automatically
synchronizing a special window with the current edit-buffer.

   ---------- Footnotes ----------

   (1) Of course using the keyboard is also possible, see *note
Tree-buffer keybindings::.


File: ecb.info,  Node: A new tree-buffer,  Next: A new tree-node,  Prev: Introduction,  Up: tree-buffer

11.3.2 How to create a new tree-buffer
--------------------------------------

The creator-function for a new tree-buffer depends on the fact if the
new tree-buffer should be used as an ECB-window or not.  For a new
ECB-window the macro 'defecb-tree-buffer-creator' has to be used,
otherwise the function 'tree-buffer-create'.  In the end both methods
use 'tree-buffer-create' because the BODY-argument of
'defecb-tree-buffer-creator' must contain a call to this function!.

This section describes all arguments of 'tree-buffer-create'.

Except the first argument NAME all arguments are key-arguments of the
form :arg-name arg-value, so for example a call looks like

     (tree-buffer-create <buffer-name> :frame <frame-object> ...).

These key-arguments (all except the first argument 'NAME') can be
arranged in any arbitrary order but all of them are not-optional!  The
key-arg-name is always a : followed by the lowercase version of the
mentioned argument below (e.g.  'FRAME' -> :frame,
'MOUSE-ACTION-TRIGGER' -> :mouse-action-trigger).

Here is a description of the arguments of 'tree-buffer-create' - also
available as docstring for this function (via 'C-h f').  The description
below contains also some examples for complex-arguments!

'NAME'
     Buffername of the new tree-buffer.

'FRAME'
     Frame in which the tree-buffer is displayed and valid.  All
     key-bindings and interactive functions of the tree-buffer work only
     if called in FRAME otherwise nothing is done!

'MOUSE-ACTION-TRIGGER'
     When a mouse-action is triggered.  Allowed values: 'button-release'
     and 'button-press'.

'IS-CLICK-VALID-FN'
     'tree-buffer-create' rebinds 'mouse-1', 'mouse-2', 'RET' (and
     'TAB') and also in combination with shift and control (not with
     'TAB').  IS-CLICK-VALID-FN is called first if a node or an
     expand-symbol is clicked.  This function is called with five
     arguments:

        - mouse-button: The clicked mouse-button or RET or TAB (0 = RET
          or TAB, 1 = mouse-1, 2 = mouse 2)
        - shift-pressed: Non nil if the SHIFT-key was pressed during
          mouse-click or RET.
        - control-pressed: Non nil if the CONTROL-key was pressed during
          mouse-click or RET.
        - meta-pressed: Non nil if the META-key was pressed during
          mouse-click or RET.
        - tree-buffer-name: The buffer-name of the tree-buffer where the
          node has been clicked.

     The function must return not nil iff exactly this click/hit is
     accepted.  If the function returns nil then really nothing is done
     by the tree-buffer after this click/hit!

     Here is an example (call 'C-h f' to see what it does) for this
     callback-function:

          (defun ecb-interpret-mouse-click (mouse-button
                                            shift-pressed
                                            control-pressed
                                            meta-pressed
                                            tree-buffer-name)
            (if (eq mouse-button 0)
                (list (if control-pressed 2 1) shift-pressed meta-pressed
                      'keyboard)
              (if (and (not (eq mouse-button 1)) (not (eq mouse-button 2)))
          	nil
                (case ecb-primary-secondary-mouse-buttons
                  (mouse-1--mouse-2
                   (if control-pressed
                       nil
                     (list mouse-button shift-pressed meta-pressed 'mouse)))
                  (mouse-1--C-mouse-1
                   (if (not (eq mouse-button 1))
                       nil
                     (list (if control-pressed 2 1) shift-pressed meta-pressed
                           'mouse)))
                  (mouse-2--C-mouse-2
                   (if (not (eq mouse-button 2))
                       nil
                     (list (if control-pressed 2 1) shift-pressed meta-pressed
                           'mouse)))
                  (otherwise nil)))))

     This example would be passed as parameter as follows:

          (tree-buffer-create "myname"
                              :is-click-valid-fn 'ecb-interpret-mouse-click
                              ...)

'NODE-SELECTED-FN'
     Function to call if a node has been selected.  This function is
     called with the following parameters:

        - node: The selected node
        - mouse-button (0 = RET, 1 = mouse-1, 2 = mouse 2)
        - shift-pressed
        - control-pressed
        - meta-pressed
        - tree-buffer-name

     For the last four arguments see the description above.  This
     function has to ensure that the expandable- and expanded-state of
     the selected node is correct after returning.

     Here is an example (call 'C-h f' to see what it does) for this
     callback-function:

          (defun ecb-tree-buffer-node-select-callback (node
          					     mouse-button
          					     shift-pressed
          					     control-pressed
                                                       meta-pressed
          					     tree-buffer-name)
            (let* ((ecb-button-list (ecb-interpret-mouse-click mouse-button
          						     shift-pressed
          						     control-pressed
                                                               meta-pressed
          						     tree-buffer-name))
          	 (ecb-button (nth 0 ecb-button-list))
          	 (shift-mode (nth 1 ecb-button-list))
                   (meta-mode (nth 2 ecb-button-list))
                   (keyboard-p (equal (nth 3 ecb-button-list) 'keyboard))
                   (maximized-p (ecb-buffer-is-maximized-p tree-buffer-name)))
              ;; now we dispatch to the right action
              (when ecb-button-list
                (cond ((ecb-string= tree-buffer-name ecb-directories-buffer-name)
          	     (ecb-directory-clicked node ecb-button nil shift-mode
                                              meta-mode))
          	    ((ecb-string= tree-buffer-name ecb-sources-buffer-name)
          	     (ecb-source-clicked node ecb-button nil shift-mode
                                           meta-mode))
          	    ((ecb-string= tree-buffer-name ecb-history-buffer-name)
          	     (ecb-history-clicked node ecb-button nil shift-mode
                                            meta-mode))
          	    ((ecb-string= tree-buffer-name ecb-methods-buffer-name)
          	     (ecb-method-clicked node ecb-button nil shift-mode
                                           meta-mode))
          	    ((ecb-string= tree-buffer-name ecb-analyse-buffer-name)
          	     (ecb-analyse-node-clicked node ecb-button nil shift-mode
                                                 meta-mode))
          	    (t nil)))))

     This example would be passed as parameter as follows:

          (tree-buffer-create "myname"
                              :node-selected-fn 'ecb-tree-buffer-node-select-callback
                              ...)

     *IMPORTANT*: This callback must not modify the slot EXPANDED of the
     passed node because this is done automatically by the
     tree-buffer-library!

'NODE-EXPANDED-FN'
     Function to call if a node is expandable, point stays onto the
     expand-symbol and node is not already expanded.  This function is
     called with the following parameters:

        - node: The selected node
        - mouse-button (0 = TAB, 1 = mouse-1, 2 = mouse 2)
        - shift-pressed
        - control-pressed
        - meta-pressed
        - tree-buffer-name

     This function should add all children nodes to this node if not
     already done (if possible).  This function has to ensure that the
     expandable- and expanded state of the selected node is correct
     after returning!

     *IMPORTANT*: This callback must not modify the slot EXPANDED of the
     passed node because this is done automatically by the
     tree-buffer-library!

'NODE-COLLAPSED-FN'
     Function to call if a node is expandable, point stays onto the
     expand-symbol and node is already expanded.  This function is
     called with the following parameters:

        - node: The selected node
        - mouse-button (0 = TAB, 1 = mouse-1, 2 = mouse 2)
        - shift-pressed
        - control-pressed
        - meta-pressed
        - tree-buffer-name

     This function is only a callback to inform the owner/user of this
     tree-buffer that this node has been collapsed.  This function must
     not modify the expandable- or expanded state of the selected node!

     Often a sensefull value for this parameter is the function
     'ignore'.

     *IMPORTANT*: This callback must not modify the slot EXPANDED of the
     passed node because this is done automatically by the
     tree-buffer-library!

'NODE-MOUSE-OVER-FN'
     Function to call when the mouse is moved over a node.  This
     function is called with three arguments: NODE, WINDOW, NO-PRINT,
     each of them related to the current tree-buffer.  If NO-PRINT is
     nil then the function must print the text itself in any manner.
     This function must always return the text which either is printed
     by the function itself or by the caller (if NO-PRINT is not nil).
     The current buffer for this function is the tree-buffer itself.
     With XEmacs this function is only called if the tree-buffer
     track-mouse mechanism is activated (see the function
     'tree-buffer-activate-follow-mouse').  With GNU Emacs >= 21 this
     function is called by the 'help-echo' property added to each node.

     Here is an example (call 'C-h f' to see what it does) for this
     callback-function:

          (defun ecb-mouse-over-analyse-node (node &optional window no-message
                                                   click-force)
            (let ((str (when (or click-force
                                 (ecb-show-minibuffer-info
                                  node window
                                  (car ecb-analyse-show-node-info)))
                         (if (equal (cdr ecb-analyse-show-node-info)
                                    'full-info)
                             (ecb-analyse-gen-tag-info
                              (car (tree-node->data node)))
                           (tree-node->name node)))))
              (prog1 str
                (unless no-message
                  (ecb-nolog-message str)))))

'MOUSE-HIGHLIGHT-FN'
     If nil then in this tree-buffer no node is highlighted when the
     mouse moves over it.  If t then each node is highlighted when the
     mouse moves over it.  If a function then it is called with the node
     as argument and if it returns not nil then the node will be
     highlighted when the mouse moves over it - otherwise no
     highlighting takes place.

'NODE-DATA-EQUAL-FN'
     Function used by the tree-buffer to test if the data of two
     tree-nodes are equal.  The function is called with two args: The
     DATA-slots of the two tree-nodes (see *note A new tree-node:: for
     details about the data-slots).

     Here is an example (call 'C-h f' to see what it does) for this
     callback-function:

          (defun ecb-analyse-compare-node-data (left right)
            "Return not nil when LEFT and RIGHT are identical node-datas."
            (and (equal (nth 2 left) (nth 2 right))
                 (ecb-compare-methods-buffer-node-data (car left)
                                                       (car right))))

     Often a suitable value for this parameter is 'equal'.

'MAYBE-EMPTY-NODE-TYPES'
     Nil or a list of node-types (a node-type is an integer which must
     be set with 'tree-node-new').  Nodes with one of these types are
     treated as empty if they are not expandable (i.e.  they have no
     children) and will be displayed with the empty-symbol ([x]); for
     other nodes see next argument.

'LEAF-NODE-TYPES'
     Nil or a list of node-types (see above).  Nodes with one of these
     types are treated as leafs and will be displayed with the
     leaf-symbol (*).

     Summary for MAYBE-EMPTY-NODE-TYPES and LEAF-NODE-TYPES:

        * Expandable nodes will always be displayed either with the
          open- or with the close-symbol.

        * Not-expandable nodes with a node-type contained in
          MAYBE-EMPTY-NODE-TYPES will be displayed with the
          empty-symbol.

        * Not-expandable nodes with a node-type contained in
          LEAF-NODE-TYPES will be displayed with the leaf-symbol.

        * All other nodes will be displayed with no symbol just with
          correct indentation.

'MENU-CREATOR'
     Nil or function which has to return nil or a list of conses, each
     cons for a known node-type of this tree-buffer (the node-type of a
     node is an integer).  Example: ((0 .  menu-for-type-0) (1 .
     menu-for-type-1)).  The cdr of a cons must be a menu in the same
     format 'tree-buffer-create-menu' expects as argument - see the
     documentation of this function for details.  This function gets two
     arguments: The name of the tree-buffer and the node for which a
     popup-menu should be opened.

     Here is an example for such a menu-creator-callback:

          (defconst ecb-analyse-nodedata-tag-with-pos 0)
          (defconst ecb-analyse-nodedata-tag-without-pos 1)
          (defconst ecb-analyse-nodedata-no-tag 2)

          (defconst ecb-analyse-nodetype-bucket 0)
          (defconst ecb-analyse-nodetype-context 1)
          (defconst ecb-analyse-nodetype-arguments 2)
          (defconst ecb-analyse-nodetype-completions 3)
          (defconst ecb-analyse-nodetype-localvars 4)
          (defconst ecb-analyse-nodetype-prefix 5)
          (defconst ecb-analyse-nodetype-assignee 6)
          (defconst ecb-analyse-nodetype-function 7)
          (defconst ecb-analyse-nodetype-function-arg 8)

          (defun ecb-analyse-create-menu (node)
            "Return a popup-menu suitable for NODE."
            (let* ((data (tree-node->data node))
                   (tag-p (not (equal (nth 1 data) ecb-analyse-nodedata-no-tag)))
                   (tag-with-pos-p (equal (nth 1 data)
                                          ecb-analyse-nodedata-tag-with-pos))
                   (nodetype (nth 2 data)))
              (delq nil (list (if (equal nodetype ecb-analyse-nodetype-completions)
                                  '(ecb-analyse-complete "Complete"))
                              (if tag-p
                                  '(ecb-analyse-show-tag-info "Show tag info"))
                              (if tag-with-pos-p
                                  '(ecb-analyse-jump-to-tag "Jump to tag"))))))

          (defun ecb-analyse-menu-creator (tree-buffer-name node)
            "Creates the popup-menus for the analyse-buffer."
            (let ((nodetype (tree-node->type node)))
              (unless (equal nodetype ecb-analyse-nodetype-bucket)
                (mapcar (function (lambda (type)
                                    (cons type (ecb-analyse-create-menu node))))
                        `(,ecb-analyse-nodetype-context
                          ,ecb-analyse-nodetype-arguments
                          ,ecb-analyse-nodetype-completions
                          ,ecb-analyse-nodetype-localvars
                          ,ecb-analyse-nodetype-prefix
                          ,ecb-analyse-nodetype-assignee
                          ,ecb-analyse-nodetype-function
                          ,ecb-analyse-nodetype-function-arg)))))

     This example would be passed as parameter as follows:

          (tree-buffer-create "myname"
                              :menu-creator 'ecb-analyse-menu-creator
                              ...)

'MENU-TITLES'
     Nil or a list conses, each cons for a node-type.  See MENU-CREATOR.
     The cdr of a cons must be either a string or a function which will
     be called with current node under point and must return a string
     which is displayed as the menu-title.

'MODELINE-MENU-CREATOR'
     Nil or a function which has to return nil or a menu in the same
     format 'tree-buffer-create-menu' expects as argument - see the
     documentation of this function for details.  This function gets one
     argument: The name of the tree-buffer.  If the function returns a
     menu then this menu will be displayed when the user clicks with
     mouse-button 3 at the modeline of the tree-buffer.  The menu-title
     will be "Tree-buffer modeline-menu".

'STICKY-PARENT-P'
     If not nil then with GNU Emacs >= 21 the tree-buffer displays in
     its header-line the unvisible parent-node if there is any.
     sticky-parent-fn is used to get this parent node.

'STICKY-INDENT-STRING'
     String used for indendation of the sticky node in the header-line
     so it matches the tree-display.

'STICKY-PARENT-FN'
     Function used to get that parent node which should be sticky.  This
     function gets as argument a node and should either return nil (if
     there is not suitable parent node) or a node.  This node will be
     displayed as sticky in the header-line of the tree-buffer.  If nil
     is returned and sticky-parent-p is not nil then just the node under
     the header-line is displayed.  If this argument is nil and
     sticky-parent-p is not nil then always the next unvisible parent
     node will be displayed in the header-line.

'TRUNC-LINES'
     Should lines in this tree buffer be truncated (not nil).

'READ-ONLY'
     Should the treebuffer be read-only (not nil).

'TREE-INDENT'
     Spaces subnodes should be indented.  Ignored if TREE-STYLE is
     'image' (see below).

'INCR-SEARCH-P'
     Should the incremental search be enabled in the tree-buffer.  Three
     choices: 'prefix', 'substring', 'nil'.  See the command
     'tree-buffer-incremental-node-search'.

'INCR-SEARCH-ADDITIONAL-PATTERN'
     Every search-pattern is prefixed with a regexp to jump over not
     important stuff of a displayed node-name at incr.  search..  This
     is per default: beginning spaces and guide characters (|'-) and all
     expand/collapse-buttons [+], [x], rsp.  [-]!

     If this argument is not nil then it must be a cons-cell where car
     is a string which should be a regexp-pattern which is added to the
     basic-prefix pattern (see above) and both of them prefix the
     incr-search-pattern.  The cdr is the number of subexpressions in
     this additoonal pattern.

'ARROW-NAVIGATION'
     If not nil then a smart navigation with arrow keys is offered:

        - Left-arrow: If node is expanded then it will be collapsed
          otherwise point jumps to the next "higher" node in the
          hierarchical tree (higher means the next higher tree-level or
          - if no higher level available - the next higher node on the
          same level).

        - Right-arrow: If node is not expanded then it will be expanded.

          Onto a not expandable node the horizontal arrow-keys go one
          character in the senseful correct direction.

        - Up- and down-key: Point jumps to the first character of the
          previous (up) rsp.  next node (down).  "First" character means
          either the first character of the expand-symbol (in case
          EXPAND-SYMBOL-BEFORE-P is not nil) or of the displayed
          node-name.  Or with other words: The first non-indentation and
          non-guide-line (see TREE-STYLE) character of a node.

'HOR-SCROLL-STEP'
     Number of columns a hor.  scroll in the tree-buffer should scroll.
     If not nil then 'M-mouse-1' and 'M-mouse-2' scroll left and right
     and also 'M-<left-arrow>' and 'M-<right-arrow>'.  Ignored with
     XEmacs.

'DEFAULT-IMAGES-DIR'
     Full path where the default images for the tree-buffer can be
     found.  It should contain an image for every name of
     'tree-buffer-tree-image-names'.

'ADDITIONAL-IMAGES-DIR'
     Additional image-dir which should be searched first for images
     needed for current tree-buffer.  If the image can not be found in
     this directory then DEFAULT-IMAGES-DIR is searched.  If the image
     can't even found here the related ascii-symbol is used.

'IMAGE-FILE-PREFIX'
     Common prefix for all image-files for this tree-buffer, e.g.
     "ecb-".

'TREE-STYLE'
     There are three different styles available: Image-style (value
     'image'): Very nice and modern because image-icons are used to
     display the tree-buffer.  For this style the arguments TREE-INDENT
     and EXPAND-SYMBOL-BEFORE-P have no effect.

     Ascii-style with guide-lines (value 'ascii-guides') and ascii-style
     without guidelines (value 'ascii-no-guides'.  See *note Tree-buffer
     styles:: for details about the tree-styles.

     Both ascii-styles are affected by the args TREE-INDENT and
     EXPAND-SYMBOL-BEFORE-P.

'ASCII-GUIDE-FACE'
     If TREE-STYLE is 'ascii-guides' then this defines the face the
     guides should be displayed with.

'TYPE-FACER:'
     Nil or a list of one or more conses, each cons for a node-type (a
     node-type is an integer which must be set with 'tree-node-new').
     The cdr of a cons can be:

        - a face-symbol

        - a function-symbol which gets two arguments (see
          'tree-buffer-insert-text').  This function can do anything,
          but normally it should face a tree-node.

        - the symbol t.  Then the tree-buffer assumes that the node-text
          is already faced and therefore it does not face the node,
          means it does nothing then inserting the node-text, if the
          tree-buffer is updated.

'EXPAND-SYMBOL-BEFORE-P'
     If not nil then the expand-symbol is displayed before the
     node-text.  Ignored when TREE-STYLE is 'image' and Emacs can
     display images.

'HIGHLIGHT-NODE-FACE'
     Face used for highlighting current selected node in this
     tree-buffer.

'GENERAL-FACE'
     General face in which the whole tree-buffer should be displayed.

'AFTER-CREATE-HOOK:'
     A function or a list of functions (with no arguments) called
     directly after creating the tree-buffer and defining it's local
     keymap.  For example such a function can add additional
     key-bindings for this tree-buffer local keymap (use 'local-set-key'
     for this).

     Here is an example for such a hook:

          (defun ecb-common-after-tree-buffer-create-actions ()
            "Things which should be performed after creating a tree-buffer.
          The tree-buffer is the current buffer."
            (local-set-key (kbd "C-t")
                           'ecb-toggle-do-not-leave-window-after-select)
            (if ecb-running-xemacs
                (define-key modeline-map
                  '(button2up)
                  'ecb-toggle-maximize-ecb-window-with-mouse)
              (local-set-key [mode-line mouse-2]
                             'ecb-toggle-maximize-ecb-window-with-mouse)))

'AFTER-UPDATE-HOOK:'
     A function or a list of functions (with no arguments) called each
     time after the tree-buffer has been updated via
     'tree-buffer-update'.

Here is an example how to create a tree-buffer (if you want a
tree-buffer not for ECB then just strip off the
'defecb-tree-buffer-creator' and just call 'tree-buffer-create'):

     (defecb-tree-buffer-creator ecb-create-analyse-tree-buffer
         ecb-analyse-buffer-name
       "Create the tree-buffer for analyse-display."
       (tree-buffer-create
        ecb-analyse-buffer-name
        :frame ecb-frame
        :mouse-action-trigger ecb-tree-mouse-action-trigger
        :is-click-valid-fn 'ecb-interpret-mouse-click
        :node-selected-fn 'ecb-tree-buffer-node-select-callback
        :node-expanded-fn 'ecb-tree-buffer-node-expand-callback
        :node-collapsed-fn 'ecb-tree-buffer-node-collapsed-callback
        :node-mouse-over-fn 'ecb-mouse-over-analyse-node
        :mouse-highlight-fn 'ecb-analyse-node-mouse-highlighted-p
        :node-data-equal-fn 'ecb-analyse-compare-node-data
        :maybe-empty-node-types nil
        :leaf-node-types nil
        :menu-creator 'ecb-analyse-menu-creator
        :menu-titles (ecb-analyse-gen-menu-title-creator)
        :modeline-menu-creator 'ecb-common-tree-buffer-modeline-menu-creator
        :trunc-lines (ecb-member-of-symbol/value-list
                      ecb-analyse-buffer-name
                      ecb-tree-truncate-lines)
        :read-only t
        :tree-indent ecb-tree-indent
        :incr-search-p t
        :incr-search-additional-pattern nil
        :arrow-navigation ecb-tree-navigation-by-arrow
        :hor-scroll-step ecb-tree-easy-hor-scroll
        :default-images-dir (car ecb-tree-image-icons-directories)
        :additional-images-dir (ecb-member-of-symbol/value-list
                                ecb-analyse-buffer-name
                                (cdr ecb-tree-image-icons-directories)
                                'car 'cdr)
        :image-file-prefix "ecb-"
        :tree-style ecb-tree-buffer-style
        :ascii-guide-face ecb-tree-guide-line-face
        :type-facer nil
        :expand-symbol-before-p ecb-tree-expand-symbol-before
        :highlight-node-face ecb-analyse-face
        :general-face ecb-analyse-general-face
        :after-create-hook (append
                            (list (lambda ()
                                    (ecb-common-after-create-actions)))
                            ecb-common-tree-buffer-after-create-hook
                            ecb-analyse-buffer-after-create-hook)
        :after-update-hook nil))


File: ecb.info,  Node: A new tree-node,  Next: Updating a tree-buffer,  Prev: A new tree-buffer,  Up: tree-buffer

11.3.3 How to create a new tree-node
------------------------------------

When a new tree-buffer has been created, then the most senseful
programming-task is adding some tree-nodes to it.

11.3.3.1 Content of a tree-node
...............................

A tree-node is an object which stores in special "slots" several data
necessary to link the node with other nodes, to display the node and to
hold some associated node-data (e.g.  a tag created by the
semantic-library).

A tree-node can have the following slots:

'NAME'
     The name of the node.  Regardless how the node is displayed; see
     SHRINK-NAME and DISPLAYED-NAME.

'TYPE'
     The type of the node; must currently be an interger!  The type is
     used to classify the nodes, so for example all nodes of a certain
     type can display the same popup-menu - see 'tree-buffer-create' or
     *note A new tree-buffer:: which parts of a tree-buffer are
     distinguished by node-types.

'DATA'
     The data of the node; This can be any arbitrary emacs-lisp-object.
     This slots holds that data asscociated with the node and
     represented by the node in the tree-buffer.  Example: Assume a
     tree-buffer displaying a directory-tree where each node just
     displays as its name the name of (sub)directories, but not the full
     path.  The full path is stored in the DATA-slot of a node so when
     clicking onto this node the asscociated directory can be open for
     example in a dired-buffer.

'EXPANDABLE'
     If not nil then the node is expandable means it has children.

'EXPANDED'
     If not nil then the node is currently expanded, means its children
     are visible in the tree-buffers as subnodes of the node.

'PARENT'
     The parent tree-node.  This is the link to the father (rsp.  mother
     ;-) of the node.  It must be a object of type tree-node!

'CHILDREN'
     List of children tree-nodes.  They must be all objects of type
     tree-node!

'SHRINK-NAME'
     Decides if the NAME can be shortened when displayed in a narrow
     tree buffer window.  The following values are valid:

        - 'beginning': The NAME is truncated at the beginning so the end
          is always visible.

        - 'end': The NAME is truncated at the end.  If the tree-node is
          EXPANDABLE the name is truncated so that the expand symbol is
          visible.

        - 'nil': The NAME is never truncated.  In this case
          DISPLAYED-NAME is equal to NAME.

'INDENTSTR'
     Containes the full indentation-string for the node.  So a single
     node can easily be redrawn.

'DISPLAYED-NAME'
     Contains the current displayed name of the node.  The displayed
     name can be different from the NAME according to the value of
     SHRINK-NAME.

11.3.3.2 Creating a new tree-node and adding it to the tree
...........................................................

A new tree-node has to be created with the function 'tree-node-new'.
This "constructor" accepts the following parameter: NAME, TYPE, DATA,
NOT-EXPANDABLE, PARENT and SHRINK-NAME.

For all parameters except NOT-EXPANDABLE the description is available in
the slot-description in the section above.  If NOT-EXPANDABLE is set to
not nil then the slot EXPANDABLE will be set to 'nil'; otherwise to 't'.

'tree-node-new' returns a new tree-node.

The new node can either being added implicitely to the tree via the
optional PARENT-parameter when calling 'tree-buffer-new' or explicitely
by first creating the new node without setting the parent-node but later
setting the parent-node via the according accessor (see next section
below).  Children should only being added with 'tree-node-add-children'
- see next section.

11.3.3.3 Accessing the slots of a tree-node
...........................................

The section above shows which slots a tree-node have.

A slot with name XXX is getable with the following piece of code:

     (tree-node->xxx <a tree node>)

Here is an example how to get the value of the slot DATA:

     (tree-node->data <a tree node>)

A slot with name XXX is setable with the following piece of code:

     (setf (tree-node->xxx <a tree node>) <new value>)

Again an example with slot DATA which sets this slot to the string
"~/a_subdir_of_HOME":

     (setf (tree-node->data <a tree node>) "~/a_subdir_of_HOME")

*IMPORTANT*: Adding new children to a node should always being done with
the function 'tree-node-add-children' because this functions
encapsulates all the necessary stuff needed to add children to a node
(mainly adding the children itself and setting the node itself as parent
for every children).

See *note The tree-buffer-API:: for the rest of the API available for
tree-nodes.


File: ecb.info,  Node: Updating a tree-buffer,  Next: Tree-buffer keybindings,  Prev: A new tree-node,  Up: tree-buffer

11.3.4 How to update a tree-buffer-display after changes
--------------------------------------------------------

When finished with adding tree-nodes to the tree-structure you mostly
want to display the current tree and its state in the buffer/window so a
user can see the current tree and can use it.

Threre are two ways to update a tree-buffer for display:

  1. Updating the whole tree-buffer:

     This is the most used way to update the tree-buffer display.  It's
     quite simple, just call 'tree-buffer-update'.  In most cases you
     want to call it without arguments.

     If you want to display a certain expanded node and as much as
     possible subnodes of this node then pass this node-object as first
     argument to 'tree-buffer-update'.

     If you do not have the need to display a completely new
     tree-structure but you want only to display a previously cached
     display-state then pass this cached-state as second argument to
     'tree-buffer-update'.  See the documentation of this function and
     also *note Tree-buffer How to:: for a detailled description how to
     do this.

  2. Updating only a single node of the tree-buffer:

     Sometimes it can be useful to update only exactly one special node,
     e.g.  when your application codes some node-state in the displayed
     node-name (e.g.  ECB displays the version-control state of a file
     as part of the related node-name) then it is necessary to update
     only this node if the state has changed.

     This can be done with the function 'tree-buffer-update-node'.  For
     this function the mentioning in this section can be misleading
     because this function can not only update the node-display but in
     general the slots NAME, SHRINK-NAME, TYPE, DATA and EXPANDABLE.  Do
     'C-h f' to see the documentation of this function for all details!


File: ecb.info,  Node: Tree-buffer keybindings,  Next: The tree-buffer-API,  Prev: Updating a tree-buffer,  Up: tree-buffer

11.3.5 Default and customizable keybindings of a tree-buffer
------------------------------------------------------------

When creating a tree-buffer with 'tree-buffer-create' the following keys
will automatically being bound:

'delete'
'backspace'
'home'
'end'
'a' (and each other key bound to 'self-insert-command')
     All of these keys are bound to the command
     'tree-buffer-incremental-node-search' if the argument INCR-SEARCH-P
     of 'tree-buffer-create' was set to not nil.  See the documentation
     of 'tree-buffer-incremental-node-search' for all details.

'RET'
'C-RET'
'S-RET'
'M-RET'
'C-S-RET'
'mouse-1'
'C-mouse-1'
'S-mouse-1'
'M-mouse-1'
'mouse-2'
'C-mouse-2'
'S-mouse-2'
'M-mouse-2'
     All these keys are bound to an action-dispatcher which works as
     follows:

     If the callback-function in slot IS-CLICK-VALID-FN of the
     tree-buffer (*note A new tree-buffer::) returns nil then nothing is
     done.

     If either 'RET' has been hitted or point is as the node-name (i.e.
     the user has clicked with the mouse-1/2 at the node-name) then the
     callback-function in slot NODE-SELECTED-FN is called with the
     needed arguments (*note A new tree-buffer::).

     If point is at the expand/collape-button then depending on the
     expansion-state of the node either the callback in slot
     NODE-EXPANDED-FN or NODE-COLLAPSED-FN is called (for parameters see
     again *note A new tree-buffer::).

     *IMPORTANT*: None of these callbacks must modify the slot EXPANDED
     of the passed node because this is done automatically by the
     action-dispatcher!

     At the end the dispatcher updates the tree-buffer-display with
     optimized display of the clicked/selected node - see *note Updating
     a tree-buffer::.  This means 'tree-buffer-update' is called with
     that node as argument.

'TAB'
     Depending on the expansion-state of the node either the callback in
     slot NODE-EXPANDED-FN or NODE-COLLAPSED-FN is called (for
     parameters see again *note A new tree-buffer::).

     *IMPORTANT*: None of these callbacks must modify the slot EXPANDED
     of the passed node because this is done automatically by the
     action-dispatcher!

     At the end the the tree-buffer-display is updated with optimized
     display of the clicked/selected node - see *note Updating a
     tree-buffer::.  This means 'tree-buffer-update' is called with that
     node as argument.

'mouse-3'
     Activates the popup-menu for the current tree-buffer for current
     node-type (if defined).  See *note A new tree-buffer:: at argument
     MENU-CREATOR and MENU-TITLES.  These callbacks are called for
     getting the menu and the menu-title.

'modeline-mouse-3'
     Activates the popup-menu for the modeline of the current
     tree-buffer (if defined).  See *note A new tree-buffer:: at
     argument MODELINE-MENU-CREATOR.  This callback is called for
     getting the modeline-menu.

'M-m'
     This key is bound to the command
     'tree-buffer-show-node-menu-keyboard': Activates the popup-menu of
     current tree-buffer for current node-type via keyboard.  If called
     with a prefix-arg then the library 'tmm.el' is used for displaying
     the popup-menu - ignored with XEmacs.

'<up>'
'<down>'
'<left>'
'<right>'
     These keys are bound to the command 'tree-buffer-arrow-pressed'
     which implements the smart arrow-key-navigation described in *note
     A new tree-buffer:: at argument ARROW-NAVIGATION.

In addition to these automatically bound keys you can add further
keybindings to the local-keymap of the tree-buffer with the parameter
AFTER-CREATE-HOOK of 'tree-buffer-create'.  See *note A new
tree-buffer:: for an example which binds 'C-t' in this hook.


File: ecb.info,  Node: The tree-buffer-API,  Next: Do not with tree-buffer,  Prev: Tree-buffer keybindings,  Up: tree-buffer

11.3.6 All functions available for tree-buffers and tree-nodes
--------------------------------------------------------------

This chapter lists the complete API available for tree-buffers and
tree-nodes.

*IMPORTANT*: These are the only functions and macros of tree-buffer.el
you are allowed to use for programming with tree-buffers and tree-nodes.
If you use other - not here listed - functions, macros or variables of
tree-buffer.el then you run the risk of unwanted side-effects or
program-behaviors!

11.3.6.1 The API for a tree-buffer:
...................................

See the documentation of these functions (e.g.  via 'C-h f') to get the
details how to use it.

   * 'tree-buffer-add-image-icon-maybe'
   * 'tree-buffer-find-image'
   * 'tree-buffer-create'(1)
   * 'tree-buffer-defpopup-command'
   * 'tree-buffer-destroy'(2)
   * 'tree-buffer-empty-p'
   * 'tree-buffer-expand-node'
   * 'tree-buffer-get-node-at-point'
   * 'tree-buffer-node-data-equal-p'
   * 'tree-buffer-recenter'
   * 'tree-buffer-highlight-node-by-data/name'
   * 'tree-buffer-find-displayed-node-by-data/name'
   * 'tree-buffer-remove-highlight'
   * 'tree-buffer-remove-node'
   * 'tree-buffer-clear-tree'
   * 'tree-buffer-displayed-nodes-copy'
   * 'tree-buffer-search-displayed-node-list'
   * 'tree-buffer-number-of-displayed-nodes'
   * 'tree-buffer-get-data-store'
   * 'tree-buffer-set-data-store'
   * 'tree-buffer-get-root'
   * 'tree-buffer-set-root'
   * 'tree-buffer-update'
   * 'tree-buffer-update-node'

11.3.6.2 The API for a tree-node
................................

See the documentation of these functions (e.g.  via 'C-h f') to get the
details how to use it.

   * 'tree-node-add-children'
   * 'tree-node-linelength'
   * 'tree-node-map-subtree'
   * 'tree-node-new'
   * 'tree-node-new-root'
   * 'tree-node-remove-child'
   * 'tree-node-remove-child-by-data/name'
   * 'tree-node-find-child-by-data/name'
   * 'tree-node-find-child-by-name'
   * 'tree-node-search-subtree-by-data'
   * 'tree-node-search-subtree-by-id'
   * 'tree-node-sort-children'
   * 'tree-node-toggle-expanded'

In addition to these functions the tree-node API contains all accessors
for a tree-node which are described in *note A new tree-node::.

   ---------- Footnotes ----------

   (1) If the tree-buffer should be used by ECB then you must use
'defecb-tree-buffer-creator' - see the documentation!

   (2) Not needed when 'defecb-tree-buffer-creator' has been used for
creation.


File: ecb.info,  Node: Do not with tree-buffer,  Next: Tree-buffer How to,  Prev: The tree-buffer-API,  Up: tree-buffer

11.3.7 Things which are strictly forbidden
------------------------------------------

Variable 'tree-buffers': Only for internal use!  It contains all
tree-buffers of current Emacs-instance, means *all* tree-buffers of
*all* applications which uses currently tree-buffers.  Every application
must store its own collection of tree-buffers in an own variable!  For
example: ECB stores its tree-buffer set in 'ecb-tree-buffers'!

Variable 'tree-buffer-displayed-nodes': Only for internal use!  Contains
all the current visible nodes of current tree-buffer in top-to-bottom
order.  This variable is buffer-local in each tree-buffer!  Do not use
it directly!  When you want to cache the current display, then see *note
Tree-buffer How to:: how to do this.

*IMPORTANT*: An application may only use the API tree-buffer.el provides
but no internal variables - see *note The tree-buffer-API::!


File: ecb.info,  Node: Tree-buffer How to,  Prev: Do not with tree-buffer,  Up: tree-buffer

11.3.8 How to deal with certain programming-requirements
--------------------------------------------------------

This chapter describes in detail how to solve certain
programming-challenges with tree-buffers.

11.3.8.1 Caching the current tree-buffer display
................................................

Sometimes it can be useful or important to cache the current display of
a tree-buffer and display later exactly this cached display-state.  Here
is how to do this:

  1. Caching the display: You have to do two tasks: First store the
     current internal structure of the tree-buffer; you must do this
     with the function 'tree-buffer-displayed-nodes-copy'.  Then store
     the buffer-contents of that tree-buffer you want to cache; you can
     do this for example with 'buffer-substring'.  For both tasks you
     must make the tree-buffer the current-buffer.

  2. Displaying a previous tree-buffer-cache: Make the tree-buffer the
     current buffer, call 'tree-buffer-update' and pass as second
     argument CONTENT the data you have stored in step 1.  See the
     documentation of 'tree-buffer-update' for details.

     Here is an example:

          (tree-buffer-update
            nil
            (cons (nth 2 cache-elem) ;; the stored buffer-string
                  (nth 1 cache-elem) ;; the stored tree-structure
            )))


File: ecb.info,  Node: Adviced functions,  Next: The layout-engine,  Prev: tree-buffer,  Up: Elisp programming

11.4 How to deal with the adviced functions
===========================================

ECB needs a bunch of advices so ECB can work correctly.  ECB has a
powerful advice-backbone which allows defining sets of adviced functions
whereas a set means, that all advices of a certain set are always
enabled or disabled together.

For this ECB contains four macros:

   - 'defecb-advice-set'
   - 'defecb-advice'
   - 'ecb-with-original-adviced-function-set'
   - 'ecb-with-ecb-advice' (for this one see below)

For a detailed explanation of each macro read the documentation with
'describe-function'!

An advice in ECB must not being defined by 'defadvice' but only with
'defecb-advice' which in turn needs a previously defined advice-set
defined by 'defecb-advice-set'.

So ECB has always full control of all advices.  For example ECB
automatically disables all advices of all advice-sets at load-time of
ECB and also at deactivation time of ECB. So you can be sure that after
deactivating ECB all ecb-advices are deactivated/disabled too.

In addition to the four macros above ECB offers two further macros for
running code with disabled some ecb-advices:

   - 'ecb-with-original-basic-functions'
   - 'ecb-with-original-permanent-layout-functions'

The advice set 'ecb-basic-adviced-functions' contains most of the
ecb-advices.  See the contents of this variable to see which advices are
contained in this set.  Use 'ecb-with-original-basic-functions' when you
want evaluating elisp-code with disabled basic-advices.
'ecb-with-original-basic-functions' is only a shortcut for
'ecb-with-original-adviced-function-set' called for the
'ecb-basic-adviced-functions'-set.

Same for 'ecb-with-original-permanent-layout-functions' which is a
shortcut for the advice-set 'ecb-permanent-adviced-layout-functions'.

Last but not least ECB contains an advice-set
'ecb-always-disabled-advices'.  These advices are always disabled.  This
advice-set can not be enabled by 'ecb-enable-advices' but such an advice
has to be activated 'on demand' by the caller.  Such an advice must be
used with the macro 'ecb-with-ecb-advice' (see the docstring) and is
also enabled within the BODY of the macro-call.

ECB contains some more advice-sets but don't bother about it.

*Please Note*: See the value of 'ecb-adviced-function-sets' which
advice-sets are defined and see 'ecb-adviced-functions' for an overview
for all adviced functions.


File: ecb.info,  Node: The layout-engine,  Prev: Adviced functions,  Up: Elisp programming

11.5 How to program new layouts and new special windows
=======================================================

There are two aspects concerning this topic:

  1. Programming a new layout which contains several special ECB-windows
     like directories, sources, methods, history or other special
     windows and arranging them in a new outline.

  2. Creating complete new special windows (e.g.  a local-variable
     window for a graphical debugger like JDEbug of JDEE), adding them
     to a layout and synchronizing them with the current active
     edit-window.

The former one covers merely the layout-programming aspect which is
explained in the first subsection of this chapter whereas the latter one
covers all aspects of creating new special windows and what is necessary
to synchronize it with the current active edit-window of ECB. This is
explained in the second subsection which will refers to the first
subsection.

* Menu:

* Programming a new layout::    How to program a new layout
* Programming special windows:: Aspects of programming special windows
* Possible layout-outlines::    The wide range of possible layouts
* The layout-engine API::       The complete layout-engine API


File: ecb.info,  Node: Programming a new layout,  Next: Programming special windows,  Prev: The layout-engine,  Up: The layout-engine

11.5.1 How to program a new layout
----------------------------------

If you just want creating a new layout with the standard ECB-windows
like directories, sources, methods, history and speedbar it's is
strongly recommended to define the new layout interactively with the
command 'ecb-create-new-layout' (*note Creating a new ECB-layout::).

If you want creating a new layout and if this layout should contain
other special windows than the standard ECB-windows then it's still
recommended to define this layout interactively with
'ecb-create-new-layout' and using the option to give the created windows
user-defined types.  For every user defined type you have then just to
program the necessary buffer-set function.  For all the details see
*note Creating a new ECB-layout::.

But if you do not like the interactive way (because you are tough and
brave) but you want programming the new layout with Elisp then use the
macro 'ecb-layout-define' (the following definition has stripped the
prefix "ecb-" for better indexing this manual):

 -- Macro: layout-define name type doc &rest create-code
     Creates a new ECB-layout with name NAME.  TYPE is the type of the
     new layout and is literal, i.e.  not evaluated.  It can be left,
     right, top or left-right.  DOC is the docstring for the new
     layout-function "ecb-layout-function-<name>".  CREATE-CODE is all
     the lisp code which is necessary to define the ECB-windows/buffers.
     This macro adds the layout with NAME and TYPEto the internal
     variable 'ecb-available-layouts'.

     Preconditions for CREATE-CODE:
       1. Current frame is splitted at least in one edit-window and the
          "column" (for layout types left, right and left-right) rsp.
          "row" (for a top layout) for the special ECB-windows/buffers.
          The width of the "column" rsp.  the height of the "row" is
          always defined with the option 'ecb-windows-width' rsp.
          'ecb-windows-height'.  Depending on the value of the option
          'ecb-compile-window-height' there is also a compile window at
          the bottom of the frame which is stored in
          'ecb-compile-window'.

       2. All windows are not dedicated.

       3. Neither the edit-window nor the compile-window (if there is
          one) are selected for types left, right and top.  For type
          left-right the left column-window is selected

       4. All ECB-advices of the advice-sets
          'ecb-basic-adviced-functions' and
          'ecb-permanent-adviced-functions' are disabled.

     Things CREATE-CODE has to do:
       1. Splitting the ECB-tree-windows-column(s)/row (s.a.)  in all
          the ECB-windows the layout should contain (directories,
          sources, methods and history).  The split must not be done
          with other functions than 'ecb-split-hor' and 'ecb-split-ver'!
          It is recommended not to to use a "hard" number of split-lines
          or -rows but using fractions between -0.9 and +0.9!  Tip: It
          is recommended to spilt from right to left and from bottom to
          top or with other words: First create the right-most and
          bottom-most special windows!

       2. Making each special ECB-window a dedicated window.  This can
          be done with one of the following functions:
             - 'ecb-set-directories-buffer'
             - 'ecb-set-sources-buffer'
             - 'ecb-set-methods-buffer'
             - 'ecb-set-history-buffer'
             - 'ecb-set-speedbar-buffer'
             - 'ecb-set-analyse-buffer'
             - 'ecb-set-symboldef-buffer'
          Each layout can only contain one of each tree-buffer-type!

          In addition to these functions there is a general macro:
          'defecb-window-dedicator-to-ecb-buffer': This macro defines a
          so called "window-dedicator" which is a function registered at
          ECB and called by ECB to perform any arbitrary code in current
          window and makes the window autom.  dedicated to the special
          ecb-buffer at the end.  This can be used by third party
          packages like JDEE to create arbitrary ECB-windows besides the
          standard special ecb-windows.

          To make a special ECB-window a dedicated window either one of
          the seven functions above must be used or a new
          "window-dedicator"-function has to be defined with
          'defecb-window-dedicator-to-ecb-buffer' and must be used
          within the layout-definition.

       3. Every(!)  special ECB-window must be dedicated to a buffer as
          described in 2.

       4. CREATE-CODE must work correctly regardless if there is already
          a compile-window (stored in 'ecb-compile-window') or not
          ('ecb-compile-window' is nil).

     Things CREATE-CODE can do or can use:
       1. The value of 'ecb-compile-window' which contains the
          compile-window (if there is one).  Using the values of
          'ecb-compile-window-height', 'ecb-windows-width',
          'ecb-windows-height'.

     Things CREATE-CODE must NOT do:
       1. Splitting the edit-window
       2. Creating a compile-window
       3. Deleting the edit-window, the compile-window (if there is any)
          or the ECB-windows-column(s)/row (see Precondition 1.)
       4. Referring to the value of 'ecb-edit-window' because this is
          always nil during CREATE-CODE.

     Postconditions for CREATE-CODE:
       1. The edit-window must be the selected window and must not be
          dedicated and not be splitted.

       2. Every window besides the edit-window (and the compile-window)
          must be a dedicated window (e.g.  a ECB-tree-window).

Use this macro to program new layouts within your '.emacs' or any other
file which is loaded into your Emacs.  After loading the file(s) with
all the new layout-definitions you can use it by customizing the option
'ecb-layout-name' to the appropriate name or with the command
'ecb-change-layout'.

With the function 'ecb-layout-undefine' you can remove a layout from the
list of available layouts:

 -- Function: layout-undefine name
     Unbind ecb-layout-function-<NAME> and
     ecb-delete-window-ecb-windows-<NAME> and remove 'NAME' from
     'ecb-available-layouts'.

Here is an example for a new layout programmed with 'ecb-layout-define':

     (ecb-layout-define "my-own-layout" left nil
       ;; The frame is already splitted side-by-side and point stays in the
       ;; left window (= the ECB-tree-window-column)

       ;; Here is the creation code for the new layout

       ;; 1. Defining the current window/buffer as ECB-methods buffer
       (ecb-set-methods-buffer)
       ;; 2. Splitting the ECB-tree-windows-column in two windows
       (ecb-split-ver 0.75 t)
       ;; 3. Go to the second window
       (other-window 1)
       ;; 4. Defining the current window/buffer as ECB-history buffer
       (ecb-set-history-buffer)
       ;; 5. Make the ECB-edit-window current (see Postcondition above)
       (select-window (next-window)))

This layout definition defines a layout with name "my-own-layout" which
looks like:

     -------------------------------------------------------
     |              |                                      |
     |              |                                      |
     |              |                                      |
     |  Methods     |                                      |
     |              |                                      |
     |              |                                      |
     |              |               Edit                   |
     |              |                                      |
     |              |                                      |
     |--------------|                                      |
     |              |                                      |
     |  History     |                                      |
     |              |                                      |
     -------------------------------------------------------
     |                                                     |
     |                    Compilation                      |
     |                                                     |
     -------------------------------------------------------


File: ecb.info,  Node: Programming special windows,  Next: Possible layout-outlines,  Prev: Programming a new layout,  Up: The layout-engine

11.5.2 All aspects of programming special windows
-------------------------------------------------

ECB offers a flexible programmable layout-engine for other packages to
display their own contents and informations in special ECB-windows.  An
example could be a graphical debugger which offers a special window for
displaying local variables and another special window for messages from
the debugger-process (like JDEbug of JDEE(1)).

This section explains all aspects of programming new special windows,
adding them to a new layout and synchronizing them with edit-window of
ECB. This can be done best with an easy example which nevertheless
covers all necessary aspects to be a good example and skeleton for
complex tools (like a graphical debugger) which want to use the
layout-engine of ECB do display their own information.

*IMPORTANT*: See *note tree-buffer:: for a full documentation of the
library tree-buffer.el which can be used for programming a new special
window as a tree!

Here comes the example:

11.5.2.1 The outline of the example layout:
...........................................

     -------------------------------------------------------
     |Bufferinfo for <filename>:            |[prior]       |
     |Type: file                            |[next]        |
     |Size: 23456                           |              |
     |Modes: rw-rw-rw-                      |              |
     |-----------------------------------------------------|
     |                                                     |
     |                                                     |
     |                                                     |
     |                                                     |
     |                 edit-window                         |
     |                                                     |
     |                                                     |
     |                                                     |
     |                                                     |
     -------------------------------------------------------
     |                                                     |
     |                 compilation-window                  |
     |                                                     |
     -------------------------------------------------------

11.5.2.2 The description of the layout-contents
...............................................

The top-left window always displays informations about the current
buffer in the selected edit-window.  This window demonstrates how autom.
synchronizing a special window/buffer of a layout with current
edit-window.

The top-right window contains an read-only "action-buffer" and offers
two buttons which can be used with the middle mouse-button to scroll the
edit-window.  This is not very senseful but it demonstrates how to
control the edit-window with actions performed in a special
window/buffer of a layout.

(If you have not set a compilation-window in 'ecb-compile-window-height'
then the layout contains no persistent compilation window and the other
windows get a little more place).

11.5.2.3 The example code
.........................

Now let have us a look at the several parts of the Elisp-program needed
to program this new example layout.  ECB contains a library
'ecb-examples.el' which contains the full working code of this example.
To test this example and to play with it you can load this library into
Emacs (with 'load-library' for example) and then calling
'ecb-change-layout' (bound to 'C-c . lc') and inserting
"example-layout1" as layout-name.  An alternative is calling
'ecb-examples-activate' and 'ecb-examples-deactivate'.  For details see
file 'ecb-examples.el'.

The following steps only contain code-skeletons to demonstrate the
principle.  The full working code is available in 'ecb-examples.el'.

11.5.2.4 The bufferinfo buffer of the example
.............................................

The name of the bufferinfo buffer:

     (defconst ecb-examples-bufferinfo-buffer-name " *ECB buffer info*")

Two helper functions for displaying infos in a special buffer:

     (defun ecb-examples-print-file-attributes (buffer filename)
       (ecb-with-readonly-buffer buffer
         (erase-buffer)
         (insert (format "Bufferinfo for %s:\n\n" filename))
         ;; insert with the function `file-attributes' some
         ;; informations about FILENAME.
         ))

     (defun ecb-examples-print-non-filebuffer (buffer buffer-name)
       (ecb-with-readonly-buffer buffer
         (erase-buffer)
         ;; analogous to `ecb-examples-print-file-attributes'
         ))

For synchronizing the bufferinfo window with the current source-buffer
we first introduce some three options which are very typical for a
special ECB-window which should be synchronized with current buffer in
the edit-area.

The :type of the first two options is essential and *MUST NOT* be
defined differently, because the macro
'defecb-autocontrol/sync-function' (s.b.)  and the function
'ecb-activate-ecb-autocontrol-function' (s.b.)  expects exactly these
option-types.

The third one for an own hook running after synchronizing is not
essential but mostly useful for users who wants to do some own stuff.

Here come the three options - for detailled docstrings take a look into
the file 'ecb-examples.el':

     (defcustom ecb-examples-bufferinfo-buffer-sync 'basic
       "*Synchronize the bufferinfo buffer automatically with current edit buffer.

     If 'always then the synchronization takes place always a buffer changes in the
     edit window, if nil then never. If a list of major-modes then only if the
     `major-mode' of the new buffer belongs NOT to this list.

     If the special value 'basic is set then ECB uses the setting of the option
     `ecb-basic-buffer-sync'.

     IMPORTANT NOTE: Every time the synchronization is done the hook
     `ecb-bufferinfo-buffer-sync-hook' is evaluated."
       :group 'ecb-examples-bufferinfo
       :type '(radio :tag "Synchronize ECBs example bufferino buffer"
                     (const :tag "use basic value" :value basic)
                     (const :tag "Always" :value always)
                     (const :tag "Never" nil)
                     (repeat :tag "Not with these modes"
                             (symbol :tag "mode"))))

     (defcustom ecb-examples-bufferinfo-buffer-sync-delay 'basic
       "*Time Emacs must be idle before the bufferinfo-buffer is synchronized.
     Synchronizing is done with the current source displayed in the edit window. If
     nil then there is no delay, means synchronization takes place immediately. A
     small value of about 0.25 seconds saves CPU resources and you get even though
     almost the same effect as if you set no delay.

     If the special value 'basic is set then ECB uses the setting of the option
     `ecb-basic-buffer-sync-delay'"
       :group 'ecb-analyse
       :type '(radio (const :tag "use basic value" :value basic)
                     (const :tag "No synchronizing delay" :value nil)
                     (number :tag "Idle time before synchronizing" :value 2))
       :set (function (lambda (symbol value)
                        (set symbol value)
                        (if (and (boundp 'ecb-minor-mode)
                                 (featurep 'ecb-examples)
                                 ecb-minor-mode)
                            (ecb-activate-ecb-autocontrol-function
                             value 'ecb-examples-bufferinfo-buffer-sync))))
       :initialize 'custom-initialize-default)

     (defcustom ecb-examples-bufferinfo-buffer-sync-hook nil
       "Hook run at the end of `ecb-examples-bufferinfo-buffer-sync'.
     See documentation of `ecb-examples-bufferinfo-buffer-sync' for conditions when
     synchronization takes place and so in turn these hooks are evaluated.

     ..."
       :group 'ecb-analyse
       :type 'hook)


Now we define the synchronizing function.  *IMPORTANT*: The main
synchronizing function must be defined with the macro
'defecb-autocontrol/sync-function'!  See the documentation of this
function for all details.

The following function synchronizes the bufferinfo buffer with the
current buffer of the edit-window if that buffer has changed

See the comments in the code for explanations.

     (defvar ecb-examples-bufferinfo-last-file-buffer nil)

     (defecb-autocontrol/sync-function ecb-examples-bufferinfo-buffer-sync
         ecb-examples-bufferinfo-buffer-name ecb-examples-bufferinfo-buffer-sync t
       "Synchronizes the buffer-info buffer with current source if changed.
     Can be called interactively but normally this should not be necessary because
     it will be called autom. by the internal synchronizing mechanism of ECB."

       ;; The macro `defecb-autocontrol/sync-function' does a lot for our
       ;; conveniance:

       ;; 1) here we can be sure that the buffer with name
       ;; `ecb-examples-bufferinfo-buffer-name' is displayed in a window of
       ;; `ecb-frame' because the macro `defecb-autocontrol/sync-function'
       ;; encapsulates automatically the following code within
       ;; `ecb-do-if-buffer-visible-in-ecb-frame' and this macro binds locally the
       ;; variables visible-buffer and visible-window: visible-window:=
       ;; (get-buffer-window ecb-examples-bufferinfo-buffer-name) visible-buffer:=
       ;; (get-buffer ecb-examples-bufferinfo-buffer-name)

       ;; 2) The macro `defecb-autocontrol/sync-function' automatically takes care of
       ;;    the setting of option `ecb-examples-bufferinfo-buffer-sync' and runs the
       ;;    following code only when the related conditions are true

       ;; 3) The generated function has one optional argument FORCE which can be used
       ;; in the code below.

       ;; 4) The macro `defecb-autocontrol/sync-function' makes this synchronizing
       ;;    function interactive

       ;; For details please read the documentation of
       ;; `defecb-autocontrol/sync-function'!

       ;; synchronize only when point stays in one of the edit-window.
       (when (ecb-point-in-edit-window-number)

         ;; we need the file-name of indirect-buffers too (if the base-buffer is a
         ;; file-buffer), therefore we use `ecb-buffer-file-name' (see the docstring
         ;; of this function)
         (let ((filename (ecb-buffer-file-name (current-buffer))))

           (if (and filename (ecb-buffer-or-file-readable-p filename))

               ;; synchronizing for real filesource-buffers or indirect buffers of
               ;; real file buffers

                 ;; Let us be smart: We synchronize only if sourcebuffer has changed
                 ;; or if the argument FORCE is not nil
                 (when (or force
                           (not (equal (current-buffer)
                                       ecb-examples-bufferinfo-last-file-buffer)))
                   ;; set new last-file-buffer so we can check next time if changed
                   (setq ecb-examples-bufferinfo-last-file-buffer (current-buffer))
                   ;; we display the file-infos for current source-buffer
                   (ecb-examples-print-file-attributes visible-buffer filename))

             ;; what should we do for non file buffers like help-buffers etc...
             (setq ecb-examples-bufferinfo-last-file-buffer nil)
             (ecb-examples-print-non-filebuffer visible-buffer
                                                (buffer-name (current-buffer)))))

         ;; Now lets run the hooks in `ecb-examples-bufferinfo-buffer-sync-hook'
         (run-hooks 'ecb-examples-bufferinfo-buffer-sync-hook)))

Two conveniance commands for the user:

     (defun ecb-maximize-bufferinfo-window ()
       "Maximize the bufferinfo-window.
     I.e. delete all other ECB-windows, so only one ECB-window and the
     edit-window\(s) are visible \(and maybe a compile-window). Works
     also if the ECB-analyse-window is not visible in current layout."
       (interactive)
       (ecb-display-one-ecb-buffer ecb-examples-bufferinfo-buffer-name))

     (defun ecb-goto-bufferinfo-window ()
       "Make the bufferinfo-window the current window."
       (interactive)
       (ecb-goto-ecb-window ecb-examples-bufferinfo-buffer-name))

11.5.2.5 Synchronizing the bufferinfo-buffer automatically
..........................................................

By using the macro 'defecb-autocontrol/sync-function' for defining our
synchronizing function we have already registered this function as a
synchronizing function managed by ECB:

The only thing we need is to tell ECB when this function should run -
for this we have already defined the first two options in our example
(s.a.).  ECB offers to functions for

   * 'ecb-activate-ecb-autocontrol-function': Activate/start
     synchronizing
   * 'ecb-stop-autocontrol/sync-function': Stop synchronizing

It's smart to activate the synchronizing function within the
dedicator-function.  See the comment within the following function.

The function which makes the bufferinfo-buffer dedicated to a window and
registers the new special window/buffer at ECB.

     (defecb-window-dedicator-to-ecb-buffer ecb-examples-set-bufferinfo-buffer
         ecb-examples-bufferinfo-buffer-name nil
       "Set the buffer in the current window to the bufferinfo-buffer and make this
     window dedicated for this buffer. Makes the buffer read-only."

       ;; activating the synchronization of the bufferinfo-window:
       ;; `ecb-activate-ecb-autocontrol-function' takes care of the possible
       ;; settings in `ecb-examples-bufferinfo-buffer-sync-delay'. Therefore we do
       ;; it here because then changes in ecb-examples-bufferinfo-buffer-sync-delay
       ;; are taken into account each time the bufferinfo buffer is set in the
       ;; layout (after each hiding/showing the ecb-window, each redrawing the
       ;; layout deactivating/activating ECB)
       (ecb-activate-ecb-autocontrol-function ecb-examples-bufferinfo-buffer-sync-delay
                                              'ecb-examples-bufferinfo-buffer-sync)

       (switch-to-buffer (get-buffer-create ecb-examples-bufferinfo-buffer-name))
       (setq buffer-read-only t))

This is all what we need for the special bufferinfo buffer.  We have
demonstrated already three of the important functions/macros of the
layout-engine API of ECB: 'ecb-with-readonly-buffer',
'defecb-autocontrol/sync-function' and
'defecb-window-dedicator-to-ecb-buffer' (*note The layout-engine API::.
Especially the second macro is a MUST for programming good synchronizing
functions which do not waste CPU-power!  We have also shown how to
start/activate a synchronizing function by
'ecb-activate-ecb-autocontrol-function'.  Later we will see how to stop
it.

11.5.2.6 The action buffer of the example
.........................................

The name of the action-buffer:

     (defconst ecb-examples-action-buffer-name " *ECB action buffer*")

Two helper functions for creating a readonly action-buffer with a
special local key-map for the middle-mouse-button and two buttons
[prior] and [next]:

     (defun ecb-examples-insert-text-in-action-buffer (text)
       (let ((p (point)))
         (insert text)
         (put-text-property p (+ p (length text)) 'mouse-face
                                                  'highlight)))

     (defun ecb-examples-action-buffer-create ()
       (save-excursion
         (if (get-buffer ecb-examples-action-buffer-name)
             (get-buffer ecb-examples-action-buffer-name)

           (set-buffer (get-buffer-create
                         ecb-examples-action-buffer-name))

           ;; we setup a local key-map and bind middle-mouse-button
           ;; see ecb-examples.el for the full code

           ;; insert the action buttons [prior] and [next] and
           ;; make it read-only

           (ecb-with-readonly-buffer (current-buffer)
             (erase-buffer)
             (ecb-examples-insert-text-in-action-buffer "[prior]")
             ;; analogous for the [next] button
             )

           (current-buffer))))

The function which performs the actions in the action-buffer if clicked
with the middle-mouse button onto a button [next] or [prior].

     (defun ecb-examples-action-buffer-clicked (e)
       (interactive "e")
       (mouse-set-point e)
       (let ((line (buffer-substring (ecb-line-beginning-pos)
                                     (ecb-line-end-pos))))
         (cond ((string-match "prior" line)
                (ecb-select-edit-window)
                (call-interactively 'scroll-down))
               ((string-match "next" line)
                ;; analogous for [next]
                ))))

Two conveniance-commands for the user:

     (defun ecb-maximize-action-window ()
       "Maximize the action-window.
     I.e. delete all other ECB-windows, so only one ECB-window and the
     edit-window\(s) are visible \(and maybe a compile-window). Works
     also if the ECB-analyse-window is not visible in current layout."
       (interactive)
       (ecb-display-one-ecb-buffer ecb-examples-action-buffer-name))

     (defun ecb-goto-action-window ()
       "Make the action-window the current window."
       (interactive)
       (ecb-goto-ecb-window ecb-examples-action-buffer-name))

The function which makes the action-buffer dedicated to a window and
registers it at ECB.

     (defecb-window-dedicator-to-ecb-buffer ecb-examples-set-action-buffer
         ecb-examples-action-buffer-name nil
       "Set the buffer in the current window to the action-buffer
     and make this window dedicated for this buffer."
       (switch-to-buffer (buffer-name (ecb-examples-action-buffer-create))))

We do not need more code for the action buffer.  All of the code is
standard emacs-lisp which would also needed if used without ECB.

11.5.2.7 Adding the bufferinfo- and action-buffer to a new layout
.................................................................

Now we add the bufferinfo- and the action-buffer to a new layout of type
top with name "example-layout1":

     (ecb-layout-define "example-layout1" top

       ;; dedicating the bufferinfo window to the bufferinfo-buffer
       (ecb-examples-set-bufferinfo-buffer)

       ;; creating the action-window
       (ecb-split-hor 0.75)

       ;; dedicate the action window to the action-buffer
       (ecb-examples-set-action-buffer)

       ;; select the edit-window
       (select-window (next-window)))

This all what we need to define the new layout.  See *note Programming a
new layout:: for more details of the pure layout-programming task.

11.5.2.8 Activating and deactivating new layouts
................................................

Because a set of new special windows integrated in a new layout is often
just the GUI of a complete tool (like a graphical debugger) we
demonstrate here the complete activation and deactivation of such a tool
or at least of the tool-GUI. We decide that the GUI of our example
"tool" needs a compile-window with height 5 lines and the height of the
special windows "row" on top should be exactly 6 lines (normally width
and height of the special windows should be a fraction of the frame, but
here we use 6 lines(2)

Here comes the (de)activation code.

The code for saving and restoring the state before activation (the full
code is available in 'ecb-examples.el':

     (defun ecb-examples-preactivation-state(action)
       (cond ((equal action 'save)
              ;; code for saving the state
              )
             ((equal action 'restore)
             ;; code for restoring the state
             )))

The following function activates the GUI of our example tool:

     (defun ecb-examples-activate ()
       "Activate the new layout \"example-layout1\".
     Acivates the function `ecb-examples-bufferinfo-buffer-sync', set
     `ecb-compile-window-height' to 5 and `ecb-windows-height' to 6. The
     preactivation-state is saved and will be restored by
     `ecb-examples-deactivate'."
       (interactive)

       (assert (featurep 'ecb) nil
               "ECB must be loaded!")
       (assert ecb-minor-mode nil
               "ECB must be activated!")
       (assert (equal (selected-frame) ecb-frame) nil
               "The ECB-frame must be selected!")
       (assert (not (ecb-string= ecb-layout-name "example-layout1")) nil
               "The examples-layout1 is already active!")

       ;; saving the state
       (ecb-examples-preactivation-state 'save)

       ;; switch to our prefered layout
       (setq ecb-windows-height 6)
       (setq ecb-compile-window-height 8)
       (let ((ecb-change-layout-preserves-compwin-state nil))
         ;; activating the synchronization of the bufferinfo-window is done in the
         ;; dedicator-function (see `ecb-examples-set-bufferinfo-buffer' for the
         ;; reason). So the synchronizing will be activated implicitly with the
         ;; layout-switch because this redraws the layout and this calls all
         ;; dedicator-functions.
         (ecb-layout-switch "example-layout1")))

This function deactivates the GUI of our example-tool and restores the
state as before activation:

     (defun ecb-examples-deactivate ()
       "Deactivate the new layout \"example-layout1\".
     Stops `ecb-examples-bufferinfo-buffer-sync' and restore the state
     as before activation."
       (interactive)

       (assert (featurep 'ecb) nil
               "ECB must be loaded!")
       (assert ecb-minor-mode nil
               "ECB must be activated!")
       (assert (equal (selected-frame) ecb-frame) nil
               "The ECB-frame must be selected!")
       (assert (ecb-string= ecb-layout-name "example-layout1") nil
               "The example-layout1 is not active!")

       ;; we stop here the synchronization.
       (ecb-stop-autocontrol/sync-function 'ecb-examples-bufferinfo-buffer-sync)

       (ecb-examples-preactivation-state 'restore)

       (ecb-layout-switch ecb-layout-name))

Now we have all code for the new layout and the new layout-buffers.  The
example is ready for use; just load 'ecb-examples.el' (s.a.).

   ---------- Footnotes ----------

   (1) JDEE is available at <http://jdee.sunsite.dk/>

   (2) You can change the code in the file 'ecb-examples.el' to use a
frame-fraction of 0.2 instead of 6 hard lines, just try it!


File: ecb.info,  Node: Possible layout-outlines,  Next: The layout-engine API,  Prev: Programming special windows,  Up: The layout-engine

11.5.3 The wide range of possible layout-outlines
-------------------------------------------------

In the two previous sections *note Programming a new layout:: and *note
Programming special windows:: we have explained in detail how to program
new layouts and how to program new special windows/buffers and adding
them to a new layout.

The intention of this section is to be a summary what are the real
restrictions for a new layout-outline programmed with
'ecb-layout-define'.  This is necessary because until now we just
programmed "obvious" layouts, means layout which are in principle very
similar to the standard ones which means one big edit-window and some
special windows "around" this edit-window.  This section will show you
that a layout can have also very different outlines.

OK, here are the real restrictions and conditions for a layout
programmed with 'ecb-layout-define':
  1. It must have exactly one edit-window regardless of its size.  The
     user of this layout can later split this edit-window in as many
     edit-windows as he like.

  2. All other windows created within the CREATE-CODE body of
     'ecb-layout-define' (*note Programming a new layout::) must be
     dedicated to their buffers.

  3. All the dedicated windows must (exclusive!)  either reside on the
     left, right, top or left-and-right side of the edit-window.  This
     will be defined with the TYPE-argument of 'ecb-layout-define'
     (*note Programming a new layout::).

You see, there are only three restrictions/conditions.  These and only
these must be fulfilled at layout-programming.

Demonstrating what this really means and how flexible the layout-engine
of ECB really is, can be done best with some "pathological"
layout-outlines.  All the following are correct layouts (working code is
added below each layout):

The following is a top layout with three vertical layered special
windows.

     ------------------------------------------------------------------
     |                                                                |
     |                 Upper special window (a tree-buffer)           |
     |                                                                |
     |----------------------------------------------------------------|
     |                                                                |
     |                 Middle special window (no tree-buffer)         |
     |                                                                |
     |----------------------------------------------------------------|
     |                                                                |
     |                 Lower special window (a tree-buffer)           |
     |                                                                |
     |================================================================|
     |                                                                |
     |                         Edit-area                              |
     |      (can be splitted by the user in several edit-windows)     |
     ------------------------------------------------------------------
     |                                                                |
     |                 Compilation-window (optional)                  |
     |                                                                |
     ------------------------------------------------------------------

Here is the code for that top layout (all buffers are dummy-buffers):


     ;; The "window dedicator to buffer" functions:

     (defecb-window-dedicator-to-ecb-buffer ecb-set-usw-buffer
        upper-special-window-buffer-name t
       (switch-to-buffer (get-buffer-create "Upper special window")))

     (defecb-window-dedicator-to-ecb-buffer ecb-set-msw-buffer
        middle-special-window-buffer-name nil
       (switch-to-buffer (get-buffer-create "Middle special window")))

     (defecb-window-dedicator-to-ecb-buffer ecb-set-lsw-buffer
        lower-special-window-buffer-name t
       (switch-to-buffer (get-buffer-create "Lower special window")))

     ;; The layout itself:

     (ecb-layout-define "example-layout3" top
       nil

       ;; here we have an edit-window and above one top window which we can
       ;; now split in several other windows. Dependent on the value of
       ;; `ecb-compile-window-height' we have also a compile-window at the
       ;; bottom.

       (ecb-set-usw-buffer)
       (ecb-split-ver 0.33)
       (ecb-set-msw-buffer)
       (ecb-split-ver 0.5)
       (ecb-set-lsw-buffer)

       ;; select the edit-window.
       (select-window (next-window)))

The following is a left-right layout which has six special windows in
the left-"column" and one big special window in the right-"column".  For
left-right layouts the left-"column" and the right-"column" have always
the same width.

     ------------------------------------------------------------------
     |             |       |                   |                      |
     | Left1       | Left5 |                   |                      |
     |             |       |                   |                      |
     |-------------|       |                   |                      |
     |      |      |       |                   |                      |
     |      |      |       |                   |                      |
     |      |      |       |                   |                      |
     | Left2| Left3|-------|     Edit-area     |   Right1             |
     |      |      |       | (can be splitted  |                      |
     |      |      |       |  in several edit- |                      |
     |      |      |       |      windows)     |                      |
     |-------------|       |                   |                      |
     |             |       |                   |                      |
     | Left4       | Left6 |                   |                      |
     |             |       |                   |                      |
     ------------------------------------------------------------------
     |                                                                |
     |                 Compilation-window (optional)                  |
     |                                                                |
     ------------------------------------------------------------------

Here is the code for that left-right layout, again with dummy-buffers
(depending to your screen-resolution you will need a quite big value for
'ecb-windows-width', e.g.  0.4):

Here is one of the "window dedicator for buffer"-functions(1):

     (defvar buffer-name-left1 "left1")

     ;; Note that the third argument muts be not nil if the ecb-window should
     ;; display an ecb-buffer of type tree-buffer!
     (defecb-window-dedicator-to-ecb-buffer ecb-set-left1-buffer buffer-name-left1 nil
       (switch-to-buffer (get-buffer-create "Left1")))

Here is the layout-definition itself:

     (ecb-layout-define "example-layout2" left-right
       nil

       ;; here we have an edit-window and left and right two windows each
       ;; with width `ecb-windows-width'. Dependent to the value of
       ;; `ecb-compile-window-height' we have also a compile-window at the
       ;; bottom.

       (ecb-set-left1-buffer)
       (ecb-split-hor 0.66 t)
       (ecb-split-ver 0.75)
       (ecb-set-left4-buffer)
       (select-window (previous-window (selected-window) 0))
       (ecb-split-ver 0.25 nil t)
       (ecb-set-left2-buffer)
       (ecb-split-hor 0.5)
       (ecb-set-left3-buffer)
       (select-window (next-window (next-window)))
       (ecb-set-left5-buffer)
       (ecb-split-ver 0.5)
       (ecb-set-left6-buffer)
       (select-window (next-window (next-window)))
       (ecb-set-right1-buffer))

       ;; select the edit-window
       (select-window (previous-window (selected-window) 0)))

Especially the last example should demonstrate that even very
complicated layouts are easy to program with 'ecb-layout-define'.  If
such layouts are senseful is another topic ;-)

   ---------- Footnotes ----------

   (1) The "window dedicators" for all these ecb-windows/buffers are not
explicitly described - they look all like 'ecb-set-left1-buffer' - of
course with different buffer-names!


File: ecb.info,  Node: The layout-engine API,  Prev: Possible layout-outlines,  Up: The layout-engine

11.5.4 The complete layout-engine API of ECB
--------------------------------------------

This section lists all functions, macros, variables and user-options the
layout-engine API of ECB offers foreign packages.  Call
'describe-function' rsp.  'describe-variable' to get a detailed
description.

Functions and macros for programming with layouts and special
ecb-windows:
   - 'defecb-window-dedicator-to-ecb-buffer'
   - 'ecb-available-layouts-member-p'
   - 'ecb-canonical-ecb-windows-list'
   - 'ecb-canonical-edit-windows-list'
   - 'ecb-compile-window-live-p'
   - 'ecb-compile-window-state'
   - 'ecb-do-if-buffer-visible-in-ecb-frame'
   - 'ecb-exec-in-window'
   - 'ecb-get-current-visible-ecb-buffers'
   - 'ecb-layout-define'
   - 'ecb-layout-switch'
   - 'ecb-layout-undefine'
   - 'ecb-point-in-compile-window'
   - 'ecb-point-in-ecb-window-number'
   - 'ecb-point-in-edit-window-number'
   - 'ecb-select-edit-window'
   - 'ecb-split-hor'
   - 'ecb-split-ver'
   - 'ecb-where-is-point'
   - 'ecb-with-dedicated-window'(1)

Utility functions/macros:
   - 'ecb-display-one-ecb-buffer'
   - 'ecb-enlarge-window'
   - 'ecb-fix-filename'
   - 'ecb-goto-ecb-window'
   - 'ecb-window-live-p'
   - 'ecb-with-readonly-buffer'

Some other maybe useful functions/macros:
   - 'ecb-with-adviced-functions'
   - 'ecb-with-original-functions'
   - 'ecb-with-some-adviced-functions'

Some useful *READONLY* variables:
   - 'ecb-compile-window'
   - 'ecb-last-edit-window-with-point'
   - 'ecb-last-source-buffer'

*Caution*: DO NOT USE THE VARIABLE 'ecb-edit-window' IN YOUR PROGRAMS!

User-options and hooks related to the layout-engine API:
   - 'ecb-basic-buffer-sync-hook'
   - 'ecb-hide-ecb-windows-after-hook'
   - 'ecb-hide-ecb-windows-before-hook'
   - 'ecb-redraw-layout-after-hook'
   - 'ecb-redraw-layout-before-hook'
   - 'ecb-show-ecb-windows-after-hook'
   - 'ecb-show-ecb-windows-before-hook'
   - 'ecb-windows-height'
   - 'ecb-windows-width'
   - 'ecb-compile-window-height'

   ---------- Footnotes ----------

   (1) Normally not needed because
'defecb-window-dedicator-to-ecb-buffer' does all necessary.


File: ecb.info,  Node: Conflicts and bugs,  Next: FAQ,  Prev: Elisp programming,  Up: Top

12 Conflicts and bugs of ECB
****************************

This chapter describes what to do when there are conflicts with other
packages and also the known (and currently unfixed) bugs of ECB. If
possible (and in most cases it is possible ;-) then a practicable
solution or workaround is described.

* Menu:

* Conflicts::                   Conflicts with other packages
* Bugs::                        Known bugs


File: ecb.info,  Node: Conflicts,  Next: Bugs,  Prev: Conflicts and bugs,  Up: Conflicts and bugs

12.1 Conflicts with other packages
==================================

This chapter contains a list of already known conflict between ECB and
other packages and how to solve them - in most cases ECB already
contains a suitable workaround.

That is followed by a general recipe what you can do when you have
detected a conflict between ECB and a package is not listed in the
know-conflicts-section.

12.1.1 Proved workarounds or recommendations for other packages
---------------------------------------------------------------

Here is a list of packages which are proved to work properly with ECB
and if not (i.e.  there are conflicts) then helpful
solutions/hints/workarounds are offered:

12.1.1.1 Package bs.el
......................

The package bs.el offers a nifty buffer-selection buffer.  The main
command of this package is 'bs-show'.  With ECB < 2.20 this command does
not really working well within activated ECB. But as of version 2.20 of
ECB there should be no problems using this package.

If you add "*buffer-selection*" as buffer-name to the option
'ecb-compilation-buffer-names' then ECB will always display the
buffer-selection buffer of bs in the compile-window (if there is one).
Otherwise bs will use the edit-area to do its job.

12.1.1.2 Package BBDB
.....................

As of ECB 2.21 there should be no conflicts between BBDB and ECB, so
BBDB can be used even when the ECB-windows are visible.

But if you encounter problems then it is recommened to use one of the
window-managers escreen.el or winring.el (*note Window-managers and
ECB::).  With such a window-manager ECB and BBDB should work together
very well under all circumstances!

12.1.1.3 Package calendar.el
............................

With activated ECB 'calendar' does not shrink itﾴs window to the small
size but splits the window equally.  But if you add this to your
'.emacs' it works:

     (add-hook 'initial-calendar-window-hook
               (function (lambda ()
                           (when (and ecb-minor-mode
                                      (ecb-point-in-edit-window))
                             ;; if no horizontal split then nothing
                             ;; special to do
                             (or (= (frame-width) (window-width))
                                 (shrink-window (- (window-height) 9))))
                          )))

12.1.1.4 Package cygwin-mount.el
................................

There can be a conflict between ECB and cygwin-mount.el if the following
conditions are true:

   - You are working with cygwin-mount.el (sounds clear :-)
   - You have set 'cygwin-mount-build-mount-table-asynch' to not nil
   - ECB is automatically started after starting Emacs (e.g.  with
     'ecb-auto-activate' or calling 'ecb-activate' in
     'window-setup-hook')
   - Your Emacs-setup contains a call of 'cygwin-mount-activate'.

Under these circumstances Emacs 21.X sometimes eats up the whole CPU (at
least with Windows XP) and the cygwin-mount-table is never build.

But there is an easy work-around: Call 'cygwin-mount-activate' first
*AFTER* ECB is activated.  This can be done with the hook
'ecb-activate-hook':

     (add-hook 'ecb-activate-hook
               (function (lambda ()
                           (require 'cygwin-mount)
                           (setq cygwin-mount-build-mount-table-asynch t)
                           (cygwin-mount-activate))))


12.1.1.5 Package desktop.el
...........................

ECB works perfectly with the desktop-saver desktop.el.  Normally there
should be nothing to do for you.

But if you encounter problems (e.g.  that desktop tries to activate ECB
for each buffer it loads) then you should add the following entry to the
option 'desktop-minor-mode-table':

     (ecb-minor-mode nil)

If you still encounter problems then you should add entries for all the
minor-mode of the semantic-package to 'desktop-minor-mode-table', so for
example add also:

     (semantic-decoration-mode nil)
     (semantic-idle-completions-mode nil)
     (semantic-idle-tag-highlight-mode nil)
     (semantic-idle-summary-mode nil)
     (semantic-idle-scheduler-mode nil)
     (senator-isearch-semantic-mode nil)
     (senator-minor-mode nil)
     (semantic-highlight-func-mode nil)
     (semantic-stickyfunc-mode nil)
     (semantic-show-parser-state-mode nil)
     (semantic-show-unmatched-syntax-mode nil
     (semantic-highlight-edits-mode nil

Normally this should not be necessary, because semantic is already
prepared to work perfectly with desktop.el.  But if there are problems
it's worth a try.  Which modes you have to add depends on which modes of
semantic you use.  But to get sure you should add all minor-modes of the
semantic-package because these modes are normally activated by the
related "global" command (e.g.
'global-semantic-show-unmatched-syntax-mode') or by adding the
minor-mode to the related major-mode-hook.

It has also been reported that just disabling the Tip-Of-The-Day
(option: 'ecb-tip-of-the-day') fixes the compatibility-problems with
desktop.el.  Just try it out!

12.1.1.6 Package edebug (Lisp Debugger)
.......................................

It is strongly recommended to run edebug only when the ECB-windows are
hidden.  With visible ECB-windows there will probably serious conflicts
between the ECB-layout and the edebug-window-manager.

12.1.1.7 Package ediff.el
.........................

In most cases ECB works very well with ediff (see option
'ecb-run-ediff-in-ecb-frame').  But currently suspending ediff with
'ediff-suspend' and restoring the ediff-session (e.g.  with command
'eregistry') does confuse the window-management of ECB.

If you often use ediff in a scenario where you suspend ediff and
reactivate it later then it is recommended to exit ECB first
('ecb-deactivate' or 'ecb-minor-mode')!

12.1.1.8 Package func-menu.el
.............................

This package has been reported to produce some conflicts under some
circumstances when ECB is activated.  Some of them could be reproduced
by the ECB-maintainer.  So the recommendation is to disable
func-menu-support when using ECB. Normally using func-menu makes no
sense in combination with ECB because ECB provides the same and even
more informations as func-menu - so func-menu is redundant ;-)

12.1.1.9 Package Gnus (Newsreader)
..................................

As of ECB 2.21 there should be no conflicts between Gnus and ECB, so
Gnus can be used even when the ECB-windows are visible.

But if you encounter problems then it is recommened to use one of the
window-managers escreen.el or winring.el (*note Window-managers and
ECB::).  With such a window-manager ECB and Gnus should work together
very well under all circumstances!

12.1.1.10 Package JDEE (Java Development Environment)
.....................................................

JDEE has a lot of "dialogs" where the user can select among several
choices.  An example is importing classes via the command
'jde-import-find-and-import'.  These dialogs are strongly designed to
work in an environment where a new temporary window is created, the
contents of the dialog are displayed in the new window, the user select
his choice and hits [OK]. After that the new window is deleted and the
selection is performed (for example the chosen import statement are
inserted in the source-buffer.

*Caution*: ECB can work very well with this dialogs but only if the
buffer-name of these dialog-buffers (normally "Dialog") is not contained
in the option 'ecb-compilation-buffer-names'.  So do not add the string
"Dialog" to this option!

*Please Note*: Regardless if a persistent compile-window is used (i.e.
'ecb-compile-window-height' is not nil) or not, these JDEE-dialogs will
always being displayed by splitting the edit-window of ECB and not
within the compile-window.

12.1.1.11 Package scroll-all.el (scroll-all-mode)
.................................................

ECB advices 'scroll-all-mode' so it is working correct during running
ECB. This means if point stays in an edit-window and the edit-window is
splitted then all edit-windows are scrolled by 'scroll-all-mode' and no
other window!  If point stays in any other window just this selected
window is scrolled.  This is the only senseful behavior of
'scroll-all-mode' with ECB.

12.1.1.12 Package VC (Version Control)
......................................

The variable 'vc-delete-logbuf-window' must be set to nil during active
ECB. This can be done with the hooks mentioned in *note Elisp
programming::.

12.1.1.13 Package VM (Emacs Mail-Client)
........................................

As of ECB 2.21 there should be no conflicts between VM and ECB, so VM
can be used even when the ECB-windows are visible.

But if you encounter problems then it is recommened to use one of the
window-managers escreen.el or winring.el (*note Window-managers and
ECB::).  With such a window-manager ECB and VM should work together very
well under all circumstances!

12.1.1.14 Package winner.el (winner-mode)
.........................................

'winner-mode' is autom.  disabled as long as ECB is running.  ECB has
its own window-management which is completely incompatible with
'winner-mode'!  But 'winner-mode' makes also not really sense with ECB.

12.1.1.15 Package wb-line-number.el
...................................

Do not use the package wb-line-number.el in combination with ECB - it
will not work and it will not work under any circumstances and there is
no way to make it work together and there will be no way in the future!

The reason behind that is: wb-line-number.el uses additional dedicated
windows to display the line-numbers.  And ECB can not work if there
there are additional dedicated windows - additional to that ones created
by ECB.

12.1.1.16 Application xrefactory
................................

Xrefactory (also known as Xref, X-ref and Xref-Speller), the refactoring
browser for (X)Emacs(1), can be used during running ECB regardless if
the ECB-windows are visible or not.  There should be no conflicts as of
ECB versions >= 2.21.

If there are conflicts with the Xref-browser then the most recommended
way is to use one of the window-manager escreen.el or winring.el (and
then use different escreens or window-configurations for ECB and
Xrefactory-browsing - *note Window-managers and ECB::).

12.1.2 What to do for unknown conflicts with other packages
-----------------------------------------------------------

As of version 2.20 the layout-engine of ECB is so flexible that normally
there should be no conflicts with other packages unless these packages
have their own complete window-layout-management (e.g.  Gnus, BBDB,
Xrefactory).  But these packages can and should be handled very well
with the window-manager-support of ECB (*note Window-managers and
ECB::).

So if you detect an unknown (i.e.  not listed in the conflicts-list in
the next subsection) conflict with a small package and some of its
commands and you have installed an ECB-version < 2.20 the first task you
have to do is to upgrade to a version >= 2.20!

If this doesn't solve the problem a very probable reason for the
conflict is that the command fails if called from another window than an
edit-window of the ecb-frame.  So please check if the problem disappears
if you call the failing command from an edit-window of ECB. If this is
true then you you can add the following code to your .emacs (and of
course replace the XXX with the failing command):

     (defecb-advice XXX before ecb-compatibility-advices
       "Ensures `XXX' works well when called from another window
     as an edit-window. Does nothing if called in another frame
     as the `ecb-frame'."
       (when (equal (selected-frame) ecb-frame)
         (unless (ecb-point-in-edit-window)
           (ecb-select-edit-window))))

This before-advice runs before the command XXX and ensures that the XXX
is called from within an edit-window if the current selected window is
not an edit-window.  It does nothing if called for another frame as the
ecb-frame.

*Please note*: You have to define such compatibility advices exactly as
demonstrated in the example above, i.e.  you must use the macro
'defecb-advice' and you have to use the advice-set
'ecb-compatibility-advices' (see the documentation of this macro)!  The
advice-class is not necessary 'before', it can be 'after' or 'around'
too.  Never use 'defadvice' for ECB-advices!

If such an advice solves the problem then please send a note with the
solution to the ECB-mailing-list or direct to the ECB-maintainer so the
solution can be integrated in the next ECB-release

If calling from an edit-window fails too then please file a complete
bug-report to the ECB-mailing-list (*note Submitting problem report::).
This report should contain a detailed description which command of which
package fails under which circumstances!

   ---------- Footnotes ----------

   (1) Xrefactory is available at <http://www.xref-tech.com>


File: ecb.info,  Node: Bugs,  Prev: Conflicts,  Up: Conflicts and bugs

12.2 Known bugs
===============

This section describes all currently known bugs of ECB. The maintainers
of ECB try to fix these bugs as soon as possible.

12.2.1 Extra history-entries for JDEE source-buffers
----------------------------------------------------

ECB on occasions creates an extra edit buffer for entries in the history
window.  For example, let say there are three entries in the history
window:

     Test1
     Test2
     Test3

In the edit window Test1 file is edited.  When clicked on Test2 entry in
history, on occasion instead of switching to the existing buffer for
Test2, a new edit buffer is opened for Test2 file.  At this point, there
are four entries in the history as follows:

     Test2
     Test2<2>
     Test1
     Test3


File: ecb.info,  Node: FAQ,  Next: Command Index,  Prev: Conflicts and bugs,  Up: Top

13 Frequently asked questions
*****************************

This is the Emacs Code Browser FAQ.

QUESTION                        ANSWER
                                
                                
What is the first step i        Read carefully the related sections of
should do if i have             the online-help of ECB.
problems with ECB?              
                                
What should i do, if a have     Send a problem-report to the
a problem which can not be      ECB-mailing-list with the command
solved even after reading       'ecb-submit-problem-report'.
the online-help?                See *note Submitting problem report::.
                                
                                
What should i do, if            Take a look into *note Conflicts::.  If
another package seems not       your package is not listed there then
to work correct with ECB?       submit a problem-report.
                                
                                
Can ECB parse and display       Yes, in all version >= 1.94.  ECB can
source-contents not             now parse and display all
supported by semantic?          source-contents supported by semantic,
                                imenu or etags - same as speedbar.  See
                                *note Non-semantic sources::.
                                
                                
Why are the lines in the        Check the variable
ECB-, temp- and                 'truncate-partial-width-windows' and set
compilation-buffers not         it to nil.
wrapped but truncated?          
                                
Why doesn't ECB work            The variable 'vc-delete-logbuf-window'
correct with VC?                must be set to nil during active ECB.
                                This can be done with the hooks of ECB.
                                
                                
Does ECB support C++ as         In general C++ is supported very well.
well as Java?                   But it depends on the used
                                cedet-version, but cedet-version >=
                                1.0pre6 support C++ really well.
                                
                                
Does ECB support Perl?          If perl can be parsed either by imenu,
                                etags or semantic then ECB supports
                                perl.  Of course ECB would support perl
                                best if perl is supported by semantic.
                                
                                
Does ECB support language       See question "Does ECB support Perl?"
XYZ?                            and replace "Perl" with "XYZ" in the
                                answer.
                                
                                
How to add new languages to     Add the language XYZ to semantic
ECB?                            (perform all necessary steps described
                                in the semantic-manual) and ECB will
                                automatically support language XYZ!
                                There is nothing to do in ECB itself!
                                Same when you write an imenu- or
                                etags-support for language XYZ.
                                
                                
Why does ECB not recognize      Your C++-files have probably an
my source-files for C++?        extension which is not mapped to
                                c++-mode in 'auto-mode-alist' and/or
                                your own Emacs-setup has "destroyed" the
                                correct value of the hook-variable
                                'c++-mode-hook'.
                                See *note Setting up Emacs::.
                                
                                
Is it possible to make the      You can use the library "desktop.el"
history of ECB persistent?      which works very well with ECB. Then all
                                files of your recent Emacs-session will
                                be opened automatically after next
                                Emacs-start and will be added
                                automatically to the ECB-history after
                                ECB-start.
                                
                                
Is there an                     For Java the JDEE(1) has this feature
"Intellisense"-mechanism        and for all other languages semantic
like with other IDEs?           offer something similar, see
                                <http://cedet.sourceforge.net/intellisense.shtml>
                                
                                
Can i use ECB in                You can, but for ECB-versions < 1.96 it
combination with Gnus           is not recommended because each of them
within one frame?               has it's own window-management and
                                probably there will be conflicts, so use
                                different frames for ECB and Gnus!  But
                                beginning with ECB 1.96 you can use
                                either escreen.el or winring.el as
                                "window-manager" which allows you in
                                consequence to use ECB and applications
                                like Gnus in one frame!
                                *Note Window-managers and ECB::.
                                
                                
Can i speed up displaying       Yes, see the option
the contents of big-size        'ecb-cache-directory-contents'.  Read
directories?                    the section
                                *note Large directories::.
                                
                                
Is it possible to               Yes. *note Creating a new ECB-layout::
create/use other layouts        and
than the built-in ones?         *note The layout-engine:: are the
                                relevant sections.  The former one
                                describes how to create interactively
                                new layouts where the latter one is for
                                Elisp-programmers.
                                
                                
Can i use speedbar as           Yes, see *note Integrating speedbar::.
directory-browser within        
ECB?
                                
Can i exclude                   Yes, see *note Grepping directories::.
subdirectories from the         
recursive grep in the
directories buffer?
                                
How can i prevent               Set 'semanticdb-default-save-directory'
contaminating each              to a directory.
directory with a file           
'semantic-cache'?
                                
Why ECB displays large          This comes from semantic;
portions of current             see *note Setting up Emacs::.
source-file with dark           
background?
                                
Why ECB underlines some         This comes from semantic;
parts of current                see *note Setting up Emacs::.
source-file?                    
                                
Can i add my own commands       Yes, see *note Using the mouse::.
to the popup-menus of           
tree-buffers?
                                
Can ECB display the             Yes, see *note Common use-cases::.
compile-window "on demand"?     
                                
Which buffers are treated       See the docstring of the function
as compilation-buffers by       'ecb-compilation-buffer-p'.
ECB?                            
                                
How can i change the            You can change it with the options
modeline of an                  'ecb-mode-line-prefixes',
ECB-tree-buffer?                'ecb-mode-line-data' and
                                'ecb-mode-line-display-window-number'.
                                
                                
Can the tree-buffers being      Yes, see option
selected faster than with       'ecb-mode-line-display-window-number'.
the standard-keybindings of     
ECB?
                                
Can ECB display the             Yes, see option
window-number in the            'ecb-mode-line-display-window-number'.
modeline of the special         
windows?
                                
How can i change the            You can do this with option
keybindings of ECB?             'ecb-key-map' (*note ecb-general::).
                                
                                
What can i do if                Either the current 'major-modes' is not
hiding/showing from the         supported by hideshow or you have to add
methods-buffer does not         an entry to 'hs-special-modes-alist'
work?                           (*note Hide-show::).
                                
                                
Can i maximize one of the       Yes, see
ECB-windows for better          *note Maximizing the ECB windows::.
overlook?                       
                                
Can i hide the ECB-windows      Yes, see *note Hiding the ECB windows::.
for getting more                
editing-space?
                                
Can i define the actions        Yes, see *note Visiting tags::.
ECB performs after visiting     
a tag?
                                
Buffers are not displayed       See
correctly in the                *note Problems with the compile window::.
compile-window?                 
                                
Can ECB work together with      Yes, see
window-managers like            *note Window-managers and ECB::.
escreen.el?                     
                                
Can i remove these "ugly"       Yes, see option 'ecb-tree-buffer-style'.
vertical lines from a           
tree-buffer?
                                
ECB does not display images     Customize 'ecb-tree-buffer-style' and
in the tree-buffers - what      restart ECB. But note: GNU Emacs <=
can i do?                       21.3.X for Windows does not support
                                image-display so ECB uses always
                                ascii-guide-lines even when here the
                                image-style is set in
                                'ecb-tree-buffer-style'.
                                
                                
Do                              Yes, see
'special-display-function'      *note Using special-display with ECB::.
et.  al.  work with ECB.        
                                
Can i activate the              Yes, see *note Using popup-menus::.
popup-menu of a tree-buffer     
from keyboard?
                                
Can i display the               Yes, see *note Using popup-menus::.
popup-menu of a tree-buffer     
with tmm?
                                
Does ECB disable all            "Nes"(2), see remarks in the
advices after deactivation?     documentation of the option
                                'ecb-split-edit-window-after-start'.
                                
                                
Can ECB preserve the full       Yes, see the option
state of ECB between            'ecb-split-edit-window-after-start'.
deactivation and next           
activation?
                                
Can i change the behavior       Yes, see *note The other window::.
how ECB chooses another         
window for selecting it or
scrolling it.
                                
Can i increase the allowed      Yes, see the docstring of the option
depth of nested submenus.       'ecb-directories-menu-user-extension'.
                                
                                
Can i apply some filters to     Yes, see
the Tree-buffers.               *note Filtering the tree-buffers::
                                
                                
With XEmacs i get sometimes     Disable the func-menu support in your
an error "Wrong number of       XEmacs-setup.  See *note Conflicts::.
arguments: widen (1)".          
What can i do?
                                
Can i use desktop.el in         Yes, see *note Conflicts::.
combination with ECB?           
                                
Opening directories takes a     Read *note Large directories::.
long time - what can i do?      
                                
ECB seems to be blocked         ECB performs some stealthy tasks when
sometimes - what is the         idle - this can cause sometimes a
reason?                         blocked Emacs but this tasks will be
                                immetiatelly interrupted by any
                                user-event so there should be normally
                                no problems.  But especially for mounted
                                net-drives some of the stealthy tasks
                                can take time up to some seconds for
                                each file - and during one
                                file-operation it can not be
                                interrupted.  See also
                                'ecb-stealthy-tasks-delay'.
                                
                                
Can i exclude certain           Yes, see option
directories from being          'ecb-prescan-directories-exclude-regexps'.
checked for emptyness?          
                                
Can i exclude certain           Yes, see option
directories from checking       'ecb-vc-directory-exclude-regexps'.
the VC-state of the             
contained sources?
                                
Can i exclude certain           Yes, see option
directories from checking       'ecb-read-only-check-exclude-regexps'.
the read-only-state of the      
contained sources?
                                
ECB ignores the                 Maybe you have to check the option
remote-paths i have added       'ecb-ping-options'.  Ensure that this
to 'ecb-source-path'.           option contains a value suitable for
                                your ping-program (see
                                'ecb-ping-program').
                                See also *note Remote directories::.
                                
                                
ECB seems to be blocked a       Maybe you use cygwin-XEmacs.  Then
long time.                      either the empty-dir-check (see option
                                'ecb-prescan-directories-for-emptyness')
                                or the VC-support (see
                                'ecb-vc-enable-support') can block ECB.
                                For the latter one see
                                *note Known VC-problems::.
                                
                                
ECB seems to be blocked         Maybe the root repository for the
during the VC-state update      current directory is a
in the tree-windows.            remote-repository.  This can result in a
                                long lasting check-time per file.
                                See also *note Version-control support::
                                for hints what you can do.
                                
                                
I have encountered some         See also *note Version-control support::
problems with the display       for hints what you can do.
of the VC-state in the          
tree-buffers.
                                
The state of the files          The option 'ecb-vc-supported-backends'
under version control seems     offers now also a accurate
to be not accurate.  What       recompute-state function.  This is by
is the reason and what can      offering 'ecb-vc-recompute-state' as an
i do?                           alias to the function
                                'vc-recompute-state' as state-check
                                function for this option.  See also
                                *note Version-control support::
                                
                                
With Emacs 23 ECB shows a       Check the values of the options
odd split-behavior when         'split-width-threshold' and
calling help or displaying      'split-height-threshold'.  ECBs
completion-output or            split-behavior depends fully on the
compilation- or                 Emacs-logic and that one depends mainly
grep-output.  What is the       on these two options.  So adjust them to
reason.                         match (at least nearly) the sizes of the
                                edit-area of ECB.
                                
                                
When using a layout with        This comes from the idle-mechanism
the special ecb-window for      ECB/semantic uses to offer some
the semantic analyzer then      intellisense like displaying possible
Emacs seems to be blocked       completions and local variables
when typing pauses.  What       depending on current context (ie.
is the reason and what can      location of point).  So if point stays
i do?                           on a location within your code where
                                hundreds (or even thousands) of
                                completions are possible then parsing
                                and displaying them can last annoying
                                time.  But in general a keypress
                                interupts.  If not then you have to
                                possibilities offered by the options
                                'ecb-analyse-buffer-sync' and
                                'ecb-analyse-buffer-sync-delay': You can
                                increase the delay of the latter one so
                                parsing current context starts later
                                after Emacs goes idle (ie.  after you
                                pause typing).  Or you can disable the
                                automatic synchronizing the
                                analyser-window with the former one -
                                see the docstring.  Then you have to
                                synchronize (ie.  start parsing context)
                                on demand via the command
                                'ecb-analyse-buffer-sync'(3).
                                
                                
How can i change the            Either via popup context-menu (right
bucketizing method of the       mouse-button) or with the option
history-window?                 'ecb-history-make-buckets'.
                                
                                
How can i disable this grey     See the option
headerline in the               'ecb-tree-make-parent-node-sticky'.
tree-buffers?                   
                                
When clicking onto a            ECB uses completely the smartness of the
parent-node in the              semanticdb and the semantic-analyzer.
methods-window then ECB         So if you have customized semantic
doesn't jump to the             accordingly to the needs of your project
definition of this              (ie.  mainly setting up all so semantic
parent-type.                    can find files in your
                                directory-structure) then ECB will find
                                the parent-definition and also jump to
                                it.  See *note ECB Methods-window:: and
                                the subsection "Jumping to the
                                definition of external tags" and see the
                                option
                                'ecb-find-external-tag-functions'.
                                

   ---------- Footnotes ----------

   (1) <http://jdee.sunsite.dk/>

   (2) Nes is a combination of No and Yes :-)

   (3) Yes, both the option and the command have the same name


File: ecb.info,  Node: Command Index,  Next: Option Index,  Prev: FAQ,  Up: Top

Command Index
*************

This index contains all user commands of ECB.

*Please note*: The commands in this index are listed without the prefix
"ecb-" (e.g.  the command 'ecb-activate' is listed with name
"activate").

 [index ]
* Menu:

* activate:                              Interactive ECB commands.
                                                              (line  23)
* add-all-buffers-to-history:            Interactive ECB commands.
                                                              (line  29)
* analyse-buffer-sync:                   Interactive ECB commands.
                                                              (line  39)
* balance-windows:                       The edit-area.       (line 257)
* change-layout:                         Interactive ECB commands.
                                                              (line  43)
* clear-history:                         Interactive ECB commands.
                                                              (line  52)
* create-new-layout:                     Interactive ECB commands.
                                                              (line  61)
* customize:                             Interactive ECB commands.
                                                              (line  55)
* customize-most-important:              Interactive ECB commands.
                                                              (line  58)
* cycle-maximized-ecb-buffers:           Interactive ECB commands.
                                                              (line  65)
* cycle-through-compilation-buffers:     Interactive ECB commands.
                                                              (line  69)
* deactivate:                            Interactive ECB commands.
                                                              (line  80)
* delete-new-layout:                     Interactive ECB commands.
                                                              (line  83)
* delete-other-windows:                  The edit-area.       (line  91)
* delete-window:                         The edit-area.       (line  62)
* delete-windows-on:                     The edit-area.       (line 131)
* display-buffer:                        The edit-area.       (line 168)
* display-news-for-upgrade:              Interactive ECB commands.
                                                              (line  89)
* display-upgraded-options:              Interactive ECB commands.
                                                              (line  97)
* dump-semantic-toplevel:                Interactive ECB commands.
                                                              (line 153)
* eshell-current-buffer-sync:            Interactive ECB commands.
                                                              (line 156)
* eshell-recenter:                       Interactive ECB commands.
                                                              (line 162)
* expand-directory-nodes:                Interactive ECB commands.
                                                              (line 165)
* expand-methods-nodes:                  Interactive ECB commands.
                                                              (line 117)
* goto-window-analyse:                   Interactive ECB commands.
                                                              (line 173)
* goto-window-compilation:               Interactive ECB commands.
                                                              (line 176)
* goto-window-directories:               Interactive ECB commands.
                                                              (line 179)
* goto-window-ecb-by-smart-selection:    Interactive ECB commands.
                                                              (line 184)
* goto-window-edit-by-smart-selection:   Interactive ECB commands.
                                                              (line 208)
* goto-window-edit-last:                 Interactive ECB commands.
                                                              (line 238)
* goto-window-edit1:                     Interactive ECB commands.
                                                              (line 231)
* goto-window-edit2:                     Interactive ECB commands.
                                                              (line 234)
* goto-window-history:                   Interactive ECB commands.
                                                              (line 243)
* goto-window-methods:                   Interactive ECB commands.
                                                              (line 246)
* goto-window-sources:                   Interactive ECB commands.
                                                              (line 251)
* history-filter:                        Interactive ECB commands.
                                                              (line 256)
* jde-display-class-at-point:            Interactive ECB commands.
                                                              (line 270)
* layout-define:                         Programming a new layout.
                                                              (line  24)
* layout-undefine:                       Programming a new layout.
                                                              (line 128)
* maximize-window-analyse:               Interactive ECB commands.
                                                              (line 283)
* maximize-window-directories:           Interactive ECB commands.
                                                              (line 289)
* maximize-window-history:               Interactive ECB commands.
                                                              (line 307)
* maximize-window-methods:               Interactive ECB commands.
                                                              (line 301)
* maximize-window-sources:               Interactive ECB commands.
                                                              (line 295)
* maximize-window-speedbar:              Interactive ECB commands.
                                                              (line 313)
* methods-filter:                        Interactive ECB commands.
                                                              (line 319)
* methods-filter-current-type:           Interactive ECB commands.
                                                              (line 393)
* methods-filter-delete-last:            Interactive ECB commands.
                                                              (line 397)
* methods-filter-function:               Interactive ECB commands.
                                                              (line 401)
* methods-filter-nofilter:               Interactive ECB commands.
                                                              (line 406)
* methods-filter-protection:             Interactive ECB commands.
                                                              (line 410)
* methods-filter-regexp:                 Interactive ECB commands.
                                                              (line 415)
* methods-filter-tagclass:               Interactive ECB commands.
                                                              (line 420)
* minor-mode:                            Interactive ECB commands.
                                                              (line 425)
* nav-goto-next:                         Interactive ECB commands.
                                                              (line 434)
* nav-goto-previous:                     Interactive ECB commands.
                                                              (line 430)
* other-window:                          The edit-area.       (line  56)
* other-window-for-scrolling:            The edit-area.       (line 243)
* rebuild-methods-buffer:                Interactive ECB commands.
                                                              (line 438)
* redraw-layout:                         Interactive ECB commands.
                                                              (line 470)
* restore-default-window-sizes:          Interactive ECB commands.
                                                              (line 510)
* restore-window-sizes:                  Interactive ECB commands.
                                                              (line 513)
* select-ecb-frame:                      Interactive ECB commands.
                                                              (line 518)
* show-help:                             Interactive ECB commands.
                                                              (line 522)
* show-layout-help:                      Interactive ECB commands.
                                                              (line 534)
* show-tip-of-the-day:                   Interactive ECB commands.
                                                              (line 540)
* sources-filter:                        Interactive ECB commands.
                                                              (line 544)
* split-window:                          The edit-area.       (line 139)
* split-window-horizontally:             The edit-area.       (line 150)
* split-window-vertically:               The edit-area.       (line 159)
* store-window-sizes:                    Interactive ECB commands.
                                                              (line 563)
* submit-problem-report:                 Interactive ECB commands.
                                                              (line 583)
* switch-to-buffer:                      The edit-area.       (line 196)
* switch-to-buffer-other-window:         The edit-area.       (line 215)
* toggle-auto-expand-tag-tree:           Interactive ECB commands.
                                                              (line 592)
* toggle-compile-window:                 Interactive ECB commands.
                                                              (line 599)
* toggle-compile-window-height:          Interactive ECB commands.
                                                              (line 610)
* toggle-ecb-windows:                    Interactive ECB commands.
                                                              (line 618)
* toggle-layout:                         Interactive ECB commands.
                                                              (line 624)
* toggle-scroll-other-window-scrolls-compile: Interactive ECB commands.
                                                              (line 638)
* update-directories-buffer:             Interactive ECB commands.
                                                              (line 645)
* upgrade-options:                       Interactive ECB commands.
                                                              (line 648)
* window-sync:                           Interactive ECB commands.
                                                              (line 655)


File: ecb.info,  Node: Option Index,  Next: Concept Index,  Prev: Command Index,  Up: Top

Option Index
************

This index contains all customizable options of ECB.

*Please note*: All options in this index are listed without the prefix
"ecb-" (e.g.  the option 'ecb-layout-name' is listed with name
"layout-name").

 [index ]
* Menu:

* activate-before-layout-draw-hook:      ecb-general.         (line   8)
* activate-before-new-frame-created-hook: ecb-layout.         (line   8)
* activate-hook:                         ecb-general.         (line  35)
* activation-selects-ecb-frame-if-already-active: ecb-general.
                                                              (line  42)
* add-path-for-not-matching-files:       ecb-directories.     (line   8)
* advice-window-functions-signal-error:  ecb-layout.          (line  13)
* after-directory-change-hook:           ecb-directories.     (line  43)
* analyse-bucket-element-face:           ecb-analyse.         (line   6)
* analyse-bucket-node-face:              ecb-analyse.         (line  14)
* analyse-buffer-after-create-hook:      ecb-analyse.         (line  21)
* analyse-buffer-name:                   ecb-analyse.         (line  29)
* analyse-buffer-sync:                   ecb-analyse.         (line  41)
* analyse-buffer-sync-delay:             ecb-analyse.         (line  60)
* analyse-buffer-sync-hook:              ecb-analyse.         (line  75)
* analyse-collapsed-buckets:             ecb-analyse.         (line 103)
* analyse-face:                          ecb-analyse.         (line 143)
* analyse-fontified-buckets:             ecb-analyse.         (line 151)
* analyse-gen-tag-info-fn:               ecb-analyse.         (line 169)
* analyse-general-face:                  ecb-analyse.         (line 180)
* analyse-show-node-info:                ecb-analyse.         (line 189)
* analyse-show-tag-info-fn:              ecb-analyse.         (line 204)
* auto-activate:                         ecb-general.         (line  48)
* auto-compatibility-check:              ecb-general.         (line  52)
* auto-expand-directory-tree:            ecb-directories.     (line  35)
* auto-expand-tag-tree:                  ecb-methods.         (line   8)
* auto-expand-tag-tree-collapse-other:   ecb-methods.         (line  26)
* auto-save-before-etags-methods-rebuild: ecb-non-semantic.   (line   9)
* auto-update-methods-after-save:        ecb-methods.         (line  43)
* basic-buffer-sync:                     ecb-tree-buffer.     (line   8)
* basic-buffer-sync-delay:               ecb-tree-buffer.     (line  37)
* basic-buffer-sync-hook:                ecb-tree-buffer.     (line  45)
* before-activate-hook:                  ecb-general.         (line  67)
* before-deactivate-hook:                ecb-general.         (line  79)
* bucket-node-display:                   ecb-general.         (line  86)
* bucket-node-display <1>:               ecb-tree-buffer.     (line  70)
* cache-directory-contents:              ecb-directories.     (line  65)
* cache-directory-contents-not:          ecb-directories.     (line 118)
* change-layout-preserves-compwin-state: ecb-compilation.     (line 165)
* clear-caches-before-activate:          ecb-general.         (line 105)
* common-tree-buffer-after-create-hook:  ecb-tree-buffer.     (line  89)
* compilation-buffer-names:              ecb-compilation.     (line   8)
* compilation-major-modes:               ecb-compilation.     (line  23)
* compilation-predicates:                ecb-compilation.     (line  33)
* compile-window-height:                 ecb-compilation.     (line  49)
* compile-window-prevent-shrink-below-height: ecb-compilation.
                                                              (line  85)
* compile-window-temporally-enlarge:     ecb-compilation.     (line  98)
* compile-window-width:                  ecb-compilation.     (line 126)
* create-layout-file:                    ecb-create-layout.   (line   8)
* deactivate-hook:                       ecb-general.         (line 120)
* debug-mode:                            ecb-general.         (line 124)
* default-tag-filter:                    ecb-methods.         (line  46)
* directories-buffer-after-create-hook:  ecb-directories.     (line 144)
* directories-buffer-name:               ecb-directories.     (line 155)
* directories-general-face:              ecb-face-options.    (line   8)
* directories-menu-sorter:               ecb-directories.     (line 167)
* directories-menu-user-extension:       ecb-directories.     (line 183)
* directories-menu-user-extension-function: ecb-directories.  (line 228)
* directories-show-node-info:            ecb-directories.     (line 243)
* directory-face:                        ecb-face-options.    (line  17)
* directory-not-accessible-face:         ecb-face-options.    (line  25)
* disable-semantic-threshold-alist:      ecb-methods.         (line  67)
* display-default-dir-after-start:       ecb-directories.     (line 267)
* display-image-icons-for-semantic-tags: ecb-methods.         (line  95)
* ecb-create-layout-frame-height:        ecb-create-layout.   (line  12)
* ecb-create-layout-frame-width:         ecb-create-layout.   (line  15)
* enlarged-compilation-window-max-height: ecb-compilation.    (line 171)
* eshell-auto-activate:                  ecb-eshell.          (line   8)
* eshell-buffer-sync:                    ecb-eshell.          (line  13)
* eshell-buffer-sync-delay:              ecb-eshell.          (line  31)
* eshell-enlarge-when-eshell:            ecb-eshell.          (line  42)
* eshell-fit-window-to-command-output:   ecb-eshell.          (line  46)
* exclude-parents-regexp:                ecb-methods.         (line 100)
* excluded-directories-regexps:          ecb-directories.     (line 286)
* expand-methods-switch-off-auto-expand: ecb-methods.         (line 108)
* find-external-tag-functions:           ecb-methods.         (line 124)
* fix-window-size:                       ecb-layout.          (line  29)
* font-lock-tags:                        ecb-methods.         (line 207)
* grep-function:                         ecb-general.         (line 134)
* grep-recursive-function:               ecb-general.         (line 147)
* help-html-path:                        ecb-help.            (line   8)
* help-info-path:                        ecb-help.            (line  24)
* hide-ecb-windows-after-hook:           ecb-layout.          (line  61)
* hide-ecb-windows-before-hook:          ecb-layout.          (line  72)
* highlight-tag-with-point:              ecb-methods.         (line 213)
* highlight-tag-with-point-delay:        ecb-methods.         (line 229)
* history-bucket-node-dir-soure-path-face: ecb-face-options.  (line  28)
* history-bucket-node-face:              ecb-face-options.    (line  37)
* history-buffer-after-create-hook:      ecb-history.         (line   8)
* history-buffer-name:                   ecb-history.         (line  16)
* history-dead-buffer-face:              ecb-face-options.    (line  45)
* history-exclude-file-regexps:          ecb-history.         (line  28)
* history-face:                          ecb-face-options.    (line  50)
* history-general-face:                  ecb-face-options.    (line  58)
* history-indirect-buffer-face:          ecb-face-options.    (line  67)
* history-item-name:                     ecb-history.         (line  34)
* history-make-buckets:                  ecb-history.         (line  37)
* history-menu-sorter:                   ecb-history.         (line  76)
* history-menu-user-extension:           ecb-history.         (line  89)
* history-menu-user-extension-function:  ecb-history.         (line 109)
* history-show-node-info:                ecb-history.         (line 123)
* history-sort-ignore-case:              ecb-history.         (line 138)
* history-sort-method:                   ecb-history.         (line 142)
* history-stick-indirect-buffers-to-basebuffer: ecb-history.  (line 155)
* host-accessible-check-valid-time:      ecb-directories.     (line 325)
* ignore-display-buffer-function:        ecb-layout.          (line  84)
* ignore-pop-up-frames:                  ecb-layout.          (line 103)
* ignore-special-display:                ecb-layout.          (line 113)
* key-map:                               ecb-general.         (line 152)
* kill-buffer-clears-history:            ecb-history.         (line 171)
* layout-always-operate-in-edit-window:  ecb-layout.          (line 129)
* layout-debug-mode:                     ecb-layout.          (line 149)
* layout-name:                           ecb-layout.          (line 168)
* layout-window-sizes:                   ecb-layout.          (line 194)
* major-modes-show-or-hide:              ecb-general.         (line 214)
* maximize-ecb-window-after-selection:   ecb-layout.          (line 223)
* maximize-next-after-maximized-select:  ecb-layout.          (line 231)
* maximize-next-after-maximized-select <1>: ecb-layout.       (line 273)
* method-face:                           ecb-face-options.    (line  72)
* method-non-semantic-face:              ecb-face-options.    (line  80)
* methods-buffer-after-create-hook:      ecb-methods.         (line 242)
* methods-buffer-name:                   ecb-methods.         (line 250)
* methods-filter-replace-existing:       ecb-methods.         (line 262)
* methods-general-face:                  ecb-face-options.    (line  86)
* methods-menu-sorter:                   ecb-methods.         (line 280)
* methods-menu-user-extension:           ecb-methods.         (line 293)
* methods-menu-user-extension-function:  ecb-methods.         (line 305)
* methods-nodes-collapse-spec:           ecb-methods.         (line 321)
* methods-nodes-expand-spec:             ecb-methods.         (line 328)
* methods-separate-prototypes:           ecb-methods.         (line 352)
* methods-show-node-info:                ecb-methods.         (line 367)
* minor-mode-text:                       ecb-general.         (line 223)
* mode-line-data:                        ecb-mode-line.       (line   8)
* mode-line-data-face:                   ecb-mode-line.       (line  39)
* mode-line-display-window-number:       ecb-mode-line.       (line  44)
* mode-line-prefix-face:                 ecb-mode-line.       (line  95)
* mode-line-prefixes:                    ecb-mode-line.       (line  63)
* mode-line-win-nr-face:                 ecb-mode-line.       (line 100)
* mouse-click-destination:               ecb-tree-buffer.     (line 101)
* new-ecb-frame:                         ecb-layout.          (line 301)
* non-semantic-exclude-modes:            ecb-non-semantic.    (line  26)
* non-semantic-methods-initial-expand:   ecb-non-semantic.    (line  39)
* non-semantic-parsing-function:         ecb-non-semantic.    (line  45)
* other-window-behavior:                 ecb-layout.          (line 304)
* ping-options:                          ecb-directories.     (line 345)
* ping-program:                          ecb-directories.     (line 351)
* post-process-semantic-taglist:         ecb-methods.         (line 383)
* prescan-directories-exclude-regexps:   ecb-directories.     (line 355)
* prescan-directories-for-emptyness:     ecb-directories.     (line 290)
* primary-secondary-mouse-buttons:       ecb-tree-buffer.     (line 130)
* process-non-semantic-files:            ecb-non-semantic.    (line  74)
* read-only-check-exclude-regexps:       ecb-sources.         (line   8)
* rebuild-non-semantic-methods-before-hook: ecb-non-semantic. (line  78)
* redraw-layout-after-hook:              ecb-layout.          (line 395)
* redraw-layout-before-hook:             ecb-layout.          (line 400)
* redraw-layout-quickly:                 ecb-layout.          (line 404)
* run-ediff-in-ecb-frame:                ecb-general.         (line 232)
* scroll-other-window-scrolls-compile-window: ecb-compilation.
                                                              (line 199)
* select-edit-window-on-redraw:          ecb-layout.          (line 408)
* show-ecb-windows-after-hook:           ecb-layout.          (line 411)
* show-ecb-windows-before-hook:          ecb-layout.          (line 428)
* show-help-format:                      ecb-help.            (line  39)
* show-only-positioned-tags:             ecb-methods.         (line 407)
* show-source-file-extension:            ecb-sources.         (line  15)
* show-sources-in-directories-buffer:    ecb-directories.     (line 361)
* show-tags:                             ecb-methods.         (line 420)
* source-face:                           ecb-face-options.    (line  95)
* source-file-regexps:                   ecb-sources.         (line  18)
* source-in-directories-buffer-face:     ecb-face-options.    (line 103)
* source-path:                           ecb-directories.     (line 364)
* source-read-only-face:                 ecb-face-options.    (line 115)
* sources-buffer-after-create-hook:      ecb-sources.         (line  63)
* sources-buffer-name:                   ecb-sources.         (line  71)
* sources-exclude-cvsignore:             ecb-sources.         (line  83)
* sources-general-face:                  ecb-face-options.    (line 106)
* sources-menu-sorter:                   ecb-sources.         (line  97)
* sources-menu-user-extension:           ecb-sources.         (line 110)
* sources-menu-user-extension-function:  ecb-sources.         (line 124)
* sources-perform-read-only-check:       ecb-sources.         (line 138)
* sources-show-node-info:                ecb-sources.         (line 155)
* sources-sort-ignore-case:              ecb-sources.         (line 170)
* sources-sort-method:                   ecb-sources.         (line 174)
* speedbar-before-activate-hook:         ecb-speedbar.        (line   6)
* speedbar-buffer-sync:                  ecb-speedbar.        (line  14)
* speedbar-buffer-sync-delay:            ecb-speedbar.        (line  29)
* speedbar-buffer-sync-hook:             ecb-speedbar.        (line  40)
* split-edit-window-after-start:         ecb-layout.          (line 445)
* stealthy-tasks-delay:                  ecb-general.         (line 241)
* symboldef-buffer-name:                 ecb-symboldef.       (line   6)
* symboldef-buffer-sync:                 ecb-symboldef.       (line  18)
* symboldef-buffer-sync-delay:           ecb-symboldef.       (line  33)
* symboldef-buffer-sync-hook:            ecb-symboldef.       (line  44)
* symboldef-find-functions:              ecb-symboldef.       (line  72)
* symboldef-minimum-symbol-length:       ecb-symboldef.       (line 103)
* symboldef-prototype-face:              ecb-face-options.    (line 118)
* symboldef-symbol-face:                 ecb-face-options.    (line 126)
* tag-display-function:                  ecb-methods.         (line 479)
* tag-header-face:                       ecb-face-options.    (line 136)
* tag-jump-sets-mark:                    ecb-methods.         (line 546)
* tag-visit-post-actions:                ecb-methods.         (line 550)
* tip-of-the-day:                        ecb-general.         (line 264)
* tip-of-the-day-file:                   ecb-general.         (line 267)
* toggle-layout-sequence:                ecb-layout.          (line 492)
* tree-buffer-style:                     ecb-tree-buffer.     (line 182)
* tree-do-not-leave-window-after-select: ecb-tree-buffer.     (line 232)
* tree-easy-hor-scroll:                  ecb-tree-buffer.     (line 265)
* tree-expand-symbol-before:             ecb-tree-buffer.     (line 289)
* tree-image-icons-directories:          ecb-tree-buffer.     (line 315)
* tree-incremental-search:               ecb-tree-buffer.     (line 347)
* tree-indent:                           ecb-tree-buffer.     (line 353)
* tree-make-parent-node-sticky:          ecb-tree-buffer.     (line 358)
* tree-mouse-action-trigger:             ecb-tree-buffer.     (line 373)
* tree-navigation-by-arrow:              ecb-tree-buffer.     (line 383)
* tree-stickynode-indent-string:         ecb-tree-buffer.     (line 401)
* tree-truncate-lines:                   ecb-tree-buffer.     (line 415)
* truncate-long-names:                   ecb-tree-buffer.     (line 431)
* type-tag-display:                      ecb-methods.         (line 580)
* type-tag-expansion:                    ecb-methods.         (line 649)
* use-recursive-edit:                    ecb-general.         (line 270)
* use-speedbar-instead-native-tree-buffer: ecb-directories.   (line 379)
* vc-directory-exclude-regexps:          ecb-version-control. (line   8)
* vc-enable-support:                     ecb-version-control. (line  14)
* vc-state-mapping:                      ecb-version-control. (line  38)
* vc-supported-backends:                 ecb-version-control. (line  91)
* version-check:                         ecb-general.         (line 274)
* windows-height:                        ecb-layout.          (line 520)
* windows-width:                         ecb-layout.          (line 525)
* winman-escreen-number:                 ecb-winman.          (line   8)
* winman-winring-name:                   ecb-winman.          (line  14)


File: ecb.info,  Node: Concept Index,  Prev: Option Index,  Up: Top

Concept Index
*************

 [index ]
* Menu:

* Activation hook-sequence:              Standard activation. (line  14)
* Adviced functions:                     The edit-area.       (line  10)
* Analyse:                               Semantic analyser.   (line   6)
* Analyze:                               Semantic analyser.   (line   6)
* Automatic activation:                  Automatic activation.
                                                              (line   6)
* Automatic deactivation:                Automatic activation.
                                                              (line   6)
* BBDB:                                  Conflicts.           (line  37)
* bs package:                            Conflicts.           (line  24)
* bs-show:                               Conflicts.           (line  24)
* Bug report:                            Submitting problem report.
                                                              (line   6)
* calendar package:                      Conflicts.           (line  48)
* collapsing:                            Navigation/Selection.
                                                              (line   6)
* compilation buffers:                   Temp- and compile-buffers.
                                                              (line   6)
* Creating new layouts:                  Creating a new ECB-layout.
                                                              (line   6)
* cygwin-mount package:                  Conflicts.           (line  65)
* Deactivation hook-sequence:            Standard activation. (line  23)
* desktop:                               Conflicts.           (line  92)
* Directories:                           ECB Directories-window.
                                                              (line   6)
* Download:                              Downloading new versions.
                                                              (line   6)
* ECB-layout:                            The ECB-layout.      (line   6)
* ECB-windows:                           Overview.            (line   6)
* edebug:                                Conflicts.           (line 134)
* ediff:                                 Conflicts.           (line 141)
* edit-window:                           The edit-area.       (line   6)
* escreen:                               Window-managers and ECB.
                                                              (line   6)
* eshell:                                Using eshell.        (line   6)
* expanding:                             Navigation/Selection.
                                                              (line   6)
* Faces:                                 Changing faces.      (line   6)
* Filter:                                Filtering the tree-buffers.
                                                              (line   6)
* func-menu package:                     Conflicts.           (line 153)
* Gnus:                                  Conflicts.           (line 163)
* grep buffers:                          Temp- and compile-buffers.
                                                              (line   6)
* help buffers:                          Temp- and compile-buffers.
                                                              (line   6)
* Hide windows:                          Hiding the ECB windows.
                                                              (line   6)
* History:                               ECB History-window.  (line   6)
* Hooks:                                 List of hooks.       (line   8)
* Incremental search:                    Incremental search.  (line   6)
* JDEE:                                  Conflicts.           (line 174)
* layout:                                The ECB-layout.      (line   6)
* Methods:                               ECB Methods-window.  (line   6)
* minor mode:                            Standard activation. (line  11)
* mouse button:                          Using the mouse.     (line   6)
* New layouts:                           Creating a new ECB-layout.
                                                              (line   6)
* non-semantic-sources:                  The Methods window.  (line  19)
* other window:                          The other window.    (line   6)
* POWER-click:                           Using the mouse.     (line  39)
* primary button:                        Using the mouse.     (line   6)
* Problem report:                        Submitting problem report.
                                                              (line   6)
* Redraw:                                Redrawing the ECB-layout.
                                                              (line   6)
* RETURN key:                            Navigation/Selection.
                                                              (line   6)
* scroll-all:                            Conflicts.           (line 196)
* scroll-all-mode:                       Conflicts.           (line 196)
* secondary button:                      Using the mouse.     (line   6)
* semantic tag:                          Customizing the display.
                                                              (line   6)
* semantic-sources:                      The Methods window.  (line  12)
* SHIFT-click:                           Using the mouse.     (line  39)
* Show windows:                          Hiding the ECB windows.
                                                              (line   6)
* Small screen:                          Small screens.       (line   6)
* Sources:                               ECB Sources-window.  (line   6)
* special-display:                       Temp- and compile-buffers.
                                                              (line 120)
* Speedbar:                              Simulating speedbar. (line   6)
* TAB key:                               Navigation/Selection.
                                                              (line   6)
* tag:                                   Customizing the display.
                                                              (line   6)
* temporary buffers:                     Temp- and compile-buffers.
                                                              (line   6)
* tmm:                                   Using popup-menus.   (line   6)
* tree-buffer:                           Overview.            (line   6)
* VC package:                            Conflicts.           (line 206)
* Version control:                       Conflicts.           (line 206)
* VM package:                            Conflicts.           (line 213)
* wb-line-number:                        Conflicts.           (line 231)
* window-manager:                        Window-managers and ECB.
                                                              (line   6)
* winner:                                Conflicts.           (line 224)
* winner-mode:                           Conflicts.           (line 224)
* winring:                               Window-managers and ECB.
                                                              (line   6)
* xrefactory:                            Conflicts.           (line 243)



Tag Table:
Node: Top183
Node: Install and first steps13597
Node: Installation14105
Node: Requirements14603
Node: ECB as XEmacs-package16845
Node: Standard ECB-Installation17813
Ref: Standard ECB-Installation-Footnote-122663
Ref: Standard ECB-Installation-Footnote-222781
Ref: Standard ECB-Installation-Footnote-322906
Node: Makefile customization23065
Node: Setting up Emacs23983
Node: General hints24573
Ref: General hints-Footnote-126182
Ref: General hints-Footnote-226309
Node: Setting up CEDET/semantic26413
Ref: Checking your hooks28640
Ref: Setting up CEDET/semantic-Footnote-130025
Ref: Setting up CEDET/semantic-Footnote-230087
Node: Non-semantic files30239
Node: First steps31340
Ref: First steps-Footnote-132801
Node: Overview33033
Ref: Overview-Footnote-136212
Node: Manual usage36308
Node: ECB-windows39327
Node: Basic ECB-windows40145
Node: Tree-buffer basics41264
Ref: Tree-buffer basics-Footnote-145214
Node: Tree-buffer styles45301
Node: Style basics45978
Node: Ascii-based styles48006
Ref: Ascii-based styles-Footnote-149734
Node: Tree-buffers with images49855
Node: Images for Methods-buffer53133
Node: ECB Directories-window53753
Node: ECB Sources-window57003
Node: ECB Methods-window59840
Node: ECB History-window62825
Node: Add-on ECB-windows69682
Node: Semantic analyser70136
Ref: Semantic analyser-Footnote-175871
Ref: Semantic analyser-Footnote-275957
Node: Symboldefinition76070
Node: Activation and Deactivation76297
Node: Standard activation77186
Ref: Activation hook-sequence77776
Ref: Deactivation hook-sequence78104
Ref: Standard activation-Footnote-178318
Node: Automatic activation78404
Node: Usage of ECB79160
Node: Using the mouse80336
Ref: Using the mouse-Footnote-185805
Node: Using the keyboard85854
Ref: Using the keyboard-Footnote-186990
Node: Navigation/Selection87044
Node: Incremental search89326
Node: Personal tree-keybindings91578
Ref: Personal tree-keybindings-Footnote-193736
Node: Using popup-menus93842
Node: The edit-area94806
Node: Temp- and compile-buffers106752
Ref: Problems with the compile window111507
Ref: Using special-display with ECB112456
Ref: Temp- and compile-buffers-Footnote-1113513
Node: The other window113621
Ref: The other window-Footnote-1121651
Ref: The other window-Footnote-2121802
Node: The Methods window121873
Ref: Definition of semantic- and non-semantic-sources122432
Node: Visiting tags123690
Node: Expanding125139
Node: Customizing the display132194
Ref: Customizing the display-Footnote-1135445
Node: Updating Methods-window135799
Node: Updating for ind. buffers141646
Node: Jumping to external tags144658
Node: Filtering the tree-buffers150819
Node: Filtering Directories151511
Node: Filtering Sources152469
Node: Filtering History153642
Node: Filtering Methods154928
Node: The ECB-layout159975
Node: Changing the ECB-layout160768
Ref: Changing the ECB-layout-Footnote-1195996
Node: Redrawing the ECB-layout196092
Node: Changing window sizes197096
Node: Fixing window sizes198705
Ref: Fixing window sizes-Footnote-1200182
Node: Creating a new ECB-layout200295
Ref: Creating a new ECB-layout-Footnote-1205729
Node: Hiding the ECB windows205906
Node: Maximizing the ECB windows208206
Ref: Maximizing the ECB windows-Footnote-1212385
Node: Back/forward navigation212457
Ref: Back/forward navigation-Footnote-1213612
Node: ECB-window synchronizing213673
Node: General synchronization aspects214930
Node: Synchronization of basic ECB-windows218876
Node: Add-on synchronization220471
Node: Stealthy background tasks222134
Node: Interactive ECB commands225442
Node: Customizing257779
Node: General aspects258416
Node: setq or customize259002
Node: Site-wide customizing260774
Ref: Site-wide customizing-Footnote-1266950
Ref: Site-wide customizing-Footnote-2267078
Node: Most important options267149
Node: Customizable options269987
Node: ecb-general271944
Node: ecb-tree-buffer285214
Node: ecb-directories305446
Node: ecb-sources325192
Node: ecb-methods333366
Node: ecb-history365570
Node: ecb-analyse373187
Node: ecb-symboldef383030
Node: ecb-layout388078
Node: ecb-compilation413544
Node: ecb-create-layout423097
Node: ecb-face-options423649
Node: ecb-faces429476
Node: ecb-help436616
Node: ecb-eshell438683
Node: ecb-speedbar440898
Node: ecb-non-semantic443881
Node: ecb-winman448607
Node: ecb-mode-line449402
Node: ecb-version-control454502
Node: Submitting problem report461308
Node: Upgrading463655
Node: Downloading new versions464409
Node: Auto. option-upgrading466555
Node: User interface466871
Node: Background information467927
Node: Common use-cases471474
Node: Changing faces472935
Ref: Changing faces-Footnote-1475795
Node: Small screens475974
Node: Big screens477436
Node: Simulating speedbar478283
Node: Integrating speedbar479295
Ref: Integrating speedbar-Footnote-1482815
Ref: Integrating speedbar-Footnote-2483018
Node: Large directories483179
Node: Remote directories485569
Ref: Remote directories-Footnote-1488740
Ref: Remote directories-Footnote-2488885
Ref: Remote directories-Footnote-3489022
Ref: Remote directories-Footnote-4489126
Node: Version-control support489543
Ref: Version-control support-Footnote-1491759
Node: Identifying backends491874
Ref: Identifying backends-Footnote-1494237
Node: Checking the state494417
Ref: Checking the state-Footnote-1499688
Ref: Checking the state-Footnote-2499876
Node: Remote repositories499965
Node: Refreshing the VC-state502310
Node: Adding new backends505006
Ref: Adding new backends-Footnote-1508392
Node: Known VC-problems508513
Node: Using eshell508799
Ref: Using eshell-Footnote-1511319
Node: Grepping directories511472
Node: Working with JDEE512661
Ref: Working with JDEE-Footnote-1514405
Node: Compile-window on demand514595
Node: Non-semantic sources516842
Ref: Non-semantic sources-Footnote-1522832
Node: Hide-show522919
Node: Window-managers and ECB524600
Ref: Window-managers and ECB-Footnote-1529442
Node: Virtual folders in History529501
Ref: Virtual folders in History-Footnote-1532001
Ref: Virtual folders in History-Footnote-2532163
Node: Elisp programming532211
Node: List of variables532851
Node: List of hooks533232
Node: tree-buffer534399
Node: Introduction535774
Ref: Introduction-Footnote-1540570
Node: A new tree-buffer540662
Node: A new tree-node566266
Node: Updating a tree-buffer571072
Node: Tree-buffer keybindings573059
Node: The tree-buffer-API576927
Ref: The tree-buffer-API-Footnote-1579328
Ref: The tree-buffer-API-Footnote-2579449
Node: Do not with tree-buffer579530
Node: Tree-buffer How to580541
Node: Adviced functions581995
Node: The layout-engine584525
Node: Programming a new layout585823
Node: Programming special windows594255
Ref: Programming special windows-Footnote-1616611
Ref: Programming special windows-Footnote-2616666
Node: Possible layout-outlines616797
Ref: Possible layout-outlines-Footnote-1625030
Node: The layout-engine API625210
Ref: The layout-engine API-Footnote-1627342
Node: Conflicts and bugs627438
Node: Conflicts627947
Ref: Conflicts-Footnote-1640957
Node: Bugs641019
Node: FAQ641849
Ref: FAQ-Footnote-1661738
Ref: FAQ-Footnote-2661772
Ref: FAQ-Footnote-3661819
Node: Command Index661883
Node: Option Index673032
Node: Concept Index690212

End Tag Table


Local Variables:
coding: utf-8
End:
